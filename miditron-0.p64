picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTAyIDE2OjI1OjM1Iixtb2RpZmllZD0iMjAyNS0w
NC0xMCAyMTowMTo0NiIscmV2aXNpb249MTQ4MF1dbHo0AJwAAABxMQAA-xB7WzBdPXtibXA9cHh1
AEMgEBAE8BOvHDAOgB4wDpAOBAAK8wYegA4wrvATLGZsYWdzPTAscGFuX3gIAM95PTAsem9vbT04
fSxfAAWfAG4QDjAOAH4ABgAOPxBuAG8AJh-wMQD-------------------------------------
--------------------------_mUG09OH19
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTAyIDE2OjI1OjM0Iixtb2RpZmllZD0iMjAyNS0w
Ny0wMyAyMjo0MzowNSIsc3RvcmVkPSIyMDI0LTA0LTAyIDE2OjI1OjM0Il1d
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTAyIDE2OjI1OjM0Iixtb2RpZmllZD0iMjAyNS0w
NC0xMCAyMTowMTo0NiIscmV2aXNpb249MTQ2MF1dbHo0AGgAAABYEAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2IiwzMgMALyIwAQD--------------------78QgiKSxoaWRkZW49ZmFsc2UscGFuX3g9
MAgA0nk9MCx0aWxlX2g9MTYKABB3CgCAem9vbT0xfX0=
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTAyIDE2OjI1OjM0Iixtb2RpZmllZD0iMjAyNS0w
Ny0wMyAyMjo0MzowNSIsc3RvcmVkPSIyMDI0LTA0LTAyIDE2OjI1OjM0Il1d
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTA5IDAwOjI0OjUwIixtb2RpZmllZD0iMjAyNS0w
NC0xMCAyMTowMTo0NyIscmV2aXNpb249MTRdXWx6NABOAQAAMAoAAPAncHh1AAMoAAAEAAQPQBAC
DgABoAEgAqAOAA8QAA3wygECAwQFBgcAD-_QCAkKCw8MDw0PDg8PEADwAA0PEQ8SDxMPFA8VDxYP
FxMA8QEPGA8ZDxoPGw8cDx0PHg8fFADxACAPIQ8iDyMPJA8lDyYPJxQA8QAoDykPKg8rDywPLQ8u
Dy8UAPEAMA8xDzIPMw80DzUPNg83FAD-BTgPOQ86DzsPPA89Dz4PPwAP--D-AQDr-ydaARAGDyAQ
ASABIAHwAAIQAgwQASAPISABMA9A8MMPKA--8MYP_AoP-w_AD-cPDQHwCQEQBgwwAP--uh--AQDM
9ALoD0AADxQPIw8yIA8Zb-8PJQQAE_8EAGpv-wEP-l8FABXfBQCnX-8PLAAP8A-_PwkAGvwSAB2-
CQDPP--wcA9AAA1A--_wCgD--1wf-wEA-5lQ-----yA=
:: sfx/2garden.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTA5IDAwOjI0OjUwIixtb2RpZmllZD0iMjAyNS0w
NC0xMCAyMTowMTo0NyIscmV2aXNpb249MTVdXWx6NABBBgAAohcAAPJJcHh1AAMoAAAEAAQPQBAC
DgABoAEgAqAOAA8QAA3wygECAwQFBgcAB5ADBAULDA8NDw4PDwAHkAYHCA8TDxQPFQ8WDxcAB5AJ
DwoLDxsPHA8dDx4PHwAHkCsA8AwjDyQPJQ8mDycAB5APDw0PEQ8rDywPLQ8uDy8SABESRACQMw80
DzUPNg83EwABUQCgDzsPPA89Dz4PPxMAghgPGQ8aUAeQYAAACQBQHg8fDyAJAFAhDyIPIwkAAWcA
AAkAnycPKA8pUAfw-wEA6v8o4QEQBg8gEAEgASAB8AACEAIKEAEgDyEgATAPQPDDDygP--DGD-gP
Cg--D4AP9w8NAfAJARAGCjEA---JH-8BAMzzB_gPQAALDjA-Nx--PzcfKx9MH-8fTD8EAFMf-x9P
PwQAUx--H1M-BAC5H-8xE3ETETMRMxEGAGMODzMPKAoHAL8ODzMOBBMOBDMOBAkAAzDwcA57APEU
HhM_Ex4-Nz85EzUfLT4fQxM4Exg-Oz8vEzkUNRETMRORE7EGABGRPAADBQAAYABABAwKEwUAIg4E
AgAGHgAAFAAHHQAjDAprAGAfTDMdM15wANA1PzsTNxk4H0cTNhNWvQAVUWoAFFGhAA9UAAoKHQAq
DgTNABE1zAAQGMsALzc5yQAKD1cACgsdAAXIAGI-NxMyHyvJANM3EzcZH08TH1MzHXMxYgABnAEf
c1kAFwKUARZzJgFRFjMWExYGAOgfTzMYMz9DH0cTMhMSM_0BBDYBEhEuAQnbAQ9DAQEUM70A0CsT
NR8fNT8tEzcfITfoAaEfI3kTOR05MRPRAgAZkZwAAAYADw8AGANlACPzsAkAof85AwM-Oz88PzsK
AMA8Pz4-O-EDA-EPA7EvAPQJDxoPFA8QDw0PCg8IDwYPBQ8EDwMfAiEDWgAEBAAPKAARA3IA-wk-
NBM2HDY-MhM4HyY4PzATMh8kchMyHyfgAETxATwDAz8_P0M-Qq4DFR5-Pn-eAE8HA-EE3wAnEANr
AAg-AAgMAAbGAcA3Hx83Py0TPR8hPTnFAU85NhNWxQFN4H85fzc-Nh9DH0U-Rz9D6wAfHOgAIQwM
AAB3AAQkAAN9ABAyuQEUMscBnzQTNRw1PBNcOOAAI5QPMQ8nDx8PGRMJAAEIAAMMAANxAOHzFK9M
IxczFxMX8xahI2IDLvMW3QAQIzcAEDMFAAFNAARGBfIMr0UDP0qvRwM-SjOuAx4zHhMeM6ED4QMx
M6EDrQMP5wECLwwKFwAEDy8AAQp5AAfPA7I9Hx89Py0TNh8hNs8DTzkyE1LPA7hENRw1OM4Dbzcf
JHcTN84DUR8dzgNbsjYfHzY-LRMyHyEyzgNENRNVM_UALlEzyAAPDwATBCcCJPMktQNQ8ySx8yQo
AAtpAQzlAyBzOfwAPxBzMfsAIQwMABdzaQCwkx8k0x8mkz80HDjSA-IAkxHTEZPRE5GTDgTTDgST
SgAP1QAAD2kDACPzAWQDL-MBeAECLwwKXwMXI-MBYQAAZQLwABM3PzITPRM9OK9M8wExE24JQjET
8QNnABcTmQAMDgAPWAAI9AcyEzITMjwTPBM8PyoTNhM2PyUTNRM1XQAEBAAeMVQADw4AEwNmAPYC
GB84HzsfPh9CHz4fOx84GBkOAEUZGAQDAwBh6APxEwMhAgAT4aICDwIAChoDBAAPEgIDPA8CA1ID
IT8mTgEQIU4BJT8jAwEP9wA98hBfMl8xPy9fMV8vPy3vLwMfOxMfOhMfORMZE-EfAxETAgAEtwAI
CAAPFAAJD98AAAFKCQMDAA3rABAt1wEE4gGfNRM1PyUTOBM46wAAAUAAAwUADw4AFwfjCvcDfhM_
E14fQxM3E1cfRxM9E10RYQAScUULD0cABQ8OAAsGhApREjMSExIGAGAfTzMZMxnjCjcaMxp_Cgt9
DAN0Cg9zDA4gDz4WAgACAxAhLAFk-yMAvygzJgEh8RC3CgiTAAwOAA8CAAUUM14A0BUTNRNVHz0T
OBNYHzskARIauQADYwABBAADswAKWgAPDgAJCMIAsgUwH0ozHTMdEx9JIQERRyEBThkTGZMYAUUR
ExGTPwAPCQABQBMOBJNXADIPEEBMAh8GCACRH3gEAP--Dh--AQDpUP----8x
:: sfx/bells.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTEwIDIxOjAxOjMzIixtb2RpZmllZD0iMjAyNS0w
NC0xMCAyMTowMTozMyIscmV2aXNpb249MF1dbHo0AN4BAAD7CgAA8G1weHUAAygAAAMABA9AEAIO
AAGgASACoA4ADxAADfDKAQIDBAUGBwADkAIDCgsMDw0PDg8PAAOQBAUPEg8TDxQPFQ8WDxcAA5AG
Bw8aDxsPHA8dDx4PHwADkAgPCQ8iDyMPJA8lDyYPJwADkAoLDyoPKw8sDy0PLg8vAAOQTwDgMg8z
DzQPNQ82DzcAA5BeAP8BDzoPOw88Dz0PPg8-AAPw-wEA6-8nWgEQBg8gEAEgASAB8AACEAIJEAEg
DyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYJMAD--7of-wEAzPAN6A9AAAwOMB9IH0Mv
RQ--Dg8_Di--Dk0eHz4efRMAEA0SAPIBLQ5NHhQeXWENIS0BTVF9QQgAVV0PWg9IBADwADkNL1ot
BU0FD0gFBwUHfQUAQA85DSUTABAHAgBAXfBwDmoA8AOdD0UNBwgdD0MNGF0bCC0XfQgPABELDgDV
zQENER0BDRFdIS0RfQwA0M0FDRUdBQ0VXQUHBS1bAAcPAANVAGMdGygNDgSoABl9DQAaQbUADpkA
ARIAHwOqAAAJmwAKqQAInwAJDAALnwAPrgADL-2wCQBDGkAIACMPEAkAHwYIAP9iH3gEAP--ClB4
-bDwMA==
:: sfx/galaxy.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTA5IDAwOjI0OjUwIixtb2RpZmllZD0iMjAyNS0w
NC0xMCAyMTowMTo0NyIscmV2aXNpb249MTZdXWx6NAA_IAAAQUkAAPAncHh1AAMoAAAEAAQPQBAC
DgABoAEgAqAOAA8QAA3wygECAwQFBgcAD-_QCAkKCw8MDw0PDg8PEADwAA0PEQ8SDxMPFA8VDxYP
FxMA8QEPGA8ZDxoPGw8cDx0PHg8fFADxACAPIQ8iDyMPJA8lDyYPJxQA8QAoDykPKg8rDywPLQ8u
Dy8UAPEAMA8xDzIPMw80DzUPNg83FADwADgPOQ86DzsPPA89Dz4PPxQA8QAOD0EPQg9DD0QPRQ9G
D0cnAPEASA9JD0oPSw9MD00PTg9PFADxAFAPUQ9SD1MPVA9VD1YPVxQA8QBYD1kPWg9bD1wPXQ9e
D18UAPEAYA9hD2IPYw9kD2UPZg9nFADxAGgPaQ9qD2sPbA9tD24PbxQA8QBwD3EPcg9zD3QPdQ92
D3cUAPEAeA95D3oPew98D30Pfg9-FADxAIAPgQ_CD4MPhA_FD4YPhxQA8QCID4kPig_LD4wPjQ_O
D48UAPEAkA_RD5IPkw_UD5UPlg_XFADxAJgPmQ_aD5sPnA_dD54PnxQA8QCgD6EPog_jD6QPpQ_m
D6cUAPEAqA_pD6oPqw_sD60Prg_vFADxALAPsQ_yD7MPtA_1D7YPtxQA8QC4D7kPug_7D7wPvQ__
D78UAPEAwA-BD8IPww-ED8UPxg-HFADxAMgPyQ-KD8sPzA-ND84PzxQA8QDQD9EP0g-TD9QP1Q-W
D9cUAPEA2A-ZD9oP2w-cD90P3g-fFADxAOAP4Q-iD_MP5A-lD_YP5xQA8QDoD_kP6g-rD_wP7Q-u
D_8UAPEA8A-xD-IP8w-0D-UP9g-3FAD0A-gP_Q-6D-sP-A-9D-4P-wAMoHACGgxvAksMkA8QbwI-
DPD-AQDp-yU8ARAGDyAQASABIAHwAAIQAg0QASAPISABMA9A8MMPKAzwxg-4CgwPgA-3Dw0B8AkB
EAYNLgD--5wf-wEAzP8g6A9AAAkOMAzvSP80ABzT-zcADPEPHPEODA8yDygNDxkPFA8QDw0KCAYF
DwQPAxIWAAMvARwYAAIfAi4ABDDwcA50AGv8AA8pDAQCAEcPKAwHAgB--zAA-AABDAIAC4-xAPwA
DzIMCwIACx8HigAJ-RW-N1xfOBwPPAwPPiw-PHwPPgwO-AGxXFEcAQwBLDF8AQwB-AFCABVcEgBR
HAsMCywOABB8bAAGVwDwAjwPQwwPSgwfSFwPQ2wDDA9IDgDiD0gsA-wFwQwBDBFcAWzEAF0BLAH8
BWIAArkAMVwLbAkAAGQAFUxcAJj-MAAc1A8tDAICAIj8AfEAHOEMAQIAD7oAAG8PAx8CARwXAABK
DwILDAIABHAAryD-NAD8IPEA-CBOAAMEKAAcsAkAMhxfOlkB0gwPPAx-NZz-NA4cURycAFlxnPEO
HEYBC6oBH5ykAAMPggAJMBz0DgMAEfEDAA8-ABgfHGsAIALYALkODA9DbPIA-AACDAIAEizlAD4B
bPHFAhMs7AAfbGEAA0-8AAsMiAECZBxfN3wDDFABEixfAlM-SHwPQ10CtAQsFA9ILA9RbFF8awAA
BgAVMQ4ANiEsAXUAFXxZAgR5AQHBAgESABcHbwJ3Dy0MDyQMAgIASw8mDAoCABgHAgCvHD9MTA9P
DDgBDAIAGo8cMUwBDDELDAIAGgK7ARFMwgAVBikB8AM0fHucXzh88wAcUXxxnFF88QAoABIG9wAD
CQBfDw0PCpwWAAJfDwgPBg-dAg8AzgIX824CD0AAAC8PAlgABg8yAB8FeABAMA4c27MFD3oAXQxy
BJ4M9QAc3y--MACWBVsc8Q4LDAIAD5AAPuX8AB9IfAQMD0cMBAwfSgoAE0wKADP8ARH6AgsIAAAW
BQTsAg0JAANcAM8c0-8pABf8EPEQ-BCgAB5ECwf8DkgAQt86HzwpBGZBDA88bC8LABYeFwAhjPGZ
AEoMAWwhCAAfjHwABwZGBA4KAAYqBoErABza9QD8AJMBL-wAhQFABBADMHwDbJUCUfMOfAFsbgA-
fAtsbwA-RB803y53AiDxEGcCHwdLAAUPfQA-D3sDZzEcD0ziBTAMD0MFAG9KDA9PDBT8AggEgAYf
DAEDAgQIAASKBh8MDQMFDBYDIRLXFgNODvES-HkBDxgDGhMuxgYRCAgANEMMGA0DFQgjAxYIIgM1
CGwhzwY-AQwhLAMDBAADAtEGHwwYAwENIgNAHP8rDiEDD9EBXgZHBuLfLjUMZQwlHE8vDDMMIwwA
wfECDGEMIRxBDDEMYQoAD2cACADqABQNCAARHAwAHAwXAAQIAAR0AOHXPykMZAxERww3DCf8Am4A
f5EMMQwh-AJpABUB-gEHagAl-AChA-oG-zACDGIMIhxLDDsMKz83DGgMKPEE0AAPPAIKA2AAD9EA
GRCcAQkQRwcJEroXCTJ6D0MqCQAnCRAKEgARCjEJQT4MDqwtAhAMhAsXgVUCAwgAE6whAg_fAAAM
GAAJbQIZLCgDJv8kMQsPBwIDJfwg2gMGEgaQPzQMYwwj-AAzBwADKAsgAWw0ATEh-AAHABYcygIK
CQEv-ADsAQUx-ysCVAJhRQw1DCUymgEPXwJMBdwCVh8tlQxlfQASDBgKRTSxDGGAACIhDPYJAk8C
DVIAD3kABAAEABsG9QmTlwwnPykMaAxI1gI5kQxh1wIHTgAPzQIWFJxuC0QMDzcMDAC3-Ak-Nwxq
DCqcAQwCACH8CaEBN5wLDAIAJvwJYwAKlgEGPwww-AEDoAJAn0gcA1wLYEoMBSwVAsYLBFkAEAEH
ACmRHMULA18AEQEHAAu9AR8cxwsCcByfJAwkPy2OAzD8ADgHABIcIgEGWwInBw2pAA9hAhZA-AA-
NA8BAvADEDoLAARSAAVhAi-8AEoCI5QcXzA-LgwjPzAiBTIyDCIiBQO8AAZjAA6-AA_6AilQ-AAf
PJwxBGZKDH9ID0NMBAXHD34PQ-wFEZwBRgQAzA8CBgIG3w0NLQQXTLYC8gAvKS8rHykfKx8pHBYc
ByxDDZMH-ASRDOEcERxaAEMcAfwEsAADswBgCwcbBxsHuwIQHAMAEywPDSX8AsMA8SAaDCocOgwK
TCscCxwLHBssHzcMFBwU-AQRDCEcMQwBTCEcARwBHBEsEQwRHBH8BB8BAFENAAkAEUwLAAACACEH
LBkATBwLBzwmAfAIGJ8kDCMfHdwSDxzMHyHcsQxB3CHMEdxCABkNqgAAEwBFzAsH3IwC8AkrDCUU
fC8wXC8vHAYcBhwWKB8wCBoYHzsUA3IskQxBfCFcngAQ4aYIC04AVnwLBwtcoAAGCQEHggUgHFo5
AgACAfAHGhUMBUwlHAUcBRwVLB80DBIcEgoMCGUADwcBAB8hbwAADxYBDAd1AAUZAQffAwU3BAhD
BAO9Dz2fSBy9DzQMP0-rAwoCAB0sBwQkDDHrAwoCAAILAgh_Ag4XBAIgAAOvAPEMFwwXDEccFwxf
KVf2BF8mVTgRDBEMQRwRDPEg5gAAAgEBBAEGVgAOCQAM4wYvIRAtAAQDdQD1AhoMGgw6Dy4cEwxa
Xy-6ClI8dQAhHDxqAA92ADYFuAISIYEGQT9D-CF2Bif8IT4QEwQmAPADLyQcBhwmDAYcBl8mXyv4
Cls8IQJzIQwBHPEdPAACAPUBUxwbBw0EaAAJCAAPkwACCSIABJEA-wQfKwwVDEUcFQxYW-80BF8p
Vz8megEJCUQAD24AFwfcAOcfGPwqPx8R-CoxCwf8KhkABboC8Ai8Hz4cWhwY-AAXHBd8FR8m-AAR
HFEcEQcAURF8MfwA8wICWAAzHAsHEAAAkQMFHgTAnBU8WA8pDBocCgwasxLQfzn8AhE8YQwRHAEM
EZARAI4HFDxFAAB7AQCaAgZXABh82gAVfJcAwTccXzk8ExwTHF8_HH8F0Ax-PDwPPuwRHFE8ERyl
AAAiA0dxPAHsTAARPAwAB7IAAvkCBV8ANTwLLGEA8AlD-ARvPCwPPix_HA4sD0PMEfwEYSwBLHFY
AFTMCwf8BDkASAssCyxFAAFWAAQFD8AfNxwfOxxfNRwSPBKIEjKfN9yeACARPP0ALJHckgAvBzz8
AAU1CwdcnQD3CBMcXxG8XxB8fxVcFrwRHFG8UXxxXBG8OwAfvEQAAjVcCwdEANAfHF8dvH8cXH8h
PBXcRABvcVxxPBHcRAABAHkWCScBLQcc4wTwB18kHBgcGF8mHC8tLAosfzdcU182PzXqAEAccRwh
OgESXHcTBOkAADcDBg4ADEYBGFyvAgu3AhAcMgXwBT6MXzUfMBsMGwwLLHJcXzxfOz86nAFUjJEM
EQxuADYsC4xAAAE2AwHxBA9nABPgDB9FbA9PDA9MLF88vHaaBQDDBXBeXz8-PgwRjwlDLFG8geES
MAwLB4YJHSw7AQXtBx8MagAI8gUPQwwFDA4sHjwPRQxfQfwED0j8BdcFcBE8AQxR-ARGCBIMYAAW
PEoAU-wEC-wFQwD3CxwDzF85HB81DBgMCCx-NFxaXzM7HAHMURwRDwEXzHEBDwwBG-IFHH8YXF8a
vF8cd18hXT8fHHFcUbwhDwwhAhy8RgABAgELFAAHWgDA-BJSfF8VXxQ-E-wSmhUi-BIlABECuQIm
BgIGAA5iEvAHDArMGB85HBUcU1wDDBVcE9wBDAHMMWADEFxSGUAR3AsM9AAiCwdvAgBJABBcPwEW
XEwDMiwebHIQxF9BXA9DTF8_D0NsGtYJEbznAWIMUVwBTGFXEBK86AEUDE0AEkwJAAVLEBeMxw0Q
CNoH8wgFTFUcHzAcAwwTHFUcBQwILB58CiwKLMMHM0xRHAgFERzuATN8ASyGERQsWwAYHBEFAA8A
AbYBF3xlBFH8AF9IfFsaUNx-MPwI7hdSEdxx-AgxAACyESIH3AwACEMFsJxfMFwPKQwTfFJ8AgQx
HxWcNQF3fFF8cTwxnC0BFHxIAAVDAAD3BhUH6QDxDB9MHyRfK18RvH8cFxyXHB8mXAFM0byRHJEc
ESABCMcBFLwNAAHQAAZSAAdOCvAAHA8TTB8YXF8dHB8tPB81NQUAfAtkPkwBTBFcOAVjEZwBTAtM
dgInBgI3BQGpAD2cCyygBFQPN8wPNXIJcTf8FTocAcyGAVAMAfwVMRwDEQwCACr8FQMEM-wHCpwJ
EArSAd1KDAMsEwgsD1FcEfwHgwlWXAsH-AcgAg_DDQuiCgwKTArMDzz8CogIpDUBDAFMAcwB-Ar6
GFFMC8wL-D0DCpQI8AL8AF8mV-8pBF8mVz8f-ADxIHkHBmYBCn0ACgoICCQACNwD8wEtXyv-LQpc
PyYccVzxFlwxTQEFYwEPWgARGFxVAIBfJBwTHBNfKcsIIFxbugFWHPESXFGyAQUBAg9bAAsDMQAc
PEsLFQ4_C8QMXzBfL-8wCl8vPy2NAQR6GBQgewEEAgAPJwEnK-yw3AOhDA83LBscXzkcCA8Ac-wD
CgwfO9x7ABMs1ANADAH8A5ADBgICFBwCAQAQACD8A5QAFLxjAKYIDvwvAfwvC-wX6gERMAkDVDAc
Pys8hQkSBAgDIjE8hgkdBAYDAggACYgJ0XwfHx8THy8cXy0PKQySBEAfNRw7hgCUTA80rBsIjFEc
lQkhMRyKAjCsIYxBAAWyAACqAAaLBAE6AEULrAsHiAQ2vB8mUwgeGlMIB-8DA1UCC00IMyweTNQB
8ABDDF81HBUfORw-Nz8wHAgXFtE3DAMMDzkMCgxTbBFMWQFRDFEcMRyQCRQMAgBRUWwLB0xZARUM
FAEDfgACtAACXQUHIQAVPL0AECtUCRBSUwkeFVMJBbwABwcFBk0JBxsCgTwsGBwO7AgsAgAAzxEQ
A5YIYREcAewBLAIAABECIjEcCQIR7PYIEiwIAgc8A1A-PhwDDAIAoAgMHzUPN0wFjDU8BsIMDzsM
CEwYFgwDHDOlAQIAFzVMAYwOACBMMTodBaIBAgIAWAcLTAuMEwABlwUCLh0IsQPyAhIcEl8mHE8t
DAqMnzA8HzOcvgmHQQwBjJE8EZw_CAFYAQUOAAGDExqM8QdFPAsHfMUCQh8wPBWrCfEFMxwPQiwD
jBMMDz8fPD86-AARPDGiCBExvQlREQxh-AA9AAiiCAPJCRAM1w8HOQgEjghE-BLxDjcID3gIFpQc
PzecHzkcHzw1CYA-NHwPNwwfNLMLYDY8OBwxnKoLAj8JAPghQjEcETxZARGcAAEYHKIAAWYHARQA
Hzw2CQATEOIIATcJBH8eDjkJDLILD7YAAAdqAnBDLAYMDz-sJwIAfQRiAgwfO5wDYgIW7HkEIpwB
YQIX7G8EFZyzA-ADHD9F-AIO-BMGDB4cMfwCAfwTAAQAcAB1-AIL-BMLDOMCIJy1NwQ0LTwViARn
Gh8m3MEMhwQd3LcAEQwOAQ_RBAYAugBhAixfNRwY6QNANRwPNNMAEDehF-QIOQwBDFq8DwEMDQwN
LF0cPRx9HA0sDQwCACFdvM8AdSwLBw8gDxmGAhIcEAACBgARHPgABAIAARMACP4PB7kIAkkNwhQc
DUzdvF18fVwdHCEDBDMABgoAFrwLABZ8CwAKDQSj3AoMURwVHAUMGF8F8QYG-A0NDF0cHRwNDB0c
PRwNDA1MDfxOEge9AARZBQK6AACiAxzsEQkDWgXgEzwNTB1cXbx9XH08HTyqAB9coQACCRgAC2oF
BkcCEF_OHgC9H8MPPAxVW-YEGzxbXG1mAVT9EjxdXFMBA0gBHwwXAQEKaAAITgchLRAEAgx9ATSc
DkxyCL80nA1M-RZcPZwLTFsAHwQcAAOmAAfLBHIaHBpfKVfxIwkQHH4BO-0iHHIBHwdxACcMCgAJ
VQQARwQhPBzgEwAGBjJMDze8BSEPN88FoCwzHD81HD2cLQwTAmINLA0sDUxxAXMNDC0sPRw9qAAy
nAsHFQIRDCUGBNgGAGkEFCwpAgl9APYDfxj8Dg9DzD8_HD9DHH38Dg3MTQACqwBP-A4LzDsAAvYE
NpwfNTxfL-UKUj8mHD2cHTz9GoYAHDzuAA8eASQAtwqgfD8_PAQMD0IsBMsGkT87WPwAXXw9PAgB
bQwNTL38AGMDETwBAQO1BgONAglXAATNApK8GwMMNgxmDCZ8GPEAMwwjCPwDLQw9DG0MLRxNCAAy
PfwDVgEgDyAGABAKAwAACAARHAwAARIACBcAJwtsHwgnPy0fGTG8HRxYACH8AAcAAigICj0ALPwA
EgAIiwlxPD8pDGUMRZ4agHw-MAwifD08SwBgnQw9DC18BAAA5wAUPDsABggACqoAG3xcAEK8Hy8c
1htRRAw0DCQPAQSsAAMEAQ6vAA8DAQoKYAAwHC9FnwlwDz9sP0hcA2YdEANxIAQKABNMCgAgLC3P
AjJsPVzXAikdfAgAQywLBwq3HEEKDxlc1QIGXSAFCQAHWAohPyujGs9IDDgMKDIMIj83DCHWADkA
5ykQBa8DIhQFfh2wBGwlDA4MBgwEbB4SADIG-AG5AAHXADkMDWwIAAN4GwDeDQG4AC0LbAoAHIys
AqI8BQwEDAEMBAwFdAAdBnMAMQwErGQAD3gAByQMDZ8eD30ACwbgICIfLRcdQWMMQ0cXHUQAvQxt
dQIj-ABdAgUeAQ99Ag0FGR1AHFI-LpkBBugfEDQlA0ocnQxtowECjwEHUQAPrgEhEBEwGiE-LeoD
JU8v5wIcvW0ALwsHbgAxA2wjAKsrA2ojEjEIBALMIADDBQK9BDgMDQwTBBMcmAEChAgPHAQVAJgd
JiI1JR9vPzAMZAwkSQFEny5MD0NMBgwTfMkDB10MLUwNTMEDBQgAAVsMH0y9AwEMxgMF_gIXHOIg
8waxbC8vHAgcCBwYHA8tFAIUEhwEDAJMAdENbL1sLRwNHA0cHRx9KQcG1wIeCoQGE2yMGQDaBwIB
HBccfgAAWR2UHx0MLzQcNQwFAh3yBA83HBYMFhwWXJ0MTQwtHD0MDUxxAIMtHB0MHRwdXDIBAzUB
AVABEQs3CAKNBgNvACELHBoAFhzbCiAVVG4c8QQsJBwUHysMATwPEMwfFdy9DC0sZQBBPA3MHRUd
CF0AFixbABg8HB3yARKRDCEcDykhGBEYHDgPHEycHOEVDBUcFTy9DC0cnRxNTCQBESyzAAE5DQhY
AAMMAQGfAAGtAQGzAA7EHWMAvg9DrAbZHnMGjAb8Bc2s2gJPjA38BXMBAiMLrOMCGYxXIDAjHxHM
HRMhuh7AHB8h-ACdDE18LVw9UQAArQAq-ACmAAXFHRIbth4WHAEBBswj0rQcD0oMdJwEDAIMBCwc
HgMiBWW9HA0MfZwqBQQWBQ_0AAEbHBgAGJw_BQ2rAsADFwMXIwwDHC8dfBEbHiEHDIABUBwPLR8w
BADyAR8tD1FsjQwNHC18HQwNTD3eADMcjWx2AQFjDwCkBwExAikbDKACBTUBESzkGyMvN-0QQDz8
AQ8WAxIY5wGyDzAMDy08HQxNHF1tBgbvATItDA0cHQQ9AhQKCCIK5gEH3ACCHwzMLxHcHx2jH1Ed
zC3cLY4CS8wLBwqXH-MALB8wDDYPLhwSJgwmHEZcNQMEtiMQLJIAADcDI01cpgN6DD1MDQw9LJEA
FAwKAAijHwKDAQFoHSUKA4MHEEPbIgJrFRABMQsB_yJiCCwfO7wNfwcSnWwFAOUBNSwdvO8iLwoD
2B4HBeEChh8YXCccFywPXSEiEhyYA3AdXC0cHSydoA0BCgECqAAnByw5AxgcFwEEghQULK8BwS80
DCYcNgwGTC8vHPICEkxaIRZcGgYWPV8EACMCE0xfBAUhBhcbKQEEXAQhDAuHDguoAwSbAmD8DgUM
eHwoAQBVGHQB-BMNDH18HwE6DfwTGQEdfGoi9AgfKwwSDBI3DBcMLykHDCYvJg8vDC8tJgsAUF8t
AgwkDgBzHQwdDF0MHXcGAgIAES2WAACxABQHCgAExwMPCAATA4QAkhcPJBcFF0UcBXMAYTALDC80
LwYABogAARUAWM0cTQxtfwAEnAEAdh8KWwAPewAUcvwAv0gBrAHwBCDsCOQzA-AEEuzRCQtWAgfv
BBfsTgMgfD9HARMkLAEHsgAFwQA8JHw9PgEffDcBLLQfGPwuHfwuCwf8LhIAkDAMFQxVDBUMJXwA
4CQCDCUkAgxUAgxVCwwhDgAPxQFJLB8MjgABygMTCMoDEAifEmJKDAYsFgPOIh98zQMARg0MPXzP
Ay8PGdADBwIgAASbIQBhASlUAgMAOIRcNOYAPo1cPcAADwgADgVVEAZsABEkTgFyLzQPNxwPLwsA
QCwLDCEEACFcW7kNANoRIG0MzQABBAAuXF28DRkcDwAXLAYAAmwACqASC2cEAE8WND4MCC4aNj9D
HGAEAwYAIfwKgwUTHDEBBgYAJ-wKcgUEIykA_QMyIy8mzwBRISwEDFUDACGFVM8AAssAAAgAH_2F
DgAIwgAMFgAAYwAC-A8oCgbSAGT8ACMHDFMDACEjXLwaAmsAXm0MLVydFAsMCAAYXFsAA1YAUSUL
DCEjyQAhTCICADBSXDJVADFdTC0CAB9dAgICG0wEABQG8QEEVwAFaQVCvB8_nOEZIww4KRQivB1s
CHEMnXx9XB28URUBAgA0BwoGTAAUfAkACh0UQpwfKzzSGVETHE8rLNEZ8gMS3B08XRwdPB0cTSwd
HB18Pdz4DxMGqRICPBUADwACPhoBQAQEEQYEYiLwAjkcD0UMAfwFD0P8Bx0cHRxdHgJE-AUN-MIG
BVAARQwL-AVdFMC8H0OcCCwIrA88LAT6CcETDgxe-AAdnA0sDaxVAkAsLQxdmQFRnAssC6xOAgCJ
AxwM3AEBkSMEsxkSS4UIQBsPNMyJADE9HI2dAjkBLcyJAAKaAAQzAQI0ACULB1wFAqIi4RwO7A87
DAJMBAwSnA85UAABowUAlAwqnA1RAACaBQHjAgbhFiL8Bu4aYAFMQQwPNEMDA0gaUAUMc-wIkRU0
DUxNPwMBAgAwffwIQwABfAcCmAAA9QAWDOIBNgQPEEkVA4sjApoVQxLcHRyYFQL0GgEtABG8CAAR
AVkIAAkAABECB4sVAyQY_wJRfF8VVD8THH1cXbxdfP0AHDYAA0YAFHwXAAQGAA9-IwFhBYx3-AJd
Nw1yLSwNjH38AjAAAggCBQwAAlUZBJMALfwAfhqADzwMEwIMEhzBOAMCABAMjQFiLDI4Ej9IyxYC
thQGyhQTLEwBISzdwgACiwQBOgECVgECzBQTLFUBEix-BgAEAgjNAFEOLB9DD2gSoAVsFRwDDA4s
Diw3GoEMBaxVH0E1HOYLNwwNbHYAUwwNrL0cnAIBIw4GawA-DAusZQAAIfwAjBUDQyRgjJT8Di0s
qwcxDYydzTIVLBgHGIzLAwcICnECbA9CzB81IRoSNdcagDMcMxwNbA3McQcwDSw9tBgRjIQVM2wL
zE4AEiwXAQN8ARcckgDxCVwSHA4sDowPN4w4HAhMCAwfNBgcPza8HUYAAEgAEQ3dBRE95xIAQAAD
QgAB8wIhCwdLABdcHRtAfF8hWh0bAE8CAB8bC5kECAgAC2sYA9ECVhwfJh8hbhgkHD1uGAI5ABa8
QgAYXCMBAWQCFRygBEIkXytchQNQBAwUHESHAwC3ChIIhgNiWLx9XA0MHBkrTQzkGRYHmgUDPQIC
5gAPlgMAGAM6BxBIqQJQRewEDAQRBUCsAQweRAED3AkwBQ2sbQAFFhtH-AULrOkaA1AegA9CDAGs
ASwBGgUQBRoFghgODF4PSgwSSgAAogAYrCUFFG1TABEMcAILLQUgDyChAAdmACCcvwUGE3wDBnIa
-AC9HB18-wUBHQ8DMQADCAAC9QUADAAFAgYEwCSAHD9KHA8-TAUxH2IUHzkcFBx_BRIHLwIAfgUB
WQERDAoGJA8gMAITAVgAAVAAERwQAAE4AAVQJiI-ReggEAUzBQPlIEEFDDhcjgVQBQwSnAjgAhIM
AgATXQoAJT1cmwUQLFQAALMBAgIABHEABQ4AHlytBUAcDx-M8gUyTD83ageSGhwNzF0cDUydlRsV
zEYAEEwKAAEOACIEfAcABGcHH-8BAOlQ-----zE=
:: sfx/midi2.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTA5IDAwOjI0OjUwIixtb2RpZmllZD0iMjAyNS0w
NC0xMCAyMTowMTo0NyIscmV2aXNpb249MTddXWx6NABbAwAAjg4AAPAncHh1AAMoAAAEAAQPQBAC
DgABoAEgAqAOAA8QAA3wygECAwQFBgcAD-_QCAkKCw8MDw0PDg8PEADwAA0PEQ8SDxMPFA8VDxYP
FxMA8QEPGA8ZDxoPGw8cDx0PHg8fFADxACAPIQ8iDyMPJA8lDyYPJxQA8QAoDykPKg8rDywPLQ8u
Dy8UAPEAMA8xDzIPMw80DzUPNg83FAD-BTgPOQ86DzsPPA89Dz4PPwAP--D-AQDr-ydaARAGDyAQ
ASABIAHwAAIQAgwQASAPISABMA9A8MMPKA--8MYP_AoP-w_AD-cPDQHwCQEQBgwwAP--uh--AQDM
-wToD0AADw8PMDD--7DwcA9AAA1ACgAx8SAPDQ9AMA--3x8fGj8fH-9-Hx8afx---wjxBB7xAv4I
D24PWA9GDzgPLQ8kDxwPFw4ABBIAABwAAyAAFR4ZAA8dAAAEPQAm-gdzAP8IDp8TPh8OPxMeMz4f
DnP_CJE_UR4xPpFyAAMfPmsAAh8_ZAAN_AMeP0r_LDH_LA9LDzwPMA8m-iocAPEKQ14PL04fLR4E
TgROFB4E-gsxXgFOER4BTgYAJP4LNgDGXg9FTg9KDzseD0ZOCwAo-glMAB9HaAAG_AZeHzI_BU4f
MR4HTgdOHzAeCP4PET5oAJAPD1APQD4PU07IAEYeD1BOCwAIZADwA14fKy4-Jr4-KP4XES4xvjH_
F-YAEi79ACMEvggAKP4RMgCgLz4PK04ZHglOCQYADnkAT0YPOD7dAA6B-hkfH-4uEf5rACj_BRkA
HBMYAH8NQP6w8HALCAAWQg8NCzAKAB0GCQAvDUAIABOCDw4LMP4bPx_CAQMHARUBGgABJAAfAgkA
By4NQAgADioACQkALw1ACAATADEAMh8fGiUBRW4PWO4VABoSFAAMOQAPCAANACQBoyG-H-4ksf4k
D270ACUPJH8DRVgPRi4oAD_THxopABIfsAkAAy4NQAgADioADwkANh94BAAEDioABQkAH3gEAAAD
aQEPCQATF3gEAA4eAAUJAB54BAAPJgAUHni4AA8JACMP-wFRoCIfLx4MTgz_JREqBCb_JZcEDiwA
BjUAAWYEBjQABVIEFi5XAF8mHgpOCiMAAgQkAQ8EAP8GH-8BAOlQ-----zE=
:: sfx/midi3.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTA5IDAwOjI0OjUwIixtb2RpZmllZD0iMjAyNS0w
NC0xMCAyMTowMTo0NyIscmV2aXNpb249MTVdXWx6NADEBwAAcRcAAPAmcHh1AAMoAAAEAAQPQBAC
DgABoAEgAqAOAA8QAA3wygECAwQFBgcADx_QBQYHCAkPDQ8ODw8PAEEKCw8MDgBQFQ8WDxcSAPIF
Dw8NDxEPEg8TDx0PHg8fAAyQDxQeAIAPGA8lDyYPJxMA8AAZDxoPGw8cDx0PLQ8uDy8TAOAeDA8g
DyEPIg81DzYPNxIAMiMPJDIAYA89Dz4PPxMAwigPKQ8qDysPLDAMkDsAjw8wDzEwDPD-AQDr-ycy
ARAGDyAQASABIAHwAAIQAg4QASAPISABMA9A8MMPKA--8MYP_AoP-w_AD-cPDQHwCQEQBg4wAP--
uh--AQDM8DHoD0AADxYPQDAPPi--Hz4fQj8rfD8tfyYPGm--fyh-Kn8rAS--8Q1j8QgPUCMPMQ8n
DzgPLA8-DzIPKA4PTQ89EwDnDA8ZDxQND2kPVA9DDzUSALAMCg94Yw9QD0APMy8AEBoUAA8OAAgk
8HCNAGBzX0kfSh8EAGBHH0l-QjOZAGBfQB8_PzsKAJR-QHPxCDPxDHOIADEZDxR8AHFbD0gPYg9O
igA5cA9ZigARM2wABAQAA3QABw8ABQwAD5MABJPzsPBwBAAPFgQKABcFCQBhcz8rPD8uNwH7ACNj
fy9-Ln8ec-EJY-EIcyoBAaIAPzoPLiwBBxgEHQEPDQAFA3cAAhcBDioBwFQfPj89Pzl-OzPxDAMA
DLcBDy8BFEQEBwQHdQAECwAIBgAJjADY8xj-KwB-KPMY8QjzGCAADwwABQQ4AA1NAfEWkxw-Lx8t
HyE-Kx8vHxo-LRMfGj8qPDg-Gjg-IT8rk-EGE-EOk0UB8QdDDzUIDyIPVQ9ED14PSw9nD1IPQQ80
7gADBABHDA8ZEwwADwcAFwOMADAPQiNRAfQCH0kzP0oPSQMPRwMPSQM-QnNmAQGPAvQDdAEjUTNB
AwEDAQMxc-EMD3gjcwAABADzAzMPTA88DzAPJg9eAw9nAw9wA2MAGHMmAAN4AQcOAAMLAAmVAQOW
APETGFMfKxM-MjM-NDM-Mh8wEzkzPy8zOzM-MRFTERMxMzEzUQYAozEzMQcEUwYPJxMqARQzIwEh
MwZVAAAbAKYGAgwPGTMGAgwOBQAPmwEGcj8cOB8rHDueARMbnQHQODw4PFgfHjvxEBPxDj8AAAQA
AWsCMEYPOPkCKQYCagJQQw81BgICADIMDhMHAA4EAAIYAA-nAhwmBgLlAj8PIA7lAgMAWABADxQP
EOMCBGgAABAAJgYCfgAFIgAEgQAkOTNuATAZEzlqARAuDgApMTNsAQJAAQLxABQz6gASM1IAFRNc
AQ9mARDQc_8aA_0D7xgDd3PhAwIAIXFzOAMxDyANmAD-AA0KDwgPBg8FDwQPAw8CAxwAMwN8APUN
D06DHyofNBNYUxgTWFMfMhNZUxkTAYMxE1FTEQQAsw9QgwQPMwQLEwQLQgAfUw0ACgRcAP8PQmPk
A4QDHz4UH0LvPgN2AWPhA4ED8QUDcQ9QYwQLqQAHCRsAMgMECwIADzAAEwN8APQQsx8xE1IfKhMc
EhNSHBMfKB8vE14fKBMXHtMRE3ETMQQAEdO7ABEHPgABCwAPEAAQDr8Bhh8D6APvIQN5vwEvCwes
AAQPGgAtA3QA9QNfMlMWE1ZTFhNfNFMSE1JTH1WtAQQEAAQ2AAKeAQ8MAA8DWgA2Mz9CtQFjRQN8
M-EDtQERMy4ATwQLBw6mAAUdDrQBDywADwTRAPQJLxcTHyofLxNYHyoTGRgTWTMfLB8tE1mTrQFj
UTMxE1GTOQAHmwE6Dg0GDgAXMwwAE5NeAOLzIF8tUx9M8yJRUxHzIhwAB-QAmHPuA_4D7yMDcsEB
Pg4NBrkADxgAJwNrAPQMX1MfSe9IA4wDH0WzX0cTf0XxBwOBAxGzURNxzQAPZAAQQgMEC7MPAB0T
YgDgs68rQ6hDry1DPyyzoUMCACsxs1MAH0MQABEFTwCPMEOpQ68yQzJOADGgX1AfT-MMH0wfSuAF
tFMfSXNx8wyxUxFz-QBE8wwECwMBYwQLUwQLczoA9AZzdzM-Jn8qfyx-LfMIcTPxDPMID1BqABEz
CwAUDA8AAwkAFAgIACTzAH8A8wxFE_9DA39FH1MfUR9OH0zvSgN-R1ET4QPxDwOAARQTNQAJfwEW
A1MABAIADyYACQVMA-AFF3M-HPMMPyFzPyQzMXMx8wwxczFIAyAOcysAIPMMBgABCwAOVQSBTAN5
P0kz7z6WAiCxM5YCBnUAHw_cAAM-CwczJAAMBF8AAFEIQC8fLRN1CWYTPy0zPyoSAIAzPypzERNR
E_oGAgYAETHYChgT1goYE9MKAnQJRB8PGTMJAAkWAA8jAAMEiwAI_wtg8yDxAPMgbQAgBw6wCA-R
BwAj8xg5APEAPyE-GBMfH1MfIVMdUx1TCgCFMz8eM3ETEVMCACEzMRIBBHQAEBOkCBBTTwAQUxMA
CwUABZsAEzNjABezdQkUOhQIKTGzBwgUsxYBBgQID-gACx8zCgEF_AYzEh9C8wB5MxQfQ5kUEhRy
MzHzAHHQCyTzADIAAF4DSAwPCjM2CgcYAAUTAA8fAAMBcAAkDwJuAhYICQC8Dw7zLwHzLw948y8b
AAIJADIPEEAJAB8OCABRH3gEAP--Dh--AQDpUP----8x
:: sfx/midi.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTA5IDAwOjI0OjUwIixtb2RpZmllZD0iMjAyNS0w
NC0xMCAyMTowMTo0NyIscmV2aXNpb249MTVdXWx6NADHBwAAxhcAAPAncHh1AAMoAAAEAAQPQBAC
DgABoAEgAqAOAA8QAA3wygECAwQFBgcAD-_QCAkKCw8MDw0PDg8PEADwAA0PEQ8SDxMPFA8VDxYP
FxMA8QEPGA8ZDxoPGw8cDx0PHg8fFADxACAPIQ8iDyMPJA8lDyYPJxQA8QAoDykPKg8rDywPLQ8u
Dy8UAPEAMA8xDzIPMw80DzUPNg83FADwADgPOQ86DzsPPA89Dz4PPxQAfw4PQWAD8P8BAOv-JkYB
EAYPIBABIAEgAfAAAhACDBABIA8hIAEwDvDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYMLwD--6sf
-wEAzPEw6A4ADxYOMA8_L-8fPh9CPyt-Hz8tfyYPGm--fyh-Kn8rAS--8Q1k8QgPUCQPMQ8nDzgP
LA8-DzIPKAwPTQ89EwDoHw8ZDxQND2kPVA9DDzUTAKAMCg94ZA9QDg8zMAAQGhMADw0ABiLwcIsA
YHRfSR9KHwQAYEcfSX9CNJcAUF4fPj87CQCEfnTxCDTxDHSDADEZDxR2AHFbD0gPYg9OhAA6cA9Z
hAB0NA9QDgUOBWwABAsAAAgAHwWBAAAg9LAKAC8NQAgAE6EHDjB0Pys-Hz8uOAH8ACNkfy9-Ln8e
dPEJZPEIdCsBAKgAPzoPLiwBBgiQAA8MAAUDdgABGQEPLAEEgD0-OX87NPEMAwAMtgEPMwETHwUy
AQMGBgAJjADf9Bj-KwB-KPQY8Qj0GMQAFQxKAQ8IAAXwDwcOMJQfHz8vHy0fIT8rHy8fGj8tFB8a
Pyo-Hz8qPwgAoSE-K5TxBhTxDpRdAQBZAfIDKg8iD1UPRA9eD0sPZw9SD0EPCQEEBABIHw8ZFA0A
DwgAHQOZADAPQiR0AfoCH0k0P0oPSQQPRwQPSQQ-QnS1AvUCASRRNEEEAQQBBDF08QwPeCR6APQG
MQ8nNA9MDzwPMA8mD14ED2cED3AEZAAYdCcABJwBCA8ABAwACbsBA5oA8RQfKlQfKxQ-MjQ-NDQ-
Mh8wFDg0Py80OTQ-MRFUERQxNDE0UQYApDE0MQUOVAsPJxQ4ARQ0MQEiNAtYAAAdACALAwoAHzQH
AAEOtAEPCAAHwgcOMD8cPyofKx8fOdABGhnPAbIfXyofHjnxEBTxDl4AAgYAAb0CMEYPOEkDKQsD
vAJyQw81CwMLAygAFBQJAA8GAAcEIgAPRwMcLwsDRQMQJgsDiAEWNGsAWg8UDQsDhgANsAE0NDg0
rQEwGBQ4qQEQLg4AKTE0qwEDcwESNAgBFDQBARQ0VwAPqAE2Iw8HCAXUBwYwD070LwH0LwX0LxEA
GEIRAAw8AA8IAAUAKgXA7xoE4gTvGAR8dOEEAgAhcXQVBDAPIAINAf8BDQ8KDwgPBg8FDwQPAw8C
BBwAMgN7APUNXzI0HyofNBRaVBoUWlQfMhRYVBgUUTQxFFFUEQQABjkAkzQODzMOCRQOCRAAH1QN
AAoDZADyDDQ-Qu4EjgQfPh4fQu8_BHs08QMEgQTxBQRxNC8ALw4JtAAHCRsAMgQOCQIADzAAEgTj
APUVLx8oNB8xFFMfKhQWExRTFhQfKB8vFFUfKBQcFRRxNBEUcRQxBAAxDgkMQABXDgk0DgkOAD8U
DgkQABADcwAPLAcLAfIBhh8E6gTvIQR48gEvCQzUAAQPGgAsA3MA8QZfUx9JNB8yFFtUGxRfNFQT
FFNUH1X-AAnrAQ--AAIfVAwACATSAAbjAVNFBHZ04eIBD9cAFQXaAQ-RABcxlB8qxwHyACoUGhUU
WjQfLB8tFFr0BMcBAcMCEfRWAA2lAQQQABk0DgATlFcA_gBfUB9P9BhfLVQfTBRx9BgVASz0GPsA
DN0BBAgAAeUBiCAE6ATvIwR75QEfCN8AAg8ZACkDbwDwAFYU70gEgwQWtF9HFHZRFIIBUxG0URRx
KQARFAgAHwVJAAQUBYYBErQPAAYuAAXFA-ACFzSvK0SqRK8tRD8sNDE0oUQCACAxNCkAGzRcAB9E
EAARA1kAs7SvMESrRK8yRDO0UwAftD4AEQ9OAARg9BQfTB9KuQagVB9J9ByxVBH0HOcBAjMAbw4J
VA4JdK8BAQbiBfIIPzB0fDQ-Jn8qfyx-LfQIcTTxDPQID1BBAHMNNAYOCQwGDQAMCAAl9ABDAP8M
70MEf0UfUx9RH04fTO9KBH9HdOEE8Q8EcXQGiAECFgRMAAQCAA8nAAoEaQDwBz8hPxh0Pxz0DD8h
dD8kcXQx9AwxdDEmAAT-CAFxABH0tAABCwAEOgAD8AASCusHsO9MBHs-STTvPgRznwVVsTThBHEk
CxIG9QIPjQACIw8gAQEfNLIADTV49LAEAAFUDEAPOjB0jQlALx8tFMIKZhQ-LTQ-KhIAgDQ-KnQR
FFEU5wcCBgBoMXQKDzIUNwwYFDQMFBT0ABg0DAoFFgAPIwADBowACGIN7-Qg8QD0IAoPMgwIDxkF
1QgBJfQYOgDRDw6EHx9UHyFUElQSVAoAhTQ-HjQBhBFUAgBgNDE0D3iErAkQVEUAEFR_AAsFAAWS
ABU0WQAXtKkKFDcJCSkxtPwIFLQPAQb3CA-xAAsfNAMBB_X0CH9CNB4fQ59CHhMec-0CAycAfAUN
DwwPCjRgCwIXAAUSAA8eAAIF_QEPBAD-0h--AQDpUP----8x
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTA5IDAwOjI0OjM1Iixtb2RpZmllZD0iMjAyNS0w
Ny0wMyAyMjo0MzowNSIsc3RvcmVkPSIyMDI0LTA0LTA5IDAwOjI0OjM1Il1d
:: debug_funcs.lua
--[[pod_format="raw",created="2024-04-08 13:32:14",modified="2025-04-10 21:01:46",revision=330]]
function pp_tbl(tbl,brkline)
 local str = "{ "
 if (brkline) str=str.."\n"
 for k,v in pairs(tbl) do
  if (type(v)=="table") v=pp_tbl(v,false)
  str=str..tostring(k).." = "..tostring(v)..", "
  if (brkline) str=str.."\n"
 end
 return str.."}"
end

function printy(...)
	res=""
	for arg in all({...}) do 
		res..=tostr(arg)
		for i=1,5-#tostring(arg) do res..=" " end
	end
	print(res)
end

function hex(v) 
  local s,l,r=tostr(v,true),3,11
  while(ord(s,l)==48) l+=1
  while(ord(s,r)==48) r-=1
  res = sub(s,l<r and l or 6,r>7 and r or 6)
  return #res>0 and res or "00"
end

function printySections(sections)
	for i=1,#sections do
		local t1 = sections[i].startTrackerPosition
		local t2 = sections[i].endTrackerPosition
		for j=1,8 do
			if (#sections[i][j]>0) printy("section "..i..", channel "..j," "..t1.."-"..t2,":\n",pp_tbl(sections[i][j],true))
		end
	end
end

--[[
hexmap = ""
for i=0,327 do hexmap..=hex(@(0x050000 + i)).." " end

--local res = LuaMidi.get_MIDI_tracks("/desktop/projects/1stargazing.mid")
--print(#res[1].events)
--evmap=""
--for i=1,#res[2].events do evmap..=pp_tbl(res[1].events[i]).."\n" end
--store("events_midi.txt",evmap)
--store("/desktop/projects/full_midi.txt",pp_tbl(res[1].events,true))

--[[
local res2 = LuaMidi.get_MIDI_tracks("/desktop/projects/midis/test1.mid")
print(#res2)
evmap=""
for i=1,#res2[1].events do evmap..=pp_tbl(res2[1].events[i]).."\n" end
print(evmap)
]]--

--printy("sfx 0 data:\n", meta[0]:get())
--printy("sfx 3 data:\n", meta[3]:get())
--printy("sfx 32 data:\n", meta[32]:get())
--local sfx0 = userdata("u8",328) for i=0,327 do sfx0[i] = peek(0x50000+i) end
--printy("sfx 0 memory:\n", sfx0:get())
--printy("sfx 1:\n", meta[1]:get())

--printy(tracks:get())
--?hexmap
--[[
print(pp_tbl(tracks[1], true))
print(pp_tbl(tracks[2], true))
print(pp_tbl(tracks[3], true))
print(pp_tbl(tracks[4], true))]]--
:: helper.lua
--[[pod_format="raw",created="2024-04-08 13:29:39",modified="2025-04-10 21:01:46",revision=284]]
function qsort(tbl, cmp, i, j)
 local t = tbl
 i = i or 1
 j = j or #t
 if i < j then
  local p = i
  for k = i, j - 1 do
   if cmp(t[k], t[j]) then
    t[p], t[k] = t[k], t[p]
    p = p + 1
   end
  end
  t[p], t[j] = t[j], t[p]
  t=qsort(t, cmp, i, p - 1)
  t=qsort(t, cmp, p + 1, j)  
 end
 return t
end

function tableFilter(tbl, filter)
	resTbl = {}
	for item in all(tbl) do if (filter(item)) add(resTbl, item) end
	return resTbl
end

function round(n) return ((n-flr(n))>0.5) and ceil(n) or flr(n) end

function bpmToSpd(bpm,depth) return 7229.5 \ (bpm*depth) end

function insideSquare(px,py,cx1,cy1,cx2,cy2)
	return (cx1 < px and px < cx2 and cy1 < py and py < cy2)
end
--lib

-- pq-debugging, by pancelor

-- quotes all args and prints to host console
-- usage:
--   pq("handles nils", many_vars, {tables=1, work=11, too=111})
function pq(...)
  printh(qq(...))
  return ...
end

-- quotes all arguments into a string
-- usage:
--   ?qq("p.x=",x,"p.y=",y)
function qq(...)
  local args=pack(...)
  local s=""
  for i=1,args.n do
    s..=quote(args[i]).." "
  end
  return s
end

-- quote a single thing
-- like tostr() but for tables
-- don't call this directly; call pq or qq instead
function quote(t, depth)
  depth=depth or 4 --avoid inf loop
  if type(t)~="table" or depth<=0 then return tostr(t) end

  local s="{"
  for k,v in pairs(t) do
    s..=tostr(k).."="..quote(v,depth-1)..","
  end
  return s.."}"
end

-- like sprintf (from c)
-- usage:
--   ?qf("%/% is %%",3,8,3/8*100,"%")
function qf(fmt,...)
  local parts,args=split(fmt,"%"),pack(...)
  local str=deli(parts,1)
  for ix,pt in ipairs(parts) do
    str..=quote(args[ix])..pt
  end
  if args.n~=#parts then
    -- uh oh! mismatched arg count
    str..="(extraqf:"..(args.n-#parts)..")"
  end
  return str
end
function pqf(...) printh(qf(...)) end
:: label.qoi
b64$cW9pZgAAAeAAAAEOBAH-_PDo-P39-f39-f39-f39-f39-eH__ABIxAT9-f39-f3ANMAEwDTA
BMc0wQTANMEEyzTBBMg0xATG-iio_MYEyTQENATNNMUE-f39-f38NMAEwjTABMY0wQTANMEExjTC
BDTBBMg0BMI0BMYcxgTKNATSNAQ0BP39-f39-DTABMI0wATGNMEEwDTBBMY0wgQ0wQTINATCNATG
HMYExjTHBMo0wQQ0wQT9-f39-fw0wATCNMAExjTGBMY0wgTMNATCNATGHMYExjTABMM0wATKNAQ0
BP39-f39-cI0wATCNMAExjQENMIENATGNMUEyTQEwDTBBNY0wATDNMAEyjTFBP39-f39-DTABMI0
wATGNAQ0wgQ0BMY0xQTHNMEEwDTBBMYcxgTGNMAEwzTABMs0xAT9-f39-f00wATANMAExzTGBMY0
xQTHNMEEyxzABMIcwATGNMcE-f39-f39-f39-f39-f39-cT_wMDA-nAoKMD_oIh4-qhQMP5YUEjM
LP74gGjABP6giHgU0v5YUEjPBP5IKDj_GChQ0zzCBCz__IBo6ATALBTG-vjIqP3pFAQsFP3GLATA
LBTlBP6giHg83gQsFMssJP748OjKJCz_wMDAwCTCLMMkwCz_cCgo-viAaMP__PDowP4AAAD9-f39
-dr__IBoxyz_cCgowCzAFOUsBBQ83wQsFMsE-vjw6MskLMYkwP7AwMAEwST__IBoxAT_AAAA-viA
aP39-f392v4AAAD__IBowyz_cCgowSwU5iwELBQ84AQsFMosJP748OjLJCzCJMD_wMDABMQk-viA
aMX_AAAA-viAaP39-f393P4AAAD__IBoLP5wKCjA-lhQSMAsFOYswAT_oIh4POIswBTKBP748OjM
LMEk-sDAwATGJP74gGjG-gAAAP74gGj9-cX_cCgoFMkEFMMEFOIEFMoEFNIEFMMEFMAEFP3u-gAA
AAT_WFBI-qCIeP7AwMDABP74gGjlJCwEJDzk-lhQSCwUyQT_oIh4-vjw6Mv_wMDAJBQEyCQs-viA
aMb_AAAA-viAaMT_GChQxf74gGj98P5wKCgUwwQUyQQUwwQUzQQU3wQUyAQUzQQU-er_GChQwf74
gGjC-gAAAP7AwMD__PDowf5YUEj__IBo5P6giHj_cCgowCwUPOUELBTILP5YUEj__PDozP7AwMAE
yRT__IBoyP4AAAD__IBo-f3_cCgoFMEEwRTABMAUwQTBFAQUwAQUBMIUwATAFMAEwRTCBBTABMEU
wAQUBMAUwATAFMIEwBTABMAUwQTBFATCFMAEwRTBBBTABMAUBBTABMAUwQTBFATAFMEEwRT94P4Y
KFD__IBowf4YKFD__IBowf4AAAD__PDowf6giHgs-viAaOP_cCgowCwUPOcELBTI-lhQSP7AwMDA
-vjw6Nb_oIh4-viAaMn_AAAA-viAaMT_GChQxf74gGj97-5wKCgUwQQUwAQUBBTABBQEFMIEFAQU
wQQUwQQUwAQUBBTABBTABBTBBBTABBQEwBTBBBTABBTCBBQEFMAEFAQUwwQUwQQUwwQUwQQUBBQE
FMAEFMAEFMAEFMAEFMAEFP3j-hgoUP74gGjB-hgoUP74gGjB-gAAAP748OjA-sDAwP5wKCj__IBo
4iwEwCQ86QQsFMUsBMAswf5YUEj_wMDA-vjw6NP_oIh4wP74gGjJ-gAAAP74gGj9-P5wKCgUwQQU
wAQUBMIUwATAFMAEwBTCBBTBBBTABBQEFMAEFMAEFMEEFMAEFAQUwgQUwAQUwgQUBMIUBBTDBBTC
BMAUwQQUwQQUBBQEFMAEFMAEFMAEFMAEFMEEwBT94f4YKFD__IBowf4YKFD__IBowf4AAAAkwP5Y
UEgs-viAaOEEwCQ86hQELBTBLMAEwCz_oIh4PMIUJP748OjSJCwUyv4AAAD__IBoxP4YKFDF-viA
aP3u-nAoKBTCBBTABBQEFMUEFAQUBBTBBBTBBBTABBQEwRTABBTCBMEUwAQUwgQUwAQUwgQUBBTC
BBTDBBTEBBQEFMIEFMEEFMAEFMAEFMAEFMAEFMMEFP3h-hgoUMH__IBowv4AAAA8wCQE-viAaN8s
BMAkPOskBCQUwCwEwCQUPMX_WFBI-vjw6NEkLBTL-gAAAP74gGj9_-5wKCgUwwTBFMAEwRQEwRTA
BBTABBTBBMAUwATAFMAEFMIEFMIEFMIEFMMEwBTABBTABBTABMEUwATBFMEEwBQEwRTABBTCBBTB
BBQEwRTABMEUBMEUBMEU-en_AAAAPMD__IBoBBTeLATAFDzsLAQULATALDzE-nggUMT__PDozyQs
FMz_AAAA-viAaP394P5wKCgUxwQUzQTAFP393P4AAAD__IBowP6giHgEFN0sBMAUPO0EwCwELBQ8
xAw0wf74oADBDP748OjN-lhQSCwUzf4AAAD__IBo-f39-f3c-gAAAP74gGjA-nAoKCwU3CwELDzu
FATAJP6giHg8DMU0wRzCDP748OjM-lhQSCwUzv4AAAD9-f39-d7__IBo-qCIeP5wKCgsFNssBMAU
PO4kBCw8wAwczAz__PDoy-5YUEgsFM-_AAAA-sDAwP39-f393P4AAAD__IBo-nAoKMAU2ywEJDzw
BP6giHg8wQwczAz__PDoyv5YUEgsFND_AAAA-sDAwP39-f393P4AAAD_oIh4-nAoKCz__IBo2iwE
wBQ88BQ8wgwczAz__PDoyP7AwMD_WFBILP74gGjR-gAAAP7AwMDg-hgoUP39-f3Q-sDAwOb_AAAA
-nAoKMD__IBo2iwEwDz3DBzMDP748OjA-sDAwP6giHgExP5YUEgs-viAaNL_AAAA-sDAwOD_GChQ
-f39-dD_wMDA5v4AAAD_cCgoLP74gGjZ-qCIeATAPPgMHMwM-vjw6CT_cCgowCT__PDowv5YUEgs
FNP_AAAA-sDAwMT_gHCYwRQswRTT-hgoUP39-f3Q-sDAwMcsxhTV-gAAAP6oUDD__IBo2v6giHj_
cCgoFDz4DBzMDP5YUEjALAT_oIh4-vjw6MD_wMDA-lhQSCz__IBo1P4AAAD_wMDAxP6AcJjBFCzB
FMcswBTI-hgoUMr_wMDA-hgoUMn_wMDA-hgoUMP_wMDA-hgoUOL_wMDA-hgoUMr_wMDA-hgoUNL_
wMDA-hgoUMP_wMDA-hgoUMD_wMDA-hgoUMr_wMDA-hgoUNf_wMDA-hgoUMz_wMDA-hgoUMP_wMDA
-hgoUP3f-sDAwMcsFMQsFMsswBTG-gAAAP6oUDDA-viAaNkswDz5DBzMDCw8wCz_wMDABMAkLP74
gGjV-gAAAP7AwMDE-oBwmMEULMEUxizCFMf_GChQxP7AwMD_GChQw-7AwMD_GChQyf7AwMD_GChQ
w-7AwMD_GChQzf7AwMD_GChQ3-7AwMD_GChQyP7AwMD_GChQzf7AwMD_GChQyv7AwMD_GChQwP7A
wMD_GChQ1-7AwMD_GChQ0v7AwMD_GChQ-d-_wMDAxywUxCwUyizAFMf_AAAA-nAoKMH_qFAw-viA
aNf_oIh4PPoMHMwMPMEs-sDAwP748Oj_WFBI-qCIeP74gGjW-gAAAP7AwMDS-oBwmMQUxv4YKFDE
-sDAwP4YKFDB-sDAwMH_GChQwP7AwMDA-hgoUMH_wMDAwf4YKFD_wMDA-hgoUMD_wMDA-hgoUP7A
wMDC-hgoUMD_wMDAwP4YKFDA-sDAwMH_GChQwv7AwMD_GChQwP7AwMDB-hgoUMD_wMDA-hgoUP7A
wMDA-hgoUMD_wMDAwP4YKFDC-sDAwMD_GChQwP7AwMDA-hgoUMH_wMDAwf4YKFD_wMDAwv4YKFDA
-sDAwMH_GChQwf7AwMD_GChQwP7AwMDA-hgoUP7AwMD_GChQwP7AwMDA-hgoUMH_wMDAwf4YKFD_
wMDAwP4YKFDB-sDAwMH_GChQwf7AwMD_GChQwP7AwMDB-hgoUMH_wMDAwP4YKFDA-sDAwP4YKFD_
wMDAwP4YKFD_wMDAwf4YKFDB-sDAwMD_GChQwP7AwMDC-hgoUMP_wMDAwP4YKFD_wMDA-hgoUMD_
wMDAwP4YKFDB-sDAwMH_GChQ-d-_wMDAxywUxCwUySzAFMj_AAAA-viAaP6oUDD_cCgowRTVPPwM
HMwMPMH_WFBI-qCIeP5YUEgsFNf_AAAA-sDAwMT_gHCYwRQswRTHLMAUyP4YKFDD-sDAwP4YKFDB
-sDAwP4YKFDA-sDAwP4YKFD_wMDA-hgoUMD_wMDA-hgoUP7AwMD_GChQwv7AwMD_GChQ-sDAwP4Y
KFDB-sDAwP4YKFDB-sDAwP4YKFDA-sDAwP4YKFD_wMDA-hgoUMD_wMDA-hgoUMD_wMDA-hgoUMH_
wMDA-hgoUMD_wMDA-hgoUP7AwMDA-hgoUMH_wMDA-hgoUMD_wMDA-hgoUML_wMDA-hgoUP7AwMD_
GChQwP7AwMD_GChQ-sDAwP4YKFDD-sDAwP4YKFDB-sDAwP4YKFDD-sDAwP4YKFDB-sDAwP4YKFD_
wMDA-hgoUP7AwMD_GChQwP7AwMD_GChQwP7AwMD_GChQwP7AwMD_GChQwP7AwMD_GChQwP7AwMD_
GChQw-7AwMD_GChQwf7AwMD_GChQwP7AwMD_GChQ-sDAwP4YKFDA-sDAwP4YKFD_wMDAwP4YKFDB
-sDAwP4YKFDA-sDAwP4YKFD_wMDA-hgoUMD_wMDA-hgoUMD_wMDA-hgoUMX_wMDA-hgoUP7AwMD_
GChQ-sDAwP4YKFDA-sDAwP4YKFDA-sDAwP4YKFDA-sDAwP4YKFD93-7AwMDHLMYUyCzAFMn_AAAA
-viAaMD_oIh4BMD_qFAwFNI8-cAMHMwMPMEsBCQ8whTU-gAAAP7AwMDE-oBwmMEULMEUxyzAFMj_
GChQw-7AwMD_GChQwf7AwMD_GChQwP7AwMD_GChQ-sDAwML_GChQwP7AwMDA-hgoUMD_wMDAwP4Y
KFDC-sDAwP4YKFDB-sDAwP4YKFDA-sDAwP4YKFD_wMDA-hgoUMD_wMDA-hgoUMD_wMDA-hgoUMH_
wMDA-hgoUMD_wMDA-hgoUP7AwMD_GChQwv7AwMD_GChQwP7AwMD_GChQwv7AwMD_GChQ-sDAwML_
GChQ-sDAwP4YKFDD-sDAwP4YKFDC-sDAwMD_GChQwf7AwMD_GChQwf7AwMD_GChQ-sDAwP4YKFD_
wMDA-hgoUMD_wMDA-hgoUMD_wMDA-hgoUMD_wMDA-hgoUMD_wMDA-hgoUMH_wMDAwP4YKFDB-sDA
wP4YKFDB-sDAwP4YKFDA-sDAwP4YKFD_wMDA-hgoUMD_wMDA-hgoUP7AwMD_GChQwv7AwMD_GChQ
wP7AwMD_GChQ-sDAwML_GChQwP7AwMD_GChQxf7AwMD_GChQ-sDAwP4YKFD_wMDA-hgoUMD_wMDA
-hgoUMD_wMDA-hgoUMD_wMDA-hgoUP3f-sDAwMcsFMMswBTHLMAUyv4AAAD__IBowSQEwP6oUDAU
zzz9wgwczAw8yhTS-gAAAP7AwMDE-oBwmMEULMEUxyzCFMb_GChQwv7AwMD_GChQwv7AwMD_GChQ
wP7AwMD_GChQ-sDAwP4YKFDF-sDAwP4YKFD_wMDA-hgoUP7AwMD_GChQwf7AwMD_GChQwf7AwMD_
GChQwP7AwMD_GChQ-sDAwMH_GChQwP7AwMD_GChQwv7AwMDB-hgoUMD_wMDA-hgoUML_wMDA-hgo
UMD_wMDA-hgoUML_wMDA-hgoUP7AwMD_GChQwv7AwMD_GChQw-7AwMD_GChQxP7AwMD_GChQ-sDA
wP4YKFDC-sDAwP4YKFDB-sDAwP4YKFDA-sDAwP4YKFDA-sDAwP4YKFDA-sDAwP4YKFDA-sDAwP4Y
KFDD-sDAwP4YKFD_wMDA-hgoUML_wMDA-hgoUMD_wMDA-hgoUP7AwMD_GChQwP7AwMD_GChQ-sDA
wP4YKFDC-sDAwP4YKFDA-sDAwP4YKFD_wMDA-hgoUMP_wMDA-hgoUMX_wMDA-hgoUMH_wMDA-hgo
UMD_wMDA-hgoUMD_wMDA-hgoUMD_wMDA-hgoUP3f-sDAwMcsxRTHLMAUy-4AAAD__IBowgTBFM08
-cUMzDzNFND_AAAA-sDAwOD_GChQwv7AwMD_GChQw-7AwMDB-hgoUMD_wMDAwf4YKFD_wMDAwf4Y
KFDA-sDAwP4YKFDA-sDAwP4YKFDB-sDAwMD_GChQwP7AwMDA-hgoUMD_wMDA-hgoUML_wMDA-hgo
UML_wMDA-hgoUML_wMDA-hgoUMP_wMDAwP4YKFDA-sDAwP4YKFDA-sDAwP4YKFDA-sDAwMH_GChQ
wP7AwMDB-hgoUMH_wMDAwP4YKFD_wMDAwf4YKFDA-sDAwP4YKFDC-sDAwP4YKFDB-sDAwP4YKFD_
wMDAwf4YKFDA-sDAwMH_GChQ-sDAwMH_GChQ-sDAwMH_GChQwP7AwMD_GChQwv7AwMD_GChQwP7A
wMD_GChQwP7AwMDA-hgoUMD_wMDA-hgoUML_wMDA-hgoUMD_wMDA-hgoUMD_wMDAwf4YKFDB-sDA
wMD_GChQwP7AwMD_GChQwP7AwMD_GChQwf7AwMD_GChQ-sDAwMH_GChQwP7AwMDB-hgoUP3f-sDA
wOb_AAAA-viAaMMEwBTK-qhQMMAUPP3jFM-_AAAA-sDAwOD_GChQ5f7AwMD_GChQx-7AwMD_GChQ
zf7AwMDA-hgoUP39-cv_wMDA5v4AAAD__IBowywELBTHLMAkPP3mFM7_AAAA-sDAwOD_GChQ-f39
-dD_wMDA5v4AAAD__IBoxAQsFMYs-lhQSBQ8-egUzf4AAAD_wMDA-f39-f3c-gAAAP74gGjELAQU
xCwE-qCIeDz96xTM-gAAAP7AwMD9-f39-dz_AAAA-viAaMUEFMIswP5YUEgUPP3A-vjw6OE8yBTL
-gAAAATZDATKDAT0DATKDAT0DATKDAT0DATKDAT0DATKDATR-oBwmMYU-viAaMX_oIh4-qhQMBTA
LP5wKCjAPP3B-vjw6OM8yBTK-gAAAATZDATCNMMEwQwE9AwEygwE9AwEygwE9AwEwjTDBMEMBPQM
BMoMBNH_gHCYxhT__IBoxv6oUDAULP5wKCjAFDz9wf748OjjPMkUyf4AAAAE2QwEwjQEwTQEwQwE
9AwEwDTABDTABMMMBPQMBMAcwQTFDAT0DATCNATBNATBDAT0DATAHMEExQwE0f6AcJjGFP74gGjG
-qhQMP5YUEj_cCgowDz9w-748OjjPMkUyf4AAAAE2QwEwjQEwTQEwQwE9AwEygwE9AwEygwE9AwE
wjQEwTQEwQwE9AwEygwE0f6AcJjGFP74gGjH-qhQMP5wKCgUPP3D-vjw6OM8yhTI-gAAAATZDATC
NATBNATBDAT0DATANMEENMAEwgwE9AwEwBzDBMMMBPQMBMI0BME0BMEMBPQMBMAcwwTDDATR-oBw
mMYU-viAaMj_qFAw-qCIeDz9wwTjPMsUx-4AAAAE2QwEwjQENMEEwQwE9AwEygwE9AwEygwE9AwE
wjQENMEEwQwE9AwEygwE0f6AcJjGFP74gGjJJMA8-cIExSzBBMAswATALMAELATBLMAEwSzBBMQ8
yxTH-gAAAATZDATANMEENMEEwQwE9AwEwDTABDTBBMIMBPQMBMAcwwTDDAT0DATANMEENMEEwQwE
9AwEwBzDBMMMBNEsxhT__IBoyiT_qFAwPP3BBMT_gHCYBMAsBMIsBCwELAQsBCwEwCwELATHPMwU
xv4AAAAE2QwEwDTBBMUMBPQMBMoMBPQMBMoMBPQMBMA0wQTFDAT0DATKDATRLMYU-viAaMv_qFAw
wDz9wATE-oBwmATALATALMEELAQsBCwELMIEwCzABMU8zRTF-gAAAATZDATKDAT0DATKDAT0DATK
DAT0DATKDAT0DATKDATRLMYU-viAaMr_qFAw-nAoKCQ8-cD__PDoxf6AcJjBBCwEwCwELATBLAQs
BMUsBMQ8zRTF-gAAAATZDATKDAT0DATKDAT0DATKDAT0DATKDAT0DATKDATRLMYU-viAaMYk-qhQ
MP5wKCj_WFBILBQ8-cH__PDox-6AcJgEwCzBBCwEwSwEwCzBBCzBBMU8zhTE-gAAAATZDMwE9AzM
BPQMzAT0DMwE9AzMBNEsxhT_qFAwwf6giHgswP5wKCjA-lhQSCz__IBoPP3E-vjw6MX_gHCYwATa
PM4UxP4AAAAE-f3NFP39-fI86QTjPM-__IBow-4AAAAE-f3MFDz9-f3yFDzoBOM80P74gGjC-gAA
AAT9-csUPP39-fQUPOgE4TzT-viAaMD_AAAABP39yxQ8-eUMPMgMPMUMPMYMPP3uFDz95BQE-f3L
FDzE-hBQWMX__Mio-eMMPM4MPP3n-hBQWMH__MiowhQ8-eQUBP39yxQ8-dkMwDwMPMUMwDzGDME8
xAzAPMUMwjzEDDwMwDzFDMA8xQzBPMz_GChQPBQ89P4QUFj__Miowf4QUFj__Miowf4AAAA8-eQU
BMwsBNwswAThLATWLATHLATRFDzE-hBQWMX__Mio-cwMPAw8DDzFDDzFDDzADDzFDDzGDDzGDMA8
xgw8wAw8xAw8wAw8yv4YKFAEFAQUwDzy-hBQWP74yKjB-hBQWP74yKjB-gAAADz94-6giHgUBMws
BNssBOMsBNYsBMcsBNEUPP3ZDDwMPAw8xQw8xQw8wAw8xQw8xgw8xgw8xww8wAw8xAw8wAw8yv4Y
KFAEFAQUBBQ88f4QUFj__Miowf4QUFj__Miowf4AAAA8-eP_cCgoFP748OjMLMEEwSzABMAswQTB
LMAExSzBBMAsBMEsBMAsBNwswQTBLMAEwCzBBMEswATELMIELATALAQswgTPFDzE-hBQWMX__Mio
-cwMPMEMPMUMPMUMPMAMPMUMPMYMPMYMPMcMPMAMPMQMPMAMPMr_GChQBBQEFAQUPPL_EFBYwf74
yKjC-gAAADz94v74gGgk-gAAAATMLATALAQsBMAsBCwEwCwELATALATDLATCLMIELATALATcLATA
LAQsBMAsBCwEwCwELATALATELATBLATALATALATRFDz92Qw8wQw8xAzBPMUMwTzEDME8xgzAPMQM
PMgMwDzFDDzADDzJ-hgoUMAEwxQ8_f4AAAA8-eQUBMwsBMAsBCwEwCwELATALAQswgTELMAEwSwE
wizABN0sBMAsBCwEwCwELATALAQswgTELATCLMAEwSwE0RQ8-f3u-hgoUAQUBMMUPPn_AAAAPP3k
FATMLATALAQsBMAsBCzBBMAsBMksBMAsBMEsBMAsBNwsBMAsBCwEwCwELMEEwCwExywEwSwEwCwE
wCwE0RQ8-f3v-hgoUATEFDz5-gAAADz95BQEzCwEwCwEwCzABMAsBMMswQTALATALMEEwSwEwSwE
wCwE3CwEwCwEwCzABMAsBMMswQTALATCLMAELATALATBLMAEzxT9-fH_GChQBMIU-gAAAPs8-eQU
BNYsBP3DLATqFP5IKDj9-fH_GChQwjz7-gAAAP74yKj95BQE-f3LFP5IKDj9-f30FP74yKj95BQE
-f3LFP5IKDj9-f30FP74yKj95BQE-f3LFP5IKDj9-f30FP74yKj95BQE-f3LFP5IKDj9-f30FP74
yKj95BQE-f3LFP5IKDj9-f30FP74yKj95BQE-f3LFP5IKDj9-f30FP74yKj95BQE-f3LFP5IKDj9
-f30FP74yKj95BQE-f3LFP5IKDjG-sAASMD_YNjwDMY8wAzQPAzQPAzAPAzFPAzzPMEMwjwMwTzB
DMU8DNA8DP3F-kgoOMUU-vjIqPv_eCBQxDzfFAT9-csU-kgoOMb_wABI-mDY8MAMxTwMwDwMzzwM
0DzADDwMxTwM8zwMwzzADMM8DMU8DNA8DP3F-kgoOMUU-vjIqPr_eCBQNMEcwQw83hQE-f3LFP5I
KDjG-sAASMD_YNjwDMU8DMA8DDwMwDwMwDzADMA8DDzADDzCDMA8wAzAPAw8wAzEPAw8wAzAPMAM
wDzCDMA8wAztPAzCPAw8DMM8DMQ8wgw8DDzADMA8wAzBPMEMPAzAPAzAPMAMwDwMPMAMxDwMPMAM
wDzADMA8DME8DMA8wQzc-kgoOMUU-vjIqPP_eCBQxTTBHMIMPN4UBP39yxT_SCg4xv7AAEjA-mDY
8AzFPAzAPAw8DMA8DMI8DDzADMI8DME8DMA8DDzADMY8DMA8DDwMwDwMwDwMwTwMwDwM4jzCDMQ8
DMI8DDwMwzwMxTwMwTzADMQ8DDwMwjwMPAzAPAzAPAw8wAzGPMAMwTwMwDwMPAzBPAw8DN-_SCg4
xRT__Mio8v54IFAczAw83hQE-f3LFP5IKDjG-sAASMD_YNjwDMU8DMA8DDwMwDwMwDzBDDwMwzwM
wTzCDDwMxzwMwDwMPAzAPAzAPAzBPMIM7DwMwjzCDMI8DMU8DME8DMM8wQw8DMI8wAzBPMIMPAzH
PAzCPAzAPAw8DDwMPAzAPMAM3f5IKDjFFP74yKjy-nggUBzMDDzeFAT9-csU-kgoOMb_wABIwP5g
2PAMxTzADDwMPAzAPAw8DMA8DDwMwzwMwTwMwjwMxzwMwDwMPAzAPAzAPAzBPAzlPMIMxDwMxDwM
wzwMxTwMwTwMwjwMwDwMPAzCPAw8DMA8DMI8DMc8DMI8DMA8DDwMPAw8DMI8DNz_SCg4xRT__Mio
8v54IFAczAw83hQE-f3LFP5IKDjG-sAASP5g2PDBDMU8wAzBPMEMwDzBDDwMxDzADMA8wQw8DMc8
DMA8DMA8wAzCPMAMwDzBDOw8DMQ8DMM8DMY8wAw8DMM8wQzAPMEMPAzAPAzAPMEMPAzHPAzDPMAM
wTwMPAzAPMEM3f5IKDjFFP74yKjy-nggUBzMDDzeFAT9-csU-kgoOMb_wABIyv5g2PDADP3lPMEM
xjzBDP3g-kgoOMUU-vjIqPL_eCBQHMwMPN4UBP39yxT_SCg4xv7AAEj9-f3lPMUU-vjIqPL_eCBQ
HMwMPN4UBNkMyAT4DMgE3hT_SCg4-f399BT__Mio8gwczAw83hQE2QwExhwMBPcMBMYcDATdFP5I
KDj9-f30FP74yKjyDBzMDDzeFATZDATGHMAMBPYMBMYcwAwE3BT_SCg4-f399BT__Mio8gwczAw8
3hQE2QwExhzBDAT1DATGHMEMBNsU-kgoOMb_YNjw-kgoOMD_YNjw-kgoOMX_YNjw-kgoOMv_YNjw
wf5IKDjZ-mDY8MH_SCg4xv5g2PD_SCg47v5g2PDB-kgoOMH_YNjwwP5IKDjF-mDY8MD_SCg4wf5g
2PDB-kgoOP3eFP74yKjyDBzMDDzeFATZDATGHMIMBPQMBMYcwgwE2hT_SCg4xv5g2PDA-kgoOP5g
2PD_SCg4xf5g2PD_SCg4y-5g2PD_SCg4wP5g2PD_SCg42P5g2PD_SCg4wP5g2PD_SCg4xf5g2PD_
SCg47v5g2PD_SCg4wv5g2PD_SCg4wP5g2PD_SCg4w-5g2PD_SCg4wP5g2PD_SCg4wv5g2PD_SCg4
-d4U-vjIqPIMHMwMPN4UBNkMBMoMBPQMBMoMBNoU-kgoOMb_YNjw-kgoOP5g2PDA-kgoOMD_YNjw
wP5IKDjA-mDY8ML_SCg4wP5g2PDA-kgoOMX_YNjw-kgoOMD_YNjw-kgoOMD_YNjwwP5IKDjB-mDY
8MH_SCg4wP5g2PDA-kgoOMD_YNjw-kgoOMD_YNjw-kgoOMT_YNjw-kgoOMD_YNjw-kgoOMD_YNjw
wP5IKDjA-mDY8ML_SCg4wP5g2PDA-kgoOOj_YNjw-kgoOML_YNjw-kgoOP5g2PDA-kgoOMP_YNjw
-kgoOMD_YNjw-kgoOML_YNjw-kgoOP3eFP74yKjzDMw83xQE2QwEwjTDBMEMBPQMBMoMBNoU-kgo
OMb_YNjw-kgoOMD_YNjw-kgoOP5g2PD_SCg4wP5g2PD_SCg4wP5g2PD_SCg4wf5g2PD_SCg4wP5g
2PD_SCg4xP5g2PD_SCg4wP5g2PD_SCg4-mDY8P5IKDjA-mDY8P5IKDj_YNjw-kgoOMX_YNjw-kgo
OP5g2PD_SCg4wP5g2PD_SCg4xP5g2PDB-kgoOMP_YNjw-kgoOMD_YNjw-kgoOMH_YNjw-kgoOMD_
YNjw-kgoON3_YNjwwv5IKDjE-mDY8P5IKDjC-mDY8MD_SCg4-mDY8P5IKDjE-mDY8MD_SCg4w-5g
2PD_SCg4-d4U-vjIqP3K-viAaCTA-qhQMMAkwBQ80P4AAAAE2QwEwjQEwTQEwQwE9AwEwBzBBMUM
BNoU-kgoOMb_YNjw-kgoOMD_YNjw-kgoOP5g2PD_SCg4wP5g2PD_SCg4wP5g2PD_SCg4wf5g2PDC
-kgoOMT_YNjw-kgoOMD_YNjw-kgoOP5g2PDC-kgoOP5g2PD_SCg4w-5g2PDB-kgoOP5g2PD_SCg4
wP5g2PD_SCg4xP5g2PD_SCg4wP5g2PD_SCg4wP5g2PDB-kgoOMD_YNjw-kgoOMH_YNjwwv5IKDjn
-mDY8P5IKDjC-mDY8P5IKDjA-mDY8P5IKDjD-mDY8P5IKDjA-mDY8P5IKDjC-mDY8P5IKDj93hT_
_Mio-cj__IBoLP5wKCjGLCQ8zv4AAAD__PDo2QwEwjQEwTQEwQwE9AwEygwE2hT_SCg4xv5g2PD_
SCg4wP5g2PD_SCg4-mDY8P5IKDjA-mDY8P5IKDjA-mDY8P5IKDjB-mDY8P5IKDjH-mDY8P5IKDjA
-mDY8P5IKDj_YNjw-kgoOML_YNjw-kgoOML_YNjw-kgoOMD_YNjw-kgoOMD_YNjwwf5IKDjE-mDY
8P5IKDjA-mDY8P5IKDj_YNjw-kgoOMD_YNjw-kgoOMD_YNjw-kgoOMH_YNjw-kgoOOD_YNjwwv5I
KDjE-mDY8P5IKDjC-mDY8P5IKDjA-mDY8P5IKDjD-mDY8P5IKDjA-mDY8P5IKDjC-mDY8P5IKDj9
3hT__Mio-cb__IBoLP5wKCjLPM3_AAAA-vjw6NkMBMI0BME0BMEMBPQMBMAcwwTDDATaFP5IKDjG
-mDY8P5IKDjA-mDY8P5IKDjA-mDY8MD_SCg4wv5g2PDA-kgoOMD_YNjwwf5IKDjE-mDY8MH_SCg4
wf5g2PDB-kgoOMD_YNjwwf5IKDjA-mDY8MH_SCg4wv5g2PD_SCg4xP5g2PD_SCg4wP5g2PD_SCg4
wP5g2PDB-kgoOMH_YNjwwP5IKDjA-mDY8MH_SCg45-5g2PD_SCg4w-5g2PDA-kgoOMH_YNjw-kgo
OMH_YNjwwP5IKDjD-mDY8P5IKDj93hT__Mio-cUs-nAoKM48zBT__PDo2QwEwjQENMEEwQwE9AwE
ygwE2hT_SCg49P5g2PDA-kgoOP3D-mDY8MH_SCg4z-5g2PDB-kgoOP3eFP74yKjhBO-_cCgowTzL
FP748OjZDATANMEENMEEwQwE9AwEwBzDBMMMBNoU-kgoOP39-fQU-vjIqOAE8f5wKCjALDzKFP74
8OjZDATANMEExQwE9AwEygwE2hT_SCg4-f399BT__Mio4ATx-nAoKMH__IBoPMn_AAAA-vjw6NkM
BMoMBPQMBMoMBNoU-kgoOP39-fQU-vjIqOAE8f5wKCjBLDzJFP748OjZDATKDAT0DATKDATaFP5I
KDj9-f30FP74yKjgBNb_gHCYBMosBMv_cCgowjzJFP748OjZDMwE9AzMBNoU-kgoOMb_YNjwwf5I
KDjd-mDY8MP_SCg42v5g2PDA-kgoOMD_YNjw-kgoOOr_YNjwwf5IKDjG-mDY8MH_SCg4-eYU-vjI
qOAE4ywEy-5wKCjC-viAaDzI-gAAAP748Oj9-csU-kgoOMf_YNjw-kgoOOD_YNjw-kgoONv_YNjw
-kgoOMD_YNjw-kgoOP5g2PD_SCg46v5g2PD_SCg4yv5g2PD_SCg4-eYU-vjIqOAExCzBBMAsBCzA
BMAswATCLMAEwCzABMEswQQswgTALMEExP5wKCjC-qhQMDzIFP748Oj9-csU-kgoOMf_YNjw-kgo
OMH_YNjwwf5IKDj_YNjwwf5IKDjB-mDY8MD_SCg4wP5g2PD_SCg4-mDY8MD_SCg4wP5g2PDA-kgo
OMf_YNjw-kgoOML_YNjwwP5IKDjA-mDY8MD_SCg4-mDY8P5IKDjA-mDY8MH_SCg4wf5g2PDA-kgo
OMX_YNjw-kgoOML_YNjwwf5IKDjB-mDY8MD_SCg4wP5g2PDB-kgoOMH_YNjwwf5IKDjA-mDY8MD_
SCg4wf5g2PDB-kgoOM7_YNjw-kgoOMr_YNjw-kgoOP3mFP74yKjgBMT_gHCYBMAsBCzABMEsBMAs
BMIsBCwEwCwELATDLATBLATH-nAoKML_qFAwPMgU-vjw6P39yxT_SCg4x-5g2PD_SCg4wP5g2PD_
SCg4wP5g2PD_SCg4-mDY8P5IKDjA-mDY8P5IKDj_YNjw-kgoOMD_YNjw-kgoOP5g2PDA-kgoOMH_
YNjw-kgoOMD_YNjw-kgoOMb_YNjw-kgoOMH_YNjw-kgoOMD_YNjw-kgoOP5g2PD_SCg4-mDY8P5I
KDj_YNjw-kgoOP5g2PD_SCg4wP5g2PD_SCg4-mDY8P5IKDjA-mDY8P5IKDjE-mDY8P5IKDjC-mDY
8P5IKDjA-mDY8P5IKDjC-mDY8P5IKDj_YNjw-kgoOMD_YNjw-kgoOP5g2PD_SCg4wP5g2PD_SCg4
-mDY8P5IKDjA-mDY8P5IKDj_YNjw-kgoOMf_YNjwwv5IKDjE-mDY8P5IKDjK-mDY8P5IKDj95hT_
_Mio4ATE-oBwmATALAQsBMIsBMAsBMIsBCzCBCwEwywEwizABMX_cCgowv6oUDA8yBT__PDo-f3L
FP5IKDjH-mDY8P5IKDjA-mDY8P5IKDjA-mDY8P5IKDj_YNjw-kgoOMD_YNjw-kgoOP5g2PD_SCg4
wP5g2PD_SCg4-mDY8P5IKDjC-mDY8ML_SCg4xv5g2PD_SCg4wf5g2PDC-kgoOP5g2PD_SCg4-mDY
8P5IKDj_YNjw-kgoOP5g2PD_SCg4wP5g2PD_SCg4-mDY8P5IKDjA-mDY8P5IKDjE-mDY8P5IKDjC
-mDY8P5IKDjA-mDY8P5IKDjA-mDY8MH_SCg4-mDY8P5IKDjA-mDY8P5IKDj_YNjw-kgoOMD_YNjw
-kgoOP5g2PDC-kgoOMD_YNjwwP5IKDjP-mDY8P5IKDjK-mDY8P5IKDj95hT__Mio4ATE-oBwmMEE
wCwEwiwEwCwEwiwELATCLATDLATELATE-nAoKMM8yBT__PDo-f3LFP5IKDjH-mDY8P5IKDjB-mDY
8MH_SCg4-mDY8P5IKDjA-mDY8P5IKDj_YNjw-kgoOMD_YNjw-kgoOP5g2PD_SCg4wv5g2PD_SCg4
yf5g2PD_SCg4wf5g2PD_SCg4wv5g2PD_SCg4wf5g2PD_SCg4-mDY8MH_SCg4wP5g2PD_SCg4wP5g
2PD_SCg4xP5g2PD_SCg4wP5g2PD_SCg4-mDY8P5IKDjA-mDY8P5IKDj_YNjw-kgoOMD_YNjw-kgo
OP5g2PD_SCg4wP5g2PD_SCg4wP5g2PDB-kgoOP5g2PD_SCg4xf5g2PD_SCg4xP5g2PDC-kgoOMT_
YNjw-kgoOMr_YNjw-kgoOP3mFP74yKjgBMQsBMIsBMMswATALATALATALMEEwCzBBMEswAQswQTF
-nAoKMM8yBT__PDo-f3LFP5IKDjG-mDY8MH_SCg4wv5g2PD_SCg4-mDY8P5IKDjA-mDY8P5IKDjA
-mDY8MD_SCg4wP5g2PD_SCg4w-5g2PDB-kgoOMb_YNjw-kgoOML_YNjwwf5IKDj_YNjw-kgoOMH_
YNjw-kgoOP5g2PD_SCg4w-5g2PDA-kgoOMb_YNjwwP5IKDjA-mDY8P5IKDjA-mDY8P5IKDjA-mDY
8MH_SCg4-mDY8P5IKDjA-mDY8P5IKDjC-mDY8P5IKDjA-mDY8MH_SCg4-mDY8MH_SCg4z-5g2PD_
SCg4yv5g2PD_SCg4-eYU-vjIqOAExCwEzSzABNn_cCgowzzIFP748OjKLATKLATULMAE3yzABNos
BMMsBM8U-kgoOMv_YNjwwP5IKDjq-mDY8P5IKDjh-mDY8MD_SCg42f5g2PDB-kgoOMb_YNjwwf5I
KDj95hT__Mio4ATx-nAoKML_qFAwPMgU-vjw6Mr_gHCYBMosBNMsBOIsBOAsBM8U-kgoOMj_YNjw
-kgoONf_YNjwwP5IKDjA-mDY8P5IKDjl-mDY8P5IKDja-mDY8P5IKDj9-cQU-vjIqOAE8f5wKCjC
JDzIFP748OjKLATALATALMAEwSzBBMAswATALATALATELMEEwCwEwSwEwCwE2ywEwSzABMEswQTA
LMAExCzABCwEwCzABMEswQTPFP5IKDjH-mDY8P5IKDjX-mDY8P5IKDj9yv5g2PD_SCg4-f3DFP74
yKjhBO-_cCgow-74gGg8yP4AAAD__PDoyiwELATALATALAQsBMAsBCwEwCwELATALATDLATCLMIE
LATALATbLATDLAQsBMIsBMAsBMMsBCwELATALATALATALATPFP5IKDjH-mDY8P5IKDjB-mDY8MD_
SCg4-mDY8P5IKDjB-mDY8MD_SCg4wP5g2PD_SCg4wP5g2PD_SCg4xf5g2PD_SCg4wf5g2PDA-kgo
OMD_YNjw-kgoOMD_YNjw-kgoOMX_YNjwwf5IKDjA-mDY8MD_SCg4wP5g2PDA-kgoOP5g2PD_SCg4
wf5g2PDA-kgoOMX_YNjwwP5IKDjB-mDY8MH_SCg4wP5g2PDB-kgoOP5g2PD_SCg4wP5g2PD_SCg4
wP5g2PDA-kgoOMH_YNjwwf5IKDjB-mDY8P5IKDj9-cMU-vjIqOj_qFAw-nAoKMgk-vjw6Mn_WFBI
-nAoKNX__IBoPMj_AAAA-vjw6Mr_gHCYwATBLATALAQsBMAsBCwEwCwELATALATELMAEwSwEwizA
BNwsBMEswQQsBMIswgTDLAQsBCwEwCwEwCwEwCwEzxT_SCg4x-5g2PD_SCg4wf5g2PD_SCg4-mDY
8P5IKDj_YNjw-kgoOML_YNjw-kgoOP5g2PD_SCg4wP5g2PD_SCg4xP5g2PDC-kgoOMD_YNjw-kgo
OMD_YNjw-kgoOMD_YNjw-kgoOMT_YNjw-kgoOML_YNjw-kgoOMD_YNjw-kgoOP5g2PD_SCg4-mDY
8P5IKDj_YNjw-kgoOP5g2PD_SCg4wP5g2PD_SCg4xf5g2PD_SCg4wP5g2PD_SCg4wv5g2PD_SCg4
wv5g2PD_SCg4wP5g2PD_SCg4-mDY8P5IKDjA-mDY8P5IKDj_YNjw-kgoOMT_YNjw-kgoOP39wxT_
_Mio5v6giHj_cCgoyf7AwMD__PDoyv5YUEj_cCgo1TzJ-gAAAP748OjKLAQsBMAsBMAsBCwEwCwE
LATALAQsBMAsBMYsBMAsBMEsBMAsBNssBMAsBMAsBCwEwiwExiwEwSwEwCwEwCwEwCwEzxT_SCg4
x-5g2PD_SCg4wf5g2PD_SCg4-mDY8P5IKDj_YNjw-kgoOMD_YNjwwf5IKDj_YNjw-kgoOMD_YNjw
-kgoOMX_YNjw-kgoOML_YNjw-kgoOMH_YNjwwP5IKDjG-mDY8MD_SCg4wP5g2PD_SCg4wP5g2PD_
SCg4-mDY8P5IKDj_YNjw-kgoOP5g2PD_SCg4-mDY8ML_SCg4xf5g2PD_SCg4wf5g2PDA-kgoOMH_
YNjwwP5IKDjA-mDY8P5IKDjA-mDY8P5IKDj_YNjwwv5IKDjA-mDY8MD_SCg4wv5g2PD_SCg4-f3D
FP74yKjl-qhQMP5wKCjJ-sDAwP748OjLJP5wKCjVPMn_AAAA-vjw6Mr_gHCYBMAsBMAswATBLMEE
wCzABMEswQTALATALMEEwSwEwSwEwCwE2yzABMAswQTALMEEwCzBBMAsBMAsBMEsBCzBBMAswQTP
FP5IKDjH-mDY8P5IKDjB-mDY8P5IKDjB-mDY8P5IKDj_YNjw-kgoOMD_YNjw-kgoOMD_YNjwwf5I
KDjF-mDY8P5IKDjC-mDY8P5IKDjA-mDY8P5IKDjA-mDY8P5IKDjH-mDY8P5IKDj_YNjw-kgoOMD_
YNjw-kgoOP5g2PD_SCg4wf5g2PD_SCg4-mDY8P5IKDjI-mDY8P5IKDjD-mDY8P5IKDjC-mDY8P5I
KDj_YNjw-kgoOMD_YNjw-kgoOP5g2PD_SCg4xf5g2PD_SCg4wf5g2PD_SCg4-f3DFP74yKjj-viA
aCT_cCgoyST__PDozCT_cCgo1P6oUDA8yf4AAAD__PDo-f3LFP5IKDjH-mDY8P5IKDjB-mDY8P5I
KDjB-mDY8P5IKDjA-mDY8MH_SCg4wv5g2PD_SCg4xf5g2PD_SCg4wf5g2PDB-kgoOP5g2PD_SCg4
wP5g2PD_SCg4xP5g2PDB-kgoOMH_YNjwwP5IKDjA-mDY8P5IKDjB-mDY8P5IKDjA-mDY8MH_SCg4
xP5g2PDB-kgoOP5g2PDB-kgoOMD_YNjwwf5IKDjB-mDY8MH_SCg4wP5g2PDB-kgoOP5g2PDB-kgo
OML_YNjw-kgoOP39wxT__Mio4v6giHj_cCgoy-7AwMD__PDozCT_cCgo1P74gGjAPMj_AAAA-vjw
6P39yxT_SCg4yP5g2PD_SCg4zP5g2PDA-kgoOP3S-mDY8P5IKDj9-cQU-vjIqOD__IBoLP5wKCjM
-sDAwP748OjMJP5wKCjU-viAaMM8xf4AAAD__PDo-f3LFP5IKDjH-mDY8P5IKDjl-mDY8P5IKDjQ
-mDY8P5IKDjI-mDY8P5IKDj9-eIU-vjIqN8k-nAoKM7__PDozST_cCgo1P74gGjGPML_AAAA-vjw
6P39yxT_SCg47-5g2PD_SCg40P5g2PD_SCg4yf5g2PD_SCg4-f3hFP74yKjf-nAoKM-_wMDA-vjw
6Mwk-nAoKNMs-viAaMc8wf4AAAD__PDo-f3LFP5IKDjG-mDY8MD_SCg4wP5g2PDB-kgoOMb_YNjw
wf5IKDjA-mDY8MD_SCg4wP5g2PDA-kgoOP5g2PD_SCg4wf5g2PDA-kgoOMX_YNjwwv5IKDj_YNjw
-kgoOP5g2PDA-kgoOMD_YNjwwP5IKDjB-mDY8MH_SCg4-mDY8P5IKDjA-mDY8P5IKDjA-mDY8MH_
SCg4wf5g2PD_SCg4-f3hFP74yKje-viAaP5wKCjP-sDAwP748OjMJP5wKCjT-viAaMk8wP4AAAD_
_PDo-f3LFP5IKDjH-mDY8P5IKDjA-mDY8P5IKDjA-mDY8P5IKDjE-mDY8P5IKDjC-mDY8P5IKDjA
-mDY8P5IKDj_YNjw-kgoOP5g2PD_SCg4-mDY8P5IKDj_YNjw-kgoOMD_YNjw-kgoOMX_YNjw-kgo
OMH_YNjwwP5IKDjE-mDY8P5IKDj_YNjw-kgoOML_YNjw-kgoOP5g2PD_SCg4wP5g2PD_SCg4xP5g
2PD_SCg4-f3hFP74yKjeJP5wKCjP-sDAwP748OjMJP5wKCjT-viAaMo8-gAAAP748Oj9-csU-kgo
OMf_YNjw-kgoOMD_YNjw-kgoOMD_YNjw-kgoOMX_YNjwwP5IKDjA-mDY8P5IKDjA-mDY8P5IKDj_
YNjw-kgoOP5g2PD_SCg4-mDY8P5IKDj_YNjwwv5IKDjF-mDY8P5IKDjB-mDY8P5IKDjD-mDY8MH_
SCg4-mDY8P5IKDjC-mDY8MD_SCg4wv5g2PDA-kgoOML_YNjw-kgoOP394RT__Mio3iz_cCgoz-7A
wMD__PDozCT_cCgo0iz__IBoy-4AAAD__PDo-f3LFP5IKDjH-mDY8P5IKDjA-mDY8P5IKDjA-mDY
8P5IKDjH-mDY8P5IKDj_YNjw-kgoOMD_YNjw-kgoOP5g2PD_SCg4wf5g2PD_SCg4-mDY8P5IKDjI
-mDY8P5IKDjB-mDY8P5IKDjC-mDY8P5IKDjA-mDY8P5IKDj_YNjw-kgoOML_YNjw-kgoOP5g2PD_
SCg4w-5g2PD_SCg4wf5g2PD_SCg4-f3hFP74yKjeLP5wKCjPJP748OjM-sDAwP5wKCjS-viAaMz_
AAAA-vjw6P39yxT_SCg4xv5g2PDB-kgoOP5g2PD_SCg4wP5g2PD_SCg4xP5g2PDB-kgoOMH_YNjw
wP5IKDjA-mDY8P5IKDjB-mDY8P5IKDjA-mDY8MH_SCg4xv5g2PDA-kgoOP5g2PD_SCg4w-5g2PDB
-kgoOMD_YNjwwf5IKDj_YNjw-kgoOMD_YNjw-kgoOP5g2PDB-kgoOML_YNjw-kgoOP394RT__Mio
3v5YUEj_cCgoz-6giHj__PDozP7AwMD_cCgo0Sz__IBozP4AAAD__PDo-f3LFP5IKDj9z-5g2PD_
SCg4-f3iFP74yKje-lhQSP5wKCjPJP748OjM-sDAwP5wKCjR-viAaM3_AAAA-vjw6P39yxT_SCg4
-f399BT__Mio3v5wKCjR-vjw6Mz_wMDA-nAoKNAs-viAaM3_AAAA-vjw6P39yxT_SCg4-f399BT_
_Mio3v5wKCjR-sDAwP748OjL-qCIeP5wKCjQ-viAaM7_AAAA-vjw6P39yxT_SCg4-f399BT__Mio
3v5YUEj_cCgo0P7AwMD__PDoy-6giHj_cCgozyz__IBozv4AAAD__PDo-f3LFP5IKDj9-f30FP74
yKjeLP5wKCjN-lhQSP5wSJAk-qCIeP748OjL-lhQSP6AcJgk-nAoKM3__IBoz-4AAAD__PDo-f3L
FP5IKDj9-f30FP74yKje-qCIeP5wKCjM-lhQSCzBJP748OjHDMQsJP5wKCjM-viAaM-_AAAA-vjw
6P39yxT_SCg4-f399BT__Mio3-5wKCjLJCzCJP7AwMD__PDoxQw0wRzBDCwk-nAoKMkk-qCIeP74
gGjP-gAAAP748Oj9-csU-kgoOP39-fQU-vjIqN-_cCgoyyzD-nBIkCQMxTTBHMIMLMAEyf74gGjR
-gAAAP748OjZDMgE_AzIBN4U-kgoOP39-fQU-vjIqN-_qFAw-nAoKMn_cEiQ-oBwmMQMHMwMLMA8
BMf_qFAw-viAaNH_AAAA-vjw6NkMBMYcDAT3DATGHAwE3RT_SCg4x-5g2PDA-kgoOMH_YNjw-kgo
ONH_YNjw-kgoOML_YNjw-kgoOP3T-mDY8MH_SCg4xv5g2PDB-kgoOP3nFP74yKjfJP5wKCjI-lhQ
SP6AcJjFDBzMDCzBJATG-viAaNL_AAAA-vjw6NkMBMYcwAwE9gwExhzADATcFP5IKDjG-mDY8P5I
KDjA-mDY8P5IKDjA-mDY8P5IKDjR-mDY8P5IKDjC-mDY8P5IKDj90-5g2PD_SCg4yv5g2PD_SCg4
-ecU-vjIqOD_cCgoyP5wSJAsxQwczAwswgTF-viAaNP_AAAA-vjw6NkMBMYcwQwE9QwExhzBDATb
FP5IKDjG-mDY8P5IKDjC-mDY8ML_SCg4wP5g2PDA-kgoOMH_YNjwwf5IKDjA-mDY8MD_SCg4wP5g
2PDC-kgoOP5g2PDC-kgoOMD_YNjwwP5IKDj9zf5g2PD_SCg4yv5g2PD_SCg4-ecU-vjIqOD_oIh4
-nAoKMcsxgwczAwswv5YUEgEw-74gGjU-gAAAP748OjZDATGHMIMBPQMBMYcwgwE2hT_SCg4x-5g
2PDA-kgoOMH_YNjw-kgoOMT_YNjw-kgoOP5g2PD_SCg4xf5g2PD_SCg4wP5g2PD_SCg4wv5g2PD_
SCg4wf5g2PD_SCg4wP5g2PD_SCg4-cL_YNjwwv5IKDjE-mDY8P5IKDjK-mDY8P5IKDj95xT__Mio
wf74gGjEPNj_cCgoxiQsxgwczAwswv5wSJAEwv6oUDAU1P4AAAD__PDo2QwEygwE9AwEygwE2hT_
SCg4yf5g2PD_SCg4wP5g2PD_SCg4wv5g2PDB-kgoOP5g2PD_SCg4w-5g2PDB-kgoOMD_YNjw-kgo
OML_YNjw-kgoOMH_YNjw-kgoOMD_YNjw-kgoOP3M-mDY8P5IKDjK-mDY8P5IKDj95xT__Mio-viA
aMg81v6giHj_cCgoxf5wSJD_gHCYxgwczAwswwTB-qhQMBTV-gAAAP748OjZDATKDAT0DATKDATa
FP5IKDjG-mDY8P5IKDjA-mDY8P5IKDjA-mDY8P5IKDjB-mDY8P5IKDjA-mDY8P5IKDj_YNjw-kgo
OML_YNjw-kgoOMD_YNjw-kgoOMD_YNjw-kgoOML_YNjw-kgoOMH_YNjw-kgoOMD_YNjw-kgoOP3C
-mDY8ML_SCg4xP5g2PD_SCg4yv5g2PD_SCg4-ecU-viAaMr__Mio1iz_cCgoxP5wSJD_gHCYxgwc
zAwsw-5YUEgE-qhQMBTW-gAAAP748OjZDATAHMEExQwE9AwEwDTABDTABMMMBNoU-kgoOMf_YNjw
wP5IKDjC-mDY8MD_SCg4wP5g2PDB-kgoOMD_YNjwwf5IKDjA-mDY8MH_SCg4wf5g2PDA-kgoOMH_
YNjwwP5IKDjA-mDY8MD_SCg4-c3_YNjw-kgoOMr_YNjw-kgoOP3nFP74gGjL-vjIqNUU-nAoKMT_
gHCYxwwczAwswiQEwBTX-gAAAP748OjZDATKDAT0DATKDATaFP5IKDj9_-5g2PDB-kgoOMb_YNjw
wf5IKDj95xT__IBoy-74yKjW-qCIeP5wKCjDLMcMHMwMLMH_WFBIBP6oUDAU2P4AAAD__PDo2QwE
wBzDBMMMBPQMBMA0wQQ0wATCDATaFP5IKDj9-f30FP74gGjM-vjIqNb_oIh4-nAoKML_gHCYxwwc
zAws-nBIkP5YUEgE-qhQMBTZ-gAAAP748OjZDATKDAT0DATKDATaFP5IKDj9-f30FP74gGjL-vjI
qNgUJP5wKCjA-oBwmMcMHMwMJATAFNv_AAAA-vjw6NkMBMAcwwTDDAT0DATANMAENMEEwgwE2hT_
SCg4-f399BT__IBoy-74yKja-qhQMP5wKCgk-oBwmMcMzCQE-qhQMBTc-gAAAP748OjZDATKDAT0
DATKDATaFP5IKDj9-f30FP74gGjELMAUw-74yKjb-qCIeP5wKCjA-lhQSP6AcJjQJMAE-qhQMBTe
-gAAAP748OjZDATKDAT0DATKDATaFP5IKDj9-f30FCz_cCgoxCT__IBowf74yKjf-qCIeATA-lhQ
SP5wSJD_gHCYyTwkwATA-qCIeBTg-gAAAP748OjZDATKDAT0DATKDATaFP5IKDj9-f30FP5wKCjF
JP74yKjk-viAaP6oUDAE-lhQSMcEwSz_oIh4FOP_AAAA-vjw6NkMzAT0DMwE2hT_SCg4-f399BT_
cCgoxP74gGj__Mio6STALMAkwBTBPMEU5P4AAAD__PDo-f3LFP5IKDj9-f30FP5wKCjCJP74yKjm
-vjw6Nv__IBo2P4AAAAE-f3LFP5g2PD9-f30FCzAJP74yKjnBN3__IBo1-4AAAAE-f3LFP39-fY8
6gTd-viAaNf_AAAABP39yxT9-f32POoE3f74gGjX-gAAAAT9-csU-f399jzqBN3__IBo1-4AAAAE
-f3LFP39-fY86gTd-viAaNf_AAAABMX_gHCYwATaLMAEyywEwywE0CwEwywEwCwEwSwE0CwExywE
xywExRT9-f32POoExSzABMAswQTALMEEwSzBBMT__IBo1-4AAAAExiwE2SwEwCwE0CwE1iwExCwE
0CwExywExywExRT9-f32POoExywELATALAQsBMAsBCwEx-74gGjX-gAAAATGLATBLMAEwSzABMAs
BMAsBMAswATBLMEEwiwEwyzABCwEwCzABMEswQTJLMAELATALMAEwSzBBCzABMAswgQsBCzABMAs
wATBLMEELATALATDLMIELATALAQswgTDFP39-fY84CQ8xwTFLMEELATALAQsBMAsBMAswATF-viA
aNY8-gAAAATGLATALATALATCLAQsBMAsBCwEwCwELATELATELAQsBCwEwCwEwCwEwCwEySwELAQs
BMAsBMAsBMAsBMAsBMEsBMEswATELAQsBMIsBCwExSwEwSwEwCwEwCwExRTX-mDY8BTLPBTrPBTc
PBTBPBTBPBTmPBT9zP74yKjf-lhQSP5wKCj__IBoPMb__PDoxCwEwCwELMEEwCzBBMMsBMQU1DzB
-gAAAATGLATALMIEwCzBBCwEwCwELMIEwCzABMEsBMUsBCwELATALATALATALATJLAQsBCwEwCwE
wCwEwCwEwCwEwSwEwSwEwyzBBCwEwizABMYsBMIswATBLATFFOX_YNjwFOs8FOA8FME8FOY8FP3M
-vjIqN7_cCgowTzH-vjw6MUswQQsBMIsBMIswQTF-viAaNQ8wf4AAAAExiwEwCwEwiwEwCwELAQs
BMAsBMUsBCwExiwEwSwEwCwEwCwEwCwEySwEwSwEwCwEwCwEwCwEwCwEwSwEwSwEwiwEwCwELATC
LAQsBMUsBMEsBMAsBMAsBMUUx-5g2PDBFME8wBTAPBTAPBQ8wBTBPMEUwDzAFMA8whTAPMAUxTzB
FME8wBTAPBQ8wBTAPMAUwDzAFDwUwTzAFMA8whTAPMAUwDwUPMAUwDzBFMQ8FME8FDzAFMA8whQ8
wRTGPMAUwDwUPMAUPBQ8wBTAPMAUwDwUwTwUxDwUwDwUwDzAFMA8FMA8FMA8wRT4-vjIqN0k-nAo
KMD_qFAwPMf__PDoyf6AcJgEwiwEzP74gGjSPMIU-gAAAATGLMAEwCzBBMAswQQswATCLMEELMEE
wCzCBMAsBMAsBMEsBCzBBMAswQTJLATBLAQswQTALMEELMEEwSzABCwEwyzBBMAswQQsBMAsBMAs
BMIswAQsBMAsBMEswATDFMf_YNjwFMA8FMI8FDwUwDwUwDwUwDwUwDwUwjwUwDwUwTwUwDwUxDwU
wDwUwjwUPMAUxDwUPBQ8FDwUPBTAPBTAPBTBPBTAPBQ8wBTBPBTHPBTBPBTAPBTBPBTBPBTAPBTH
PBQ8wBTBPMAUwTwUwDwUPBTBPBTEPBQ8FMA8FMA8FDwUwDwUPBT7-vjIqNz_qFAw-nAoKMAsPMj_
_PDo3f74gGjRPMIUwP4AAAAE-f3LFMf_YNjwFMA8FMA8wRQ8FMA8FMA8FMA8FMA8FMA8wRTAPBTB
PMIUxDwUwDwUwDzBFDwUwzzBFDwUPBQ8FDzCFMA8FME8whQ8FMM8wBTFPBQ8FDwUwDwUwTwUwTwU
wDwUxTzBFDwUwjwUwjwUwDwUPBQ8FDwUxDzAFME8whQ8FMA8FMA8wBT5-vjIqMIs-viAaP6giHjA
PNMs-nAoKMD_WFBIPMn__PDo3RTPPMMUwf4AAAAE-f3LFMf_YNjwFMA8FDwUwDwUPBQ8FME8FME8
wRQ8FMA8FMA8FME8FMc8wRTAPBTAPBQ8FMI8FMA8FDwUwTwUPBTDPBTBPBTCPBTFPBTEPBQ8FDwU
wDwUwTwUwTwUwDwUxDwUwDwUPBTCPBTCPBTAPBQ8FDwUPBTEPBQ8FMA8FMM8wRTCPBT4-vjIqMH_
oIh4-viAaDzAFCQUPM8U-nAoKMEkPMv__PDo2xTOPMQUwv4AAAAE-f3LFMf_YNjwFMA8FMA8wRQ8
wBTBPMEUwjwUwDzBFME8wBTAPMEUxDwUwzzBFDwUwzzBFDwUwTwUwDzBFME8wBTAPMEUPBTCPMEU
xjwUPBTAPMEUwTzAFDwUwDwUxTzBFDwUwjwUwzzAFME8FDwUxTwUwDwUwDzBFMI8FDzBFPn__Mio
wCz__IBoPMMULCQUPMoUJP5wKCjBFDzsFMc8xxTD-gAAAP748Oj9-csU2-5g2PDAFNQ8FP36PMAU
-cD__MioJMA8xiQswCT__IBoPMUUJP5wKCjBLBQ8-cAUwyz_AAAA-vjw6P39yxT9-f32JCw8ySQs
-nAoKMAsJMEsBMEswDz9wv74gGjELP4AAAD__PDo-f3LFP39-fYkPMz__IBoJMAswSTAFDz9wxTH
-gAAAAT9-csU-f399jz92P74gGjK-gAAAAT9-csU-f399jz91v74gGjM-gAAAAT9-csU-f399jz9
1f74gGgkLBTK-gAAAAT9-csU-f399jz91P74gGgsJMD_cCgoFMn_AAAA-vjw6P39yxT9-f32PP3S
-viAaCTA-viowDzAJP5wKCgsJBTG-gAAAP748Oj9-csU-f399jz90P74gGgkwTzDJMD_cCgowCzA
FMP_AAAA-vjw6P39yxT9-f32PP3O-viAaCQsJDwEPMUkwP5wKCjBLMAUwP4AAAD__PDo-f3LFP39
-fY8-cz__IBoLMAkPMAEwTzHJMD_WFBIwP5wKCjA-gAAAP748Oj9-csU-f399jz9yv6giHgswCQ8
wATEPMwUBP39yxT9-f32PP3H-viAaCQsJP74qMA8wf748OjGPMv_AAAABP39yxT9-f32PP3E-viA
aCQswCQ8wgTIPMv_AAAABNkMyAT4DMgE3hT9-f32PP3C-viAaCQswCT__KjAPMH__PDoyzzK-gAA
AATZDATGHAwE9wwExhwMBN0U-f399jz9-viAaCQswCTA-viowDzB-vjw6M48yf4AAAAE2QwExhzA
DAT2DATGHMAMBNwU-f399jz6-viAaMAswST__KjAPMH__PDo0jzI-gAAAATZDATGHMEMBPUMBMYc
wQwE2xT9-f32PPf__IBoJCzADMQ8BNU8x-4AAAAE2QwExhzCDAT0DATGHMIMBNoU-f399jzz-viA
aMAswww0wRzBDATWPMb_AAAABNkMBMoMBPQMBMoMBNoU-f399jzt-viAaCTALMEMxTTBHMIMBNc8
xf4AAAAE2QwEwjTDBMEMBPQMBMoMBNoU-f399jztLMEkwAwczAwE2DzEFATZDATCNATBNATBDAT0
DATAHMEExQwE2hT9-f32POz__IBoLP74qMA8wQwczAz__PDo2DzE-gAAAATZDATCNATBNATBDAT0
DATKDATaFP39-fb__IBowTzdFMA8yBQsPMIMHMwMBNk8w-4AAAAE2QwEwjQEwTQEwQwE9AwEwBzD
BMMMBNoU-f399izDJML__IBoyjzLFP7AwMDAJCwkwv74gGjBJCw8wATADBzMDATaPML_AAAABNkM
BMI0BDTBBMEMBPQMBMoMBNoU-f399jz_wMDAwCTEFMkEJDzK-viAaP7AwMAEwDwUJMAswCTBLATC
DBzMDATbPMH_AAAABNkMBMA0wQQ0wQTBDAT0DATAHMMEwwwE2hT9-f32BNQk-viAaDzIFP7AwMAE
xRTAJMAUBMIMHMwMBNw8wP4AAAAE2QwEwDTBBMUMBPQMBMoMBNoU-f399gTU-sDAwCz__IBoPMgk
BM4MHMwMBNw8wP4AAAAE2QwEygwE9AwEygwE2hT9-f32BNX_wMDALP74gGg8xyQEzgwczAwE3DzA
-gAAAATZDATKDAT0DATKDATaFP39-fYE1iQs-viAaDzGLATODBzMDATcPMD_AAAABNkMzAT0DMwE
2hT9-f32BNf_wMDALCQ8xSwEzgwczAwE3DzA-gAAAAT9-csU-f399gTY-sDAwCz__IBoPMQsBM4M
HMwMBNw8wP4AAAAE-f3LFP39-fYE2iTA-viAaDzCLATPDMwE3jz_AAAABP39yxT9-f32BNv_wMDA
LCQ8wSwE-Tz_AAAABP39yxT9-f32BNz_wMDAJCwk-viAaCwE-Tz_AAAABP39yxT9-f32BN7_wMDA
JMEE-Tz_AAAABP39yxT9-f32BP3jPBQE7v6AcJjABNgsBMoswATKLMAE2iwEwRT9-f32BP3jPBQE
7SwE6CwEyywE3hT9-f32BP3jPBQEyizBBMEswATBLMAEwSzBBMAswATFLMEEwCwEwSwEwCwEzSzB
BMAswATALATALATALMAEwSwEwSzBBMAswATBLATBLMAEwCwEwCwELATALATDLMAELATALMAEwRT9
-f32BP3jPBQEyiwEwCwELATALATCLAQsBMIsBMAsBMMsBMIswgQsBMAsBM0sBMAsBMAsBMAsBMAs
BCwEwCwEwCwEwCwEwCwEwiwEwCwEwywELATALAQsBMAsBMMsBCwELATALATALBT9-f32BP3jPBQE
yiwEwCwELMIEwCzBBCwEwizCBMQswATBLATCLMAEziwEwCwEwCwEwSzABMAswgTALATALATALATA
LMEEwCwEwSzBBMAswATALATALATDLAQsBCwEwCwEwCwU-f399gT94zwUBMoswQTALATCLATALAQs
BMIsBMksBMAsBMEsBMAsBM0swQTBLATALATALAQsBMMsBMEswQQsBMAsBMAsBMAsBMAsBCwEwCwE
wCzBBMMsBMEsBMAsBMAsFP39-fYE-eM8FATKLATDLMEEwCzBBMAswQTALMEEwCwEwCzBBMEsBMEs
BMAsBM0sBMIswQQsBMAsBMAswQTALMAEwiwEwCzBBMAswATALMEELATALATCLATALATALATBLAQs
wQTAFP39-fYE8CzBBMAswQTBLMEEwCzBBNw8FATKLAT3LATVLMAE1CzABM8U-f399gTwLATALAQs
BMAsBCwEwCwELATfPBQE-f3LFP39-fYE8CwEwCwELATALAQsBMAsBMAswATdPBQE-f3LFP39-fYE
8CzBBMAsBMAsBMAswQTCLATcPBQE-f3LFP39-fYE8CwEwiwEwCwEwiwELMEE3TwUBP39yxT9-f32
BPAsBMgswATjFAT9-csU-f399gT95BQE-f3LFMoEFPcEFMMEFN4EFMMEFMAEFMcEwBTABBTABMAU
ygQU0gQU-ccE-eQUBP39yxTKBBT9BBTkBBTJBBTGBBTKBBTSBBT9xwT95BQE-f3LFMgEwRQEFATA
FMAEwBTABMEUxQQUwAQUwATAFMAEFMAEFAQUBMAUyATAFAQUwATAFMEEwRTFBMAUwAQUBMAUyATA
FAQUwATAFMEEwRQEwBTGBBTBBMAUwQQUwQTAFMUEwRTBBMAUwAQUBMAUwATAFMEEFP3HBP3kFAT9
-csUxwQUwAQUBMAUwQQUwAQUBBTABBTEBBTABBQEFMAEFAQUwAQUBMAUygQUBBQEFMAEFMAEFMAE
FMQEFMAEFATAFMoEFAQUBBTABBTABBTABBTABBTFBMIUwAQUwQQUwAQUwAQUxAQUwAQUBBTABBQE
wBTBBBTABBTABBT9xwT95BQE-f3LFMcEFMAEFAQUwgQUwAQUBBTABBTEBBTABBQEFMAEFAQUwAQU
BBTLBBQEFAQUwAQUwAQUwAQUxAQUwAQUBBTLBBQEFAQUwAQUwAQUwAQUwAQUxgQUwgQUwQQUwATC
FMQEFMAEFATCFAQUwgTCFMAEFP3HBP3kFAT9-csUxwQUwAQUBBTCBBTABBQEwRTGBMEUBBTABBQE
FMAEFAQUywQUwQQUwAQUwAQUwAQUxAQUwAQUBBTLBBTBBBTABBTABBTABBTABBTGBBTCBBTBBBTA
BBTHBBTABBQEFMIEFMIEFP3NBP3kFAT9-csUyATBFAQUwwTAFMAEFMoEFMAEwBTBBMEUBBTIBBTA
BBTBBBQEwRTABMEUxQTAFMAEFMgEFMAEFMEEFATBFMAEwRQEwRTFBBTBBMEUwATAFMAEwRTEBBTA
BBTABMEUBBTDBMEUwAQU-ccE-eL_wMDAwP4AAAAE-f3LFNYEFMgEwBT9-f3RBP3iJDwUBP39yxT9
-f32BP3i-sDAwP74gGj_AAAABP39yxT9-f32BP3i-sDAwCT_AAAABP39yxT9-f32BP3i-sDAwCT_
AAAABNkMyAT95BT9-f32BP3U-sDAwCQEyhT_qFAw-gAAAATZDATGHAwE-cEMxATaFP39-fYE-dQk
LCQEyiwUBNkMBMYcwAwE-Qw0wRzBDATZFP39-fYE-dT_cCgoPCwEJP748OjILBQE2QwExhzBDAT1
DMU0wRzCDATZFP39-fYE-dT_cCgoPMD__IBoBP5YUEj_oIh4-vjw6Mb_WFBI-gAAAATZDATGHMIM
BPMMHMwMBNoU-f399AT91ST__IBoPMEs-nAoKP6giHj_wMDA-vjw6MQk-gAAAATZDATKDATzDBzM
DATbFP39-fIE-dYkwDzC-viAaCz_cCgo-lhQSP7AwMD__PDowv6giHj_AAAABNkMBMoMBPMMHMwM
BPMMBMoMBPQMBMI0wwTBDAT0DATKDATR-oBwmMYUBML_WFBI-nAoKP748Ogk-nAoKP6giHj__PDo
PP5wKCjA-lhQSP748Oje-qCIeMEE-cgk-qhQMDzEJCz_cCgo-lhQSP6giHj__PDowP7AwMD_AAAA
BNkMBMAcwQTFDATzDBzMDATzDATAHMEExQwE9AwEwjQEwTQEwQwE9AwEwBzBBMUMBNH_gHCYxhQE
wv7AwMD_cCgowP5YUEgU-vjw6MH_oIh4-nAoKP5YUEj__PDo3v6oUDD__IBoLP7AwMAE-cf_oIh4
-nAoKDzG-viAaCwE-lhQSP748Oj_wMDA-gAAAATZDATKDATzDBzMDATzDATKDAT0DATCNATBNATB
DAT0DATKDATR-oBwmMYUBMMk-qCIeATD-sDAwP5wKCjA-vjw6N0k-qhQMP74gGgkwAT9xyT_cCgo
PMksJP7AwMD_AAAA-vjw6NkMBMAcwwTDDATzDBzMDATzDATAHMMEwwwE9AwEwjQEwTQEwQwE9AwE
wBzDBMMMBNH_gHCYxhQEyv7AwMD_cCgowP748Ojd-lhQSP74gGjB-nAoKP748Oj9x-7AwMD_cCgo
PMz_AAAA-vjw6NkMBMoMBPMMHMwMBPMMBMoMBPQMBMI0BDTBBMEMBPQMBMoMBNEsxhQEy-5wKCjA
-vjw6Nz_oIh4-qhQMP74gGjBLCQE-cb_wMDA-nAoKP74gGg8y-4AAAD__PDo2QwEwBzDBMMMBPMM
HMwMBPMMBMAcwwTDDAT0DATANMEENMEEwQwE9AwEwBzDBMMMBNH_gHCYxhQEy-5wKCjA-vjw6Nz_
WFBI-viAaMP_cCgo-vjw6P3G-sDAwP5wKCj_oIh4PMv_AAAA-vjw6NkMBMoMBPMMHMwMBPMMBMoM
BPQMBMA0wQTFDAT0DATKDATRLMYUBMv_cCgowP7AwMD__PDo2iT_qFAw-viAaMP_cCgo-sDAwP74
8Oj9xRT_cCgoLDzL-gAAAP748OjZDATKDATzDBzMDATzDATKDAT0DATKDAT0DATKDATR-oBwmMYU
BMv_WFBI-nAoKP7AwMD__PDo2iT__IBoxP6giHj_WFBIBP3GJP5wKCg8y-4AAAD__PDo2QwEygwE
8wwczAwE8wwEygwE9AwEygwE9AwEygwE0SzGFATL-qCIeP5wKCgk-vjw6Nn_wMDA-qhQMP74gGjF
-nAoKCT__PDo-cX_WFBI-nAoKDzL-gAAAP748OjZDMwE9AzMBPQMzAT0DMwE9AzMBNH_gHCYxhT_
wMDABMoU-nAoKCT__PDo2ST__IBoxv6oUDD_cCgo-vjw6P3F-qCIeP5wKCgUPMr_AAAA-vjw6P39
-f391P6AcJjGFP6oUDAEyv7AwMD_cCgowP748OjYFCz__IBoxywkBMD_wMDABP3BFP5wKCgkPMr_
AAAA-vjw6P39-f391P6AcJjGFP6oUDD_wMDABMr_WFBI-nAoKBT__PDo1-5wKCj__IBoyQT_wMDA
-vjw6MD_oIh4BP3AFP5wKCgsPMr_AAAA-vjw6P39-f391P6AcJjGFP74gGj_qFAwBMok-nAoKCT_
_PDo1v7AwMAs-viAaMks-nAoKP748OjAJATI-sDAwATzFP5wKCgsPMr_AAAA-vjw6P39-f391P6A
cJjGFP74gGjAJATK-nAoKMD__PDo1v6oUDAUyyz_WFBIBP7AwMD_oIh4BMcswBQE8RT_cCgo-lhQ
SDzK-gAAAP748Oj9-f39-dT_gHCYxhT__IBowP6oUDAEyiT_cCgo-sDAwP748OjU-qCIeCz__IBo
zCzAPP5YUEgExiQUwP5wKCj__PDo8v5wKCjAPMr_AAAA-vjw6P39-f391P6AcJjGFP74gGjA-qhQ
MP6giHgEyf7AwMD_cCgoJP748OjU-lhQSP74gGjQ-qCIeP7AwMAExBQs-viAaMAsJATx-sDAwP5Y
UEg8yv4AAAAE6f6AcJgEzCwEwywE4izABOwsBOAsBMMsBNgsBOAswATTLATMLATGLATXLATELMYU
-viAaMH_qFAwBMr_cCgo-qCIeP748OjTJCwU0f5YUEgExP5wKCgUwiz_wMDA-vjw6MoU-qCIeATi
FP5wKCj__IBoPMn_AAAA-vjw6On_gHCYBNIsBOEsBO4sBOYsBNgsBN8sBNUsBMwsBMYsBN4sxhT_
_IBowf6oUDD_wMDABMgU-nAoKCT__PDo0yT__IBo0iTABML_wMDALP74gGjD-nAoKP7AwMD__PDo
yRQkFATi-nAoKCQ8yf4AAAD__PDowP6AcJgELMAEwCzABMEswQTALMEELATALAQsBCzABMAswATB
LMEELMIEwyzABCwEwCzABMEswQTcLMEEwCwEwSwEwCwE5izCBMAswATBLMAEwCwELMAEwCzBBMMs
wAQsBMAswATBLMEE1yzCBMAswATBLMAEwCwELMAEwCzBBMQswQTALATBLATALATNLMIEwCzABMEs
wQQswgTELATALATALMAEwCwEwCwExSzBBCzABMEsyRT__IBowiQEyCT_cCgo-lhQSP748OjS-sDA
wP74gGjU-nAoKP748OjCJBTE-qhQMP5wKCj_wMDA-vjw6Mj_oIh4-viAaCz_wMDABOH_WFBILDzJ
-gAAAATA-oBwmMAEwSwEwCwELATCLATCLATALAQswATBLATALAQsBMMsBMUsBCwELATALATALATA
LATbLATCLMIELATALATnLATBLATALATCLAQswATBLATGLAQsBCwEwCwEwCwEwCwE2CwEwSwEwCwE
wiwELMAEwSwExiwEwizCBCwEwCwEziwEwSwEwCwELATDLATGLAQsBMAsBMAsBCwEwCwExCwEwywE
wCwEwCzHFP74gGjC-nAoKP7AwMD__PDox-6giHj_cCgowP748OjSPP74gGjU-qhQMCQEwP7AwMAs
-viAaMX_cCgo-lhQSP748OjI-qCIeBTALP7AwMAE4CQsPMn_AAAABMD_gHCYBMIswgTALMAEwSzA
BMAsBMAsBCwEwizCBCwEwywExSwELAQsBMAsBMAsBMAsBNwswATBLATCLMAE6CwEwSzCBMAswQQs
BMMswATELAQsBCwEwCwEwCwEwCwE2CwEwSzCBMAswQQsBMMswATFLMAEwSwEwizABM8sBMEswgTA
LMAEwSwEwSzCBCzABMEswgQsBMAsBCzCBMAswATBLATALATALMcU-viAaML_qFAw-lhQSATHJP5w
KCjA-sDAwP748OjR-viAaNYs-sDAwAT_oIh4-viAaDzBFMP_cCgoJP748OjG-sDAwP74gGjC-nAo
KP7AwMD__PDo3xT_cCgoPMn_AAAA-vjw6MD_gHCYBMIsBMUsBMIsBCwEwCwELATCLATCLATDLATF
LATBLATALATALATALATeLATALATBLATALATnLATBLATCLATALAQsBMUsBMMsBMEsBMAsBMAsBMAs
BNgsBMEsBMIsBMAsBCwExSwExiwEwCwEwSwEwCwEziwEwSwExSwEwCwExiwELATALATDLMEExywE
wCwEwSzJFP74gGjD-nAoKP748OjH-nAoKMEk-vjw6NAU2P6oUDD_cCgoFDzFFMEEJP748OjFJDzA
FMAs-nAoKP7AwMD__PDo3-5YUEg8yf4AAAAEwP6AcJgEwyzBBCzBBMAswQTBLMEELATDLMEEwCzB
BMEswATALATALATBLAQswQTALMEE2yzBBMEsBMEsBMAsBOgswATALMEEwCzBBCwEwizBBMEsBMAs
BMEsBCzBBMAswQTZLMAEwCzBBMAswQQsBMIswQTBLATALMEEwSwEwSwEwCwEzyzABMAswQQswQTC
LMAExCwEwCwEwCzBBMIsBMQswQTALMEEwizHFP74gGjD-nAoKP6giHj__PDoxf7AwMD_cCgowf5Y
UEj__PDozxT__IBo1jzLFMD_qFAw-nAoKP7AwMD__PDoxCQ8wf74gGjALP5wKCj_wMDA-vjw6N4k
PMn_AAAABP39-f38-oBwmMAEzyzABCzGFP74gGjD-qhQMCQExf7AwMD_cCgowST__PDozv6giHjA
-viAaNU8zhQs-nAoKP7AwMD__PDow-5YUEg8wv74gGjALCQE3iQ8yf4AAAAE-f39-f3U-oBwmMYU
-viAaMT_cCgo-sDAwP748OjEJP5wKCjB-qhQMBT__PDozf5wKCj__IBo1TzRBMD__PDowyw8wxTA
LP6giHgE3f5wKCg8yf4AAAD__PDo-f39-f3U-oBwmMYU-viAaMT_qFAwJATE-nAoKMEswP5YUEj_
_PDozP6giHjAFNU80v5wKCj_WFBI-vjw6MH_wMDALDzE-viAaMAs-qCIeATc-nAoKDzJ-gAAAP74
8Oj9-f39-dT_gHCYxhT__IBoxP6oUDD_cCgo-vjw6MT_cCgowSwUBP748OjLJCwU1TzTFP5wKCgk
-vjw6MAkwDzFFMD_cCgoJP748Ojb-nAoKDzJ-gAAAP748Oj9-f39-dT_gHCYxhT__IBoxf5wKCj_
wMDA-vjw6MIU-nAoKMH__IBowAQk-vjw6Mn_wMDA-nAoKP74gGjWPNQUBCT__PDoJBQ8xhTA-nAo
KCT__PDo2v5YUEg8yf4AAAAE-f39-f3ULMYU-viAaMX_cCgowP748OjC-qCIeP5wKCjA-qhQMBTA
LCT__PDoyP7AwMD_cCgoLP74gGjWPNUUBCT_WFBIPMgUwAT_wMDA-vjw6Nn_cCgoPMn_AAAA-vjw
6P39-f391P6AcJjGFP74gGjF-qhQMP5wKCj_wMDA-vjw6MEk-nAoKMD__IBowgT__PDox-7AwMD_
cCgowP74gGjXPNYU-qCIeBQ8yRTALP7AwMD__PDo2P5wKCg8yf4AAAD__PDo-f39-f3U-oBwmMYU
-viAaMb_cCgoJP748OjB-nAoKMEUwgQk-vjw6MX_wMDA-nAoKMD__IBo1zzmFMD_qFAw-sDAwP74
8OjX-nAoKDzJ-gAAAP748Oj9-f39-dT_gHCYxhT__IBoxv5wKCj_WFBI-vjw6MD_wMDA-nAoKMD_
qFAw-viAaMMk-vjw6MX_oIh4-nAoKCQU1zznFMAs-sDAwP748OjW-nAoKDzJ-gAAAP748Oj9-f39
-dT_gHCYxhT__IBoxv6oUDD_cCgo-sDAwP748Ogk-nAoKMD__IBoxAQk-vjw6ML_wMDA-nAoKMAk
-viAaNg86BTALCT__PDo1f5YUEgUPMj_AAAABP39-f391P6AcJjGFP74gGjG-qhQMP5wKCj_wMDA
-vjw6CT_cCgoLP74gGjELCT__PDowv5wKCjALBTaPOgUwCz_wMDA-vjw6NT_cCgo-viAaDzI-gAA
AP748Oj9-f39-dT_gHCYxhT__IBox-5wKCj_oIh4-vjw6P5wKCjAFMYEJP748OjA-lhQSP5wKCj_
qFAwFNs86hQs-qCIeP748OjT-lhQSBQ8yP4AAAAE-f39-f3U-oBwmMYU-viAaMf_qFAw-qCIeAT_
cCgowBTGJAT_wMDABMAs-viAaNw87Cz_WFBI-vjw6NL_cCgoPMn_AAAA-vjw6P39-f391P6AcJjG
FP74gGjH-qhQMP5wKCj_wMDABCz__IBoxywEwCwU3Tzt-qCIeP5YUEj_wMDA-vjw6ND_cCgoPMn_
AAAA-vjw6P39-f391P6AcJjGFP74gGjH-qhQMP5wKCgkBBTJLP6giHgU3jzuJAT_wMDA-vjw6M-_
cCgoPMn_AAAA-vjw6P39-f391P6AcJjGFP74gGjH-qhQMP5wKCjBFOo88BQEJP748OjO-nAoKDzJ
-gAAAP748Oj9-f39-dT_gHCYxhT__IBoyP5wKCjA-qhQMBTrPPEs-lhQSP7AwMD__PDozP5wKCg8
yf748Oj_AAAABNgMyAT4DMgE_AzIBPgMyAT4DMgE1f6AcJjFFP74gGjJ-nAoKMAU7Dzy-qCIeAQk
-vjw6Mv_cCgoPMn__PDowP4AAAD9-f39-dr__IBoyf6oUDD_cCgoLBTsPPQs-lhQSP7AwMD__PDo
yf5wKCg8yf748OjbFAT1LATiPATU-qCIeP5wKCjALP74gGj9yyzAFP3lJCwU1CwEFO089ST_WFBI
-qCIeP748OjI-nAoKDzJ-vjw6NskBPUkBPf_wMDA-lhQSP5wKCjALP74gGj9yywELBT95iwU1AQs
FO089ywk-sDAwP748OjGJDzJAAAAAAAAAAE=
:: main.lua
--[[pod_format="raw",created="2024-04-02 16:25:34",modified="2025-04-10 21:01:46",revision=2148]]
-- ral's miditron
-- lua-midi library written by Possseidon
-- gui wrapper based on code from importpng by pancelor
-- inspiration and reference from Denote, conversion tool by bikibird

include "Miditron.lua"
include "midi.lua"
include "helper.lua"
--include "debug_funcs.lua"

local parameters = {
	noteDepth         = 4,
	decayRate         = 0.80,
	ignoreTempoChange = false,
	stacatto          = false,
}

function _init()
	coro = nil
	window{
		title="m i d i t r o n",
		width=240,
		height=160,
		autoclose = true,
	}
	state = rnd()<0.85 and "drop your .mid or .midi file here!" or rnd{"drop the dang midi file -w-", "drop midi file pls? owo","drop .mid file or i'll steal your SOCKS","drop the file already, i wanna go home"}
end

on_event("drop_items", function(msg)
	state = "importing..."
	
	if #msg.items==0 then
		state = "err: got no items"
		return
	end
	local path = msg.items[1].fullpath
	if not path then
		state = "err: spaces in filename(?)"
		return
	end
	
	local ext = path:ext()
	if ext!="mid" and ext!="midi" then
		state = ext and ("err: need .mid or .midi, \ngot ."..ext) or ("err: need .mid or .midi, \ngot folder")
		return
	end

	local midi_file = fetch(path)
	if not midi_file then return end
	
	local path_without_ext
	if (ext=="mid")  path_without_ext = path:sub(1,-5)
	if (ext=="midi") path_without_ext = path:sub(1,-6)
	
	output_sfx_name = "/ram/cart/sfx/"..path_without_ext:basename()..".sfx"
	
	state = "processing..."
	--coro = cocreate(convertToPicotron)
	--coresume(coro,midi_file,output_sfx_name,parameters)	
	convertToPicotron(midi_file,output_sfx_name,parameters)		
end)

function _update()
	if coro and costatus(coro)=="suspended" then
		assert(coresume(coro))
	end
end

local _last_state
local gui_selection = 1
function _draw()
	gui()
	
	line(0,80,240,80,28,3)	

	if state!=_last_state then
		_last_state = state
		cls()
		print("\#0"..state,8,144,7)
	end
end

local not_used_yet = true
function gui()
	rectfill(0,0,240,80,21)
	rectfill(0,80,240,100,0)
	color(28)
	if (gui_selection==1) rectfill(8,8,232,16,24)
	print("1 Quarter Note       = ["..parameters.noteDepth.."] tracker rows",8,8,28)
	if (gui_selection==2) rectfill(8,20,232,28,24)
	print("Note Decay Rate      = ["..parameters.decayRate.."]",8,20,28)
	if (gui_selection==3) rectfill(8,32,232,40,24)
	print("Ignore Tempo Changes = ["..(parameters.ignoreTempoChange and "X" or " ").."]",8,32,28) --spr(parameters.ignoreTempoChange and 1 or 0, 120,32)
	print("(may fix some issues)",8,40)
	print("in some tracks)",8,48)
	if (gui_selection==4) rectfill(8,64,232,72,24)
	print("Stacatto             = ["..(parameters.stacatto and "X" or " ").."]",8,64,28) --spr(parameters.stacatto and 1 or 0, 120,60)
	
	if (keyp("down")) gui_selection = min(4,gui_selection+1) not_used_yet = false
	if (keyp("up"))   gui_selection = max(1,gui_selection-1) not_used_yet = false
	
	if keyp("left") then
		not_used_yet = false
		if (gui_selection==1) parameters.noteDepth = max(1, parameters.noteDepth \ 2)
		if (gui_selection==2) parameters.decayRate = max(0, parameters.decayRate-0.05)
		if (gui_selection==3) parameters.ignoreTempoChange = not parameters.ignoreTempoChange
		if (gui_selection==4) parameters.stacatto = not parameters.stacatto
	elseif keyp("right") then
		not_used_yet = false
		if (gui_selection==1) parameters.noteDepth = min(parameters.noteDepth * 2, 32)
		if (gui_selection==2) parameters.decayRate = min(parameters.decayRate+0.05, 1)
		if (gui_selection==3) parameters.ignoreTempoChange = not parameters.ignoreTempoChange
		if (gui_selection==4) parameters.stacatto = not parameters.stacatto
	end
	
	if (not_used_yet) print("navigate parameters with arrow keys",8,88,28)
end
:: midi.lua
--[[pod_format="raw",created="2024-04-03 19:34:15",modified="2025-04-10 21:01:46",revision=1437]]
Stream = {}
Stream.new = function(file) 
	stream = {}
	stream.content = file	
	setmetatable(stream, {__index=Stream})
	return stream
end
Stream.read = function(self, count) 
	result = self.content:sub(1,count)
	self.content = self.content:sub(count+1)
  	return result
end

---Reads exactly count bytes from the given stream, raising an error if it can't.
---@param stream file* The stream to read from.
---@param count integer The count of bytes to read.
---@return string data The read bytes.
local function read(stream, count)
  local result = ""
  while #result ~= count do
    result = result .. assert(stream:read(1), "missing value")
  end
  return result
end

---Reads a variable length quantity from the given stream, raising an error if it can't.
---@param stream file* The stream to read from.
---@return integer value The read value.
---@return integer length How many bytes were read in total.
local function readVLQ(stream)
  local value = 0
  local length = 0
  repeat
    local byte = assert(stream:read(1), "incomplete or missing variable length quantity"):byte()
    value = value << 7
    value = value | byte & 0x7F
    length = length + 1
  until byte < 0x80
  return value, length
end

local midiEvent = {
  [0x80] = function(stream, callback, channel, fb)
    local key, velocity = ("I1I1"):unpack(fb .. stream:read(1))
    callback("noteOff", channel, key, velocity) -- / 0x7F)
    return 2
  end,
  [0x90] = function(stream, callback, channel, fb)
    local key, velocity = ("I1I1"):unpack(fb .. stream:read(1))
    callback("noteOn", channel, key, velocity)-- / 0x7F)
    return 2
  end,
  [0xA0] = function(stream, callback, channel, fb)
    local key, pressure = ("I1I1"):unpack(fb .. stream:read(1))
    callback("keyPressure", channel, key, pressure)-- / 0x7F)
    return 2
  end,
  [0xB0] = function(stream, callback, channel, fb)
    local number, value = ("I1I1"):unpack(fb .. stream:read(1))
    if number < 120 then
      callback("controller", channel, number, value)
    else
      callback("modeMessage", channel, number, value)
    end
    return 2
  end,
  [0xC0] = function(stream, callback, channel, fb)
    local program = fb:byte()
    callback("program", channel, program)
    return 1
  end,
  [0xD0] = function(stream, callback, channel, fb)
    local pressure = fb:byte()
    callback("channelPressure", channel, pressure)-- / 0x7F)
    return 1
  end,
  [0xE0] = function(stream, callback, channel, fb)
    local lsb, msb = ("I1I1"):unpack(fb .. stream:read(1))
    callback("pitch", channel, (lsb | msb << 7) / 0x2000 - 1) --wtf???
    return 2
  end
}

---Processes a manufacturer specific SysEx event.
---@param stream file* The stream, pointing to one byte after the start of the SysEx event.
---@param callback function The feedback providing callback function.
---@param fb string The first already read byte, representing the manufacturer id.
---@return integer length The total length of the read SysEx event in bytes (including fb).
local function sysexEvent(stream, callback, fb)
  local manufacturer = fb:byte()
  local data = {}
  repeat
    local char = stream:read(1)
    table.insert(data, char)
  until char:byte() == 0xF7
  callback("sysexEvent", data, manufacturer, table.concat(data))
  return 1 + #data
end

---Creates a simple function, forwarding the provided name and read data to a callback function.
---@param name string The name of the event, which is passed to the callback function.
---@return function function The function, calling the provided callback function with name and read data.
local function makeForwarder(name)
  return function(data, callback)
    callback(name, data)
  end
end

local metaEvents = {
  [0x00] = makeForwarder("sequenceNumber"),
  [0x01] = makeForwarder("text"),
  [0x02] = makeForwarder("copyright"),
  [0x03] = makeForwarder("sequencerOrTrackName"),
  [0x04] = makeForwarder("instrumentName"),
  [0x05] = makeForwarder("lyric"),
  [0x06] = makeForwarder("marker"),
  [0x07] = makeForwarder("cuePoint"),
  [0x20] = makeForwarder("channelPrefix"),
  [0x2F] = makeForwarder("endOfTrack"),
  [0x51] = function(data, callback)
    local rawTempo = (">I3"):unpack(data)
    callback("setTempo", 6e7 / rawTempo)
  end,
  [0x54] = makeForwarder("smpteOffset"),
  [0x58] = function(data, callback)
    local numerator, denominator, metronome, dotted = (">I1I1I1I1"):unpack(data)
    callback("timeSignature", numerator, 1 << denominator, metronome, dotted)
  end,
  [0x59] = function(data, callback)
    local count, minor = (">I1I1"):unpack(data)
    --callback("keySignature", math.abs(count), count < 0 and "flat" or count > 0 and "sharp" or "C", minor == 0 and "major" or "minor")
 	if (count>0x7F) count = count-256
 	callback("keySignature", count, minor~=0)
   end,
  [0x7F] = makeForwarder("sequenceEvent")
}

---Processes a midi meta event.
---@param stream file* A stream pointing one byte after the meta event.
---@param callback function The feedback providing callback function.
---@param fb string The first already read byte, representing the meta event type.
---@return integer length The total length of the read meta event in bytes (including fb).
local function metaEvent(stream, callback, fb)
  local event = fb:byte()
  local length, vlqLength = readVLQ(stream)
  local data = read(stream, length)
  local handler = metaEvents[event]
  if handler then
    handler(data, callback)
  end
  return 1 + vlqLength + length
end

---Reads the four magic bytes and length of a midi chunk.
---@param stream file* A stream, pointing to the start of a midi chunk.
---@return string type The four magic bytes the chunk type (usually `MThd` or `MTrk`).
---@return integer length The length of the chunk in bytes.
local function readChunkInfo(stream)
  local chunkInfo = stream:read(8)
  if not chunkInfo then
    return false
  end
  --weird hack, dont do this
  if (#chunkInfo < 8) return
  assert(#chunkInfo == 8, "incomplete chunk info")
  return (">c4I4"):unpack(chunkInfo)
end

---Reads the content in a header chunk of a midi file.
---@param stream file* A stream, pointing to the data part of a header chunk.
---@param callback function The feedback providing callback function.
---@param chunkLength integer The length of the chunk in bytes.
---@return integer format The format of the midi file (0, 1 or 2).
---@return integer tracks The total number of tracks in the midi file.
local function readHeader(stream, callback, chunkLength)
  local header = read(stream, chunkLength)
  assert(header and #header == 6, "incomplete or missing header")
  local format, tracks, division = (">I2I2I2"):unpack(header)
  callback("header", format, tracks, division)
  return format, tracks
end

---Reads only a single event from the midi stream.
---@param stream file* A stream, pointing to a midi event.
---@param callback function The callback function, reporting the midi event.
---@param runningStatus? integer A running status of a previous midi event.
---@return integer length, integer runningStatus Returns both read length and the updated running status.
local function processEvent(stream, callback, runningStatus)
  local firstByte = assert(stream:read(1), "missing event")
  local status = firstByte:byte()

  local length = 0

  if status < 0x80 then
    status = assert(runningStatus, "no running status")
  else
    firstByte = stream:read(1)
    length = 1
    runningStatus = status
  end


  if status >= 0x80 and status < 0xF0 then
    length = length + midiEvent[status & 0xF0](stream, callback, (status & 0x0F) + 1, firstByte)
  elseif status == 0xF0 then
    length = length + sysexEvent(stream, callback, firstByte)
  elseif status == 0xF2 then
    length = length + 2
  elseif status == 0xF3 then
    length = length + 1
  elseif status == 0xFF then
    length = length + metaEvent(stream, callback, firstByte)
  else
    callback("ignore", status)
  end

  return length, runningStatus
end

---Reads the content of a track chunk of a midi file.
---@param stream file* A stream, pointing to the data part of a track chunk.
---@param callback function The feedback providing callback function.
---@param chunkLength number The length of the chunk in bytes.
---@param track integer The one-based index of the track, used in the "track" callback.
local function readTrack(stream, callback, chunkLength, track)
  callback("track", track)

  local runningStatus

  while chunkLength > 0 do
    local ticks, vlqLength = readVLQ(stream)
    if ticks > 0 then
      callback("deltaTime", ticks)
    end

    local readChunkLength
    readChunkLength, runningStatus = processEvent(stream, callback, runningStatus)
    chunkLength = chunkLength - readChunkLength - vlqLength
  end
end

---Processes a midi file by calling the provided callback for midi events.
---@param stream file* A stream, pointing to the start of a midi file.
---@param callback? function The callback function, reporting the midi events.
---@param onlyHeader? boolean Wether processing should stop after the header chunk.
---@param onlyTrack? integer If specified, only this single track (one-based) will be processed.
---@return integer tracks Returns the total number of tracks in the midi file.
local function process(file, callback, onlyHeader, onlyTrack)
  file = Stream.new(file)
  
  callback = callback or function() end

  local format, tracks
  local track = 0
  while true do
    local chunkType, chunkLength = readChunkInfo(stream)

    if not chunkType then
      break
    end

    if chunkType == "MThd" then
      assert(not format, "only a single header chunk is allowed")
      format, tracks = readHeader(stream, callback, chunkLength)
      assert(tracks == 1 or format ~= 0, "midi format 0 can only contain a single track")
      assert(not onlyTrack or onlyTrack >= 1 and onlyTrack <= tracks, "track out of range")
      if onlyHeader then
        break
      end
    elseif chunkType == "MTrk" then
      track = track + 1

      assert(format, "no header chunk before the first track chunk")
      assert(track <= tracks, "found more tracks than specified in the header")
      assert(track == 1 or format ~= 0, "midi format 0 can only contain a single track")

      if not onlyTrack or track == onlyTrack then
        readTrack(stream, callback, chunkLength, track)
        if onlyTrack then
          break
        end
      else
        stream:seek("cur", chunkLength)
      end
    else
      local data = read(chunkLength)
      callback("unknownChunk", chunkType, data)
    end
  end

  if not onlyHeader and not onlyTrack then
    assert(track == tracks, "found less tracks than specified in the header")
  end

  return tracks
end

---Processes only the header chunk.
---@param stream file* A stream, pointing to the start of a midi file.
---@param callback function The callback function, reporting the midi events.
---@return integer tracks Returns the total number of tracks in the midi file.
local function processHeader(stream, callback)
  return process(stream, callback, true)
end

---Processes only the header chunk and a single, specified track.
---@param stream file* A stream, pointing to the start of a midi file.
---@param callback function The callback function, reporting the midi events.
---@param track integer The one-based track index to read.
---@return integer tracks Returns the total number of tracks in the midi file.
local function processTrack(stream, callback, track)
  return process(stream, callback, false, track)
end

midi = {
  process = process,
  processHeader = processHeader,
  processTrack = processTrack,
  processEvent = processEvent
}
:: Miditron.lua
--[[pod_format="raw",created="2024-04-02 18:54:07",modified="2025-07-03 14:19:11",revision=2214]]
include "midi.lua"
include "debug_funcs.lua"
include "helper.lua"

-- Parameters:
-- Depth: (def: <4> tracker-notes per beat; 4 bars p/ sfx;  16th res.)
--             (<8> tracker-notes per beat; 2 bars p/ sfx;  32nd res.)
--             (<2> tracker-notes per beat; 8 bars p/ sfx;  8th res.)
-- 

-- basically
-- step 1: midi_data= 8 tables including note_on and note_off, sorted by minimal distance 
-- step 2: sfx_data= 8 userdata arrays representing full sequential 
--				tracker values (mem bytes) for each channel
-- step 3: modify sfx_data using the values provided by the user (dynamics, instrument, etc.)
-- step 4: transfer userdata to .sfx using metadata as parameter

function convertToPicotron(source_midi_file, output_sfx, parameters)
	
	parameters                    = parameters or {}
	parameters.noteDepth          = parameters.noteDepth or 4
	parameters.decayRate          = parameters.decayRate or 0.8
	parameters.ignoreTempoChange  = parameters.ignoreTempoChange or (false)
	parameters.stacatto           = parameters.stacatto or (false)
	
	metaChannel = {
		currentTick = 0,
		highestTick = 0,
	}
	rawNoteList = {}	
	
	-- this makes changes to metaChannel and rawNoteList
	-- processNote is a callback that is called on each 
	-- command in the .mid file
	midi.process(source_midi_file, processCommand)

	sortedNotes = qsort(rawNoteList, function(a,b) return a.position < b.position end)
	trackChannels = splitSimultaneousNotes(sortedNotes)
	
	
	trackChannels, metaChannel = translatePositionsAndTicks(
		trackChannels, metaChannel, parameters.noteDepth, parameters.stacatto
	)
	
	sections = formSFXSections(
		trackChannels, metaChannel, parameters.noteDepth, parameters.ignoreTempoChange
	)
	--printySections(sections)

	sfxMap, patternMap = buildSFXMap(sections, parameters)

	storeSfx(sfxMap, patternMap, output_sfx)
	state = "saved to: "..output_sfx
	
	loadSfxOntoMemory(output_sfx)
	music(0)
end


function processCommand(eventType, ...) 
	args = {...}	

	local lastMetaEvent = metaChannel[#metaChannel] or {endPosition=0}
	local lastEvent = rawNoteList[#rawNoteList]
	

	-- Waiting Time
	if eventType == "deltaTime" then
		local midiTicks = args[1]
		metaChannel.currentTick+=midiTicks	
	end

	-- Track Events
	if eventType == "noteOn" then
		local pitch    = args[2]
		local velocity = args[3]
		
		if velocity == 0 then
			eventType = "noteOff"
		else			
	
			add(rawNoteList, {	
				type="note",
				pitch=pitch,
				position=metaChannel.currentTick,
				midiTicks=0,
				velocity=velocity,  
				on=true,
				inst=1, --for the time being
			})
		end
	end	
	
	-- Turn off a currently playing note
	if eventType == "noteOff" then
		local pitch = args[2]
		
		-- loop reverse to find the last note with due pitch
		-- to turn off
		for i=0,#rawNoteList-1 do
			suspectEvent = rawNoteList[#rawNoteList-i]
			if suspectEvent.type=="note" then
				if suspectEvent.pitch == pitch then
					suspectEvent.on = false
					suspectEvent.midiTicks = metaChannel.currentTick-suspectEvent.position
					break
				end
			end
		end
	end
		
	
	-- Meta Events

	if eventType == "track" then
		metaChannel.currentTick = 0			
		-- only one track can provide metaEvents
		-- the rest will follow through the first track's metaEvents
		-- in changes in tempo, key sign, and time sign
		if (#metaChannel>0) metaChannel.locked = true
			
	end

	if eventType == "setTempo" and not metaChannel.locked then
		add(metaChannel, {
			type       = "setTempo",
			position   = metaChannel.currentTick,
			bpm        = args[1]
		}) end
		
	if eventType == "timeSignature" and not metaChannel.locked then
		add(metaChannel, {
			type       = "timeSignature",
			position   = metaChannel.currentTick,
			numerator  = args[1],
			denominator= args[2],
			metronome  = args[3],
			dotted     = args[4]
		})	end

	-- Nem precisa disso pra converter
	-- As propriedades de "event.pitch" ja possuem a informacao certa do pitch
	-- so e util pra gameplay talvez
	if eventType == "keySignature" and not metaChannel.locked then
		add(metaChannel, {
			type       = "keySignature",
			position   = metaChannel.currentTick,
			sharpCount = args[1],
			minor      = args[2]
		})	end

	if eventType == "header" then
		metaChannel.ppq = args[3]
	end
	
	metaChannel.highestTick = max(metaChannel.highestTick,metaChannel.currentTick)
		
end

function splitSimultaneousNotes(sortedNotes) 
	trackChannels =	{
		[1]={},
		[2]={},
		[3]={},
		[4]={},
		[5]={},
		[6]={},
		[7]={},
		[8]={}
	}
	for channel in all(trackChannels) do 
		channel[1]={type="trackStart", midiTicks=0, position=0, pitch=0}
	end

	for note in all(sortedNotes) do
		if note.type == "note" then
	
			local chosenChannel, lastEvent
			local smallestDeltaPitch = 999
			
			for channel in all(trackChannels) do
				lastEvent	= channel[#channel]
		
				local endPosition = lastEvent.position + lastEvent.midiTicks
				-- either rest or note that is not playing
				if note.position >= endPosition then
					local deltaPitch = abs(note.pitch - lastEvent.pitch)
					if deltaPitch < smallestDeltaPitch then 
						smallestDeltaPitch = deltaPitch
						chosenChannel = channel
					end
				end
			end	
			
			if (chosenChannel) add(chosenChannel, note) 
		end
	end
	
	return trackChannels
end


function translatePositionsAndTicks(trackChannels, metaChannel, noteDepth, stacatto)
	-- for each BPM or keySignature change
	-- calculate spd, midiTicksToSpdConversionRate, trackerNotesPerBeat (noteDepth)
	-- change BPM changes to spd changes
	-- calculate how many sfxs will be allocated for these ranges
	
	-- take the notes in between the start and end of these ranges
	-- for each note, add a trackerNotePosition, trackerNoteLength
		--note.trackerNoteLength = staccato and 1 or ()
	-- remove midiTicks
		
		 
	local midiTickPer64th = metaChannel.ppq \ 16

	for track in all(trackChannels) do 
		for event in all(track) do
			event.trackerPosition = (noteDepth / 16) * event.position / midiTickPer64th
			event.trackerLength   = (noteDepth / 16) * event.midiTicks / midiTickPer64th
			event.trackerPosition = round(event.trackerPosition)
			event.trackerLength   = stacatto and 1 or round(event.trackerLength)
		end 
	end

	for i=1,#metaChannel do
		local metaEvent = metaChannel[i]
		
		metaEvent.trackerPosition = (metaEvent.position / midiTickPer64th) * (noteDepth / 16)
		metaEvent.trackerPosition = round(metaEvent.trackerPosition)
	end
	
	-- translate the last recorded tick
	-- to know when to end the track
	metaChannel.lastTrackerPosition = (metaChannel.highestTick / midiTickPer64th) * (noteDepth / 16)
	metaChannel.lastTrackerPosition = ceil(metaChannel.lastTrackerPosition)
		
	return trackChannels, metaChannel
end


function formSFXSections(trackChannels, metaChannel, noteDepth, ignoreTempoChange)
		
	local currentTempo
	local currentTimeSignature={2,4}
	local sections = {}	

	for metaEvent in all(metaChannel) do
	
		local prevSection = sections[#sections] or {}
		local startTrackerPosition = metaEvent.trackerPosition or 0 --prevSection.endTrackerPosition or 0	
		--[[
		startPosition *= spdTickPerMidiTick
		]]--
		if metaEvent.type == "timeSignature" then
		   local oldTimeSignature = currentTimeSignature 
			currentTimeSignature = {metaEvent.numerator, metaEvent.denominator}
			
			-- failsafe against fake new sections
			if currentTempo and (
				oldTimeSignature[1]~=currentTimeSignature[1] or
				oldTimeSignature[2]~=currentTimeSignature[2]
				) then
				if (#sections~=0) prevSection.trackerLength = startTrackerPosition - prevSection.startTrackerPosition
				add(sections, {
					spd                  = bpmToSpd(currentTempo,noteDepth),
					timeSignature        = currentTimeSignature,
					startTrackerPosition = startTrackerPosition,
				})
			end
		end
		
		if metaEvent.type == "setTempo" then
			local oldTempo = currentTempo
			currentTempo = metaEvent.bpm
			
			if currentTimeSignature and oldTempo~=currentTempo and not ignoreTempoChange then
				if (#sections~=0) prevSection.trackerLength = startTrackerPosition - prevSection.startTrackerPosition
				add(sections, {
					spd                  = bpmToSpd(currentTempo,noteDepth),
					timeSignature        = currentTimeSignature,
					startTrackerPosition = startTrackerPosition,
				})
			end
		end
		
		prevSection.endTrackerPosition = startTrackerPosition - 1
	end
	
	-- for last section (metaChannel is holding currentTick as the last tick in the 
	local lastSection = sections[#sections] or sections[#sections-1]
	lastSection.endTrackerPosition = metaChannel.lastTrackerPosition
	
	--print(pp_tbl(sections))
	
	for section in all(sections) do
		section.trackerLength = section.endTrackerPosition - section.startTrackerPosition
		--section.totalBars = section.trackerLength / noteDepth * (section.timeSignature[1]/section.timeSignature[2])
		
		-- 48 is a three meter, 64 if a even meter (2 or 4)
		section.trackerSFXLength = section.timeSignature[1]==3 	and 48 or 64 
				
		--last one doesnt count
		--section.trackerSFXLength = section.trackerLength \ max(1, section.totalSFXUnits-1)
		
		for i=1,8 do 
			section[i] = tableFilter(trackChannels[i], function(note)
				--printy("tableFilter test "..i, section.startTrackerPosition, note.trackerPosition, section.endTrackerPosition) 
				if (note.type~="note") return false
				return (section.startTrackerPosition <= note.trackerPosition and
						  note.trackerPosition <= section.endTrackerPosition)
				end)
		end
		section.sfxUnitsPerChannel = ceil(section.trackerLength / section.trackerSFXLength)
	end
	
	-- remove all empty sections (lost setTempo and timeSignature events)
	sections=tableFilter(sections, function(section)
		for i=1,8 do 
			if (#section[i]>0) return true
		end
		return false
	end)

	return sections
end

function buildSFXMap(sections, parameters)
	-- sfx map is a n-item table, starting at 0
	-- populated by userdata("u8",328)
	-- DO NOT ITERATE IT WITH for sfx in all(sfxMap) CUS IT STARTS AT 0
	
	-- a sfx track: 328 bytes
	-- 8 bytes for the header: len (i16); spd; loop0; loop1; delay (i8); flags, null byte
	-- header[2] = spd
	-- header[3] = len or loop0
	-- header[4] = loop1
		
	-- 64 bytes for each column (one after another)
	-- 1. pitch
	-- 2. inst
	-- 3. vol
	-- 4. effect
	-- 5. effect_p

	-- patterns are 8-item tables showing what 
	-- sfx is active in each channel (int from 0-127)
	-- in memory, they're userdata("u8",20)
	
	--first, you need to know how notes are disposed in the sfx map

	sfxMap = {
	}
	patternMap = {}

	for s=1,#sections do
		section = sections[s]	

		--sfxMap[s] = {
		--	highestIndex=0
		--}		

		local spd, len
		spd, len = section.spd, section.trackerSFXLength	
		printy(spd,len)
		
		-- for channels with actual notes
		local activeChannels = tableFilter(section, function(channel) return (#channel>0) end)
		
		for i=0,section.sfxUnitsPerChannel-1 do
			for ch=0,#activeChannels-1 do
				--last sfx can have shorter lenght
				local lastLen
				if (i==section.sfxUnitsPerChannel-1) lastLen = section.trackerLength % section.trackerSFXLength
				
				local sfxHeader = userdata("u8",8)
				sfxHeader[0] = 0x40
				sfxHeader[2] = spd
				sfxHeader[3] = lastLen or len 
				
				local emptyColumnHex = "" 
				for j=0,63 do emptyColumnHex..="ff" end
				-- result: 64 times "ff"
				
				local pitchColumn    = userdata("u8",64, emptyColumnHex)
				local instColumn     = userdata("u8",64, emptyColumnHex)
				local volumeColumn   = userdata("u8",64, emptyColumnHex)
				local effectColumn   = userdata("u8",64) --these don't need ff values, 
				local effect_pColumn = userdata("u8",64) --00 is their default
				
				local lowerRange	= section.startTrackerPosition + i*len
		
				local isNoteInRange = function(note)
					return (lowerRange <= note.trackerPosition and
							 note.trackerPosition < lowerRange+len)
				end
				
				--processing	...
				--for note in all(tableFilter(section[ch+1], isNoteInRange)) do
				for note in all(tableFilter(activeChannels[ch+1], isNoteInRange)) do
					--start position of the note, INSIDE THE SFX TRACK (0-63)
					--using max in case of notes that start in another sfx track
					local start = max(0, note.trackerPosition % len) 
					--using min in case it ends after the sfx track ends
					local stop = min(len-1, start + note.trackerLength - 1)
						
			
					for n=start,stop do 
						pitchColumn[n]  = max(note.pitch - 12, 0)
						instColumn[n]   = note.inst
						volumeColumn[n] = flr(note.velocity * parameters.decayRate^(n-start)) --* 2 --range from 0-127 -> 0-255
						--effects arent implemented yet in picotron~
					end
				end
				
				local sfxTrack = userdata("u8",328)
				sfxTrack:set(0x000, sfxHeader:get())
				sfxTrack:set(0x008, pitchColumn:get())
				sfxTrack:set(0x048, instColumn:get())
				sfxTrack:set(0x088, volumeColumn:get())
				sfxTrack:set(0x0c8, effectColumn:get())
				sfxTrack:set(0x108, effect_pColumn:get())	
		
				function udEqual(u1,u2) 
					if (#u1~=#u2) return false
					for i=0,#u1-1 do if (u1[i]~=u2[i]) return false end return true 
				end

				printy("loop",i,"channel",ch,"sfx",i*8+ch,"isEmpty  ",udEqual(pitchColumn,userdata("u8",64, emptyColumnHex)))

				local nextIndex = #sfxMap + (sfxMap[0] and 1 or 0)
				sfxMap[nextIndex] = sfxTrack
		
				if (not patternMap[s])    patternMap[s]={}
				if (not patternMap[s][i]) patternMap[s][i]={}
				patternMap[s][i][ch] = nextIndex
			end
		end
	end	
		
	return sfxMap, patternMap
end

function storeSfx(sfxMap, patternMap, outputName)

	local saveFile = userdata("u8",0x30000)
	for i=0,0x1ffff do
		saveFile[i] = peek(0x30000+i)
	end
	
	--patterns
	local currentPattern = 0
	for section in all(patternMap) do
		print("section!")
		for p=0,63 do 
			if section[p] then
				local patternInfo = section[p]
				local patternAddr = 0x00100 + currentPattern*20
				printy("pattAdrr",p, pp_tbl(patternInfo),"",patternAddr)
				saveFile[patternAddr+9] = 0x00     --assumes all channels are muted
				for ch=0,7 do 			
					if patternInfo[ch] then
						saveFile[patternAddr+ch] = patternInfo[ch] --% 256 --trackIdx msByte
						saveFile[patternAddr+9] += 2^ch                    --trackMask
						--saveFile[patternAddr+ch*2]   = 0x00--patternInfo[ch] \ 0xff --trackIdx lsByte
					end
				end
				currentPattern+=1
			end
		end
	end

	-- tracks
	for i=0x20000,0x2ffff,328 do
		for j=0,7 do     saveFile[i+j] = peek(0x30000+i+j) end
		for j=8,199 do   saveFile[i+j] = 0xff              end
		for j=200,327 do saveFile[i+j] = 0x00              end
	end	

	for m=0,#sfxMap+1 do
		if (sfxMap[m]) saveFile:set(0x20000+328*m, sfxMap[m]:get())
	end

	store(outputName,saveFile)
end

function loadSfxOntoMemory(filename)
	local file = fetch(filename)
	for addr=0x00000,0x2ffff do
		poke(0x30000+addr,file[addr])
	end
end
:: .info.pod
b64$LS1bW3BvZCxhdXRob3I9IlJhbCIsYmJzX2lkPSJtaWRpdHJvbi0wIixjcmVhdGVkPSIyMDI1
LTA0LTEwIDIwOjM4OjMwIixpY29uPXVzZXJkYXRhKCJ1OCIsMTYsMTYsIjAwMDAwMTAxMDEwMTAx
MDEwMTAxMDEwMTAxMDEwMTAxMDAwMTAxMDcwZDBkMGQwNzA3MGQwZDBkMDcwMTAxMDEwMTAxMDcw
NjBkMGQwZDA2MDYwZDBkMGQwNjA3MDEwMTAxMDcwNjA2MGQwZDBkMDYwNjBkMGQwZDA2MDYwNzAx
MDEwNzA2MDYwZDBkMGQwNjA2MGQwZDBkMDYwNjA3MDEwMTA3MDYwNjBkMGQwZDA2MDYwZDBkMGQw
NjA2MDcwMTAxMDcwNjA2MGQwZDBkMDYwNjBkMGQwZDA2MDYwNzAxMDEwNzA2MDYwZDBkMGQwNjA2
MGQwZDBkMDYwNjA3MDEwMTA3MDYwNjBkMGQwZDA2MDYwZDBkMGQwNjA2MDcwMTAxMDcwNjA2MDEw
MTAxMDYwNjAxMDEwMTA2MDYwNzAxMDEwNzA2MDYwNjA3MDYwNjA2MDYwNzA2MDYwNjA3MDEwMTBk
MDcwNjA2MDcwNjA2MDYwNjA3MDYwNjA3MGQwMTAxMGQwZDA3MDcwZDA3MDcwNzA3MGQwNzA3MGQw
ZDAxMDEwMTBkMGQwZDBkMGQwZDBkMGQwZDBkMGQwZDAxMDEwMTAxMDEwZDBkMDEwZDBkMGQwZDAx
MGQwZDAxMDEwMDAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMDAwIiksbG93Y29sX2ljb249
dHJ1ZSxtb2RpZmllZD0iMjAyNS0wNy0wMyAyMjo0MzowNSIsbm90ZXM9IkEgLm1pZCB0byAuc2Z4
IGNvbnZlcnNpb24gdG9vbCBcbmZvciBQaWNvdHJvbiIscnVudGltZT0xNyxzYW5kYm94PWZhbHNl
LHN0b3JlZD0iMjAyNC0wNC0wOSAwMDo0Nzo1NiIsdGl0bGU9Ik1pZGl0cm9uIix2ZXJzaW9uPSIx
LjAuMCIsd29ya3NwYWNlcz17e2xvY2F0aW9uPSJtYWluLmx1YSM2MCIsd29ya3NwYWNlX2luZGV4
PTF9LHtsb2NhdGlvbj0ibWlkaS5sdWEjMSIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0i
TWlkaXRyb24ubHVhIzI1MCIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0iZGVidWdfZnVu
Y3MubHVhIzEiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImhlbHBlci5sdWEjODYiLHdv
cmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImdmeC8wLmdmeCIsd29ya3NwYWNlX2luZGV4PTJ9
LHtsb2NhdGlvbj0ibWFwLzAubWFwIix3b3Jrc3BhY2VfaW5kZXg9M30se2xvY2F0aW9uPSJzZngv
MC5zZngiLHdvcmtzcGFjZV9pbmRleD00fSx7bG9jYXRpb249InNmeC9taWRpMi5zZngiLHdvcmtz
cGFjZV9pbmRleD00fSx7bG9jYXRpb249InNmeC9taWRpLnNmeCIsd29ya3NwYWNlX2luZGV4PTR9
LHtsb2NhdGlvbj0ic2Z4L21pZGkzLnNmeCIsd29ya3NwYWNlX2luZGV4PTR9LHtsb2NhdGlvbj0i
c2Z4LzJnYXJkZW4uc2Z4Iix3b3Jrc3BhY2VfaW5kZXg9NH0se2xvY2F0aW9uPSJzZngvZ2FsYXh5
LnNmeCIsd29ya3NwYWNlX2luZGV4PTR9fV1d
:: [eoc]
