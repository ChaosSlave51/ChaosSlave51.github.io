picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA2LTE4IDEyOjEzOjQ0Iixtb2RpZmllZD0iMjAyNS0w
OC0xMyAwMToyNzozMiIscmV2aXNpb249MjQzNV1dbHo0AFh1AAAKwwAA8yF7WzBdPXtibXA9cHh1
AEMgEBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIAMp5PTAsem9vbT0xfSw_AP8vgB8Y
wB7ALrBOoE6ADhBOYC4QDgguUC4QDhguMC4gDiguIC4AHjguEF5ILhAueC4gHngeMC5YHlAuOB6A
XkBtABzzEfAGLxuwDiAOkA4QCwAegC4QHsAesE6QbnCOUB4QHhAeBgD-A55QPgBOUC4gLnBugA4A
DgAeUGgAHPQVYE8QkG5wLiEuUC5BLjAuUS4wHhEOEQ4RHiAuAR4RHhEOEC4RCAD-CQ4xDhFekU6h
TpFucS4QPlEuQC4xLmB_MHMAHPMLUE8egI5QrkAuDxIuDS4wLi0OLS4gHj0OPR4GAP8OLh0uHS4g
zjCuQK5APi0_UC4tLmAuLS5wLg0uoC7hAB3-KfANDxmwPqAeIA5AfgAOUD4aPlA_Gi5gXhAOQB4a
blAOGl5gDhouGi5AHhAeGh5gTgoOkF6QTvAGZwAdtQVagHpgmkC6INoQAgCvILpAmmB6gFrwBU4A
HrVfF4B_YJ5AviDeEAIAjyC_QJ5gfoBeTwAeX-8PAdAeAgAGL-4BTwAccGAPGAAOwC4LA_BwHgAe
CB5gLhAeCB5QPhEDQUAOCB4TAz0OCA4VAy8eMBUDK-sGBT8boA4wDoAOQB5wDgAOCxAegA4gGAMg
AwADAAQaAy8DEBsDUk8MDhEMHQNUaA8ODS4MDSADnx5NHmAuDQ8WDSMDJPAYoA8Z0B7AHtAegH4Q
DkCuMF4aHlAOKh4aAA5AHipeMC4aLgoeYE4qIwOfKk5AHgA_IA5QJAO_T-cB0BcCAAYf9yMDIOCw
DhAugB4QLnAeEE5QPicDQFAeCA4pA0BADhgeKwMnME48BjEOCA4pA28eCC5IHiArAzwwQB5gCAAj
CyAqAwMkA0EeEx4TKgNvA05QLhMAKgNKAiIDAAoAPxwRHCoDTa8PDi0ODC0eIC4MLAMBbx4dDxYd
HiwDKCDQDiwD-xMALjCuQA4qTlAeKg4aHkBuGh5QbgoOYC4aXkAeKm5AHhAuKANzH-AxABzwDxAP
Eg8gLxIfIC8SDyAPEiAOAg8gHg0SDR4NAg4QDgcAYx8eAg0eDQ0AExwMACQCDSUA8AEALg0uHS4N
Lv0BLg1SDS4NGgAhAjwGAEEODR4CMwAgAh4KAAQ-ADECDgAaABASGADyDg4gPg0SDT5ADg0OAh0C
Dg0OUA4CDQ4dDg0CDmAOLgAPLAIdgCAfGBAOoB4QSQkEkQOBTkBOEE4wHgjHCTEgDhjJCTAQDii2
BhAeCADfAB44HhAeKB5IHiAeiI8DOFFgDlAeUAQAUUBOQAswkQMBiQMwHgsDAwAEkQMvCxORA1Rv
DxwMEQ0MlANNbB8OHQ4cHZQDMi5NLpQDXw0vFg0e4wkpI7AO4wkgLhqTA-AAPmCOQK5QHgouGg5g
Hhoe4QmfGh4KLmAeAD6QlQOgDzEAHvAIoA8Y0B7wDg7QHtAusE5QDjBeMB4wHhiQCdA_GC4Qfigu
EC4ILhgP-QKvHigtGB4wLgg9CN8CJdADDxsQLoAOUA5gDmAeTQgwYA4w3QLQHhMuMAsgPhMOAw5Q
M_QCQA4DKw7kAo8_Ky5QHgMrPucCRUAcDhEc3QKQDA8cHAEMDRwBDAAwHQwBBABvXgEcIRwR7QI0
4R4fDm5ATQ4tHjAOnR4gBADwCw0fFw0PEg0fFx0eIA4dDA0eDQwdHiAeLR4tMgb-BY4NDkAefQ5Q
Dm0OYA4dLB0OcA5d9AIlIIAq9QIwLjoO9wLwDQoXCi5QOhcKHlA6DioADkAOGgcKXlAKFwoOOmAG
AGAKFwoeQDoHAJ8OYD4KFwqALioIAyEf8DEAfvASsB8YMA5wHkAOcB7wLw7APjAOQG4QHgAOAI4Q
DjAuCE5Q5wLfPiA_GB0YHjAeKB0PF_gCJfASEA8bMB5wDmAO8AIOIA6gDvALHrA_ExAOUB4zDiAO
MA5L6ALxCxMLLxobHjANAA4DCw0AHQseIA0QDgMLLQsDCgD-AhMrDhMOUA4TCyMOE2ADPgMO-AI1
-yAOHxwBDgEdER4gDj0OAR0MEQ4QHg0AHQwBPQEOEB4dAB0BDRAdXj0BTU4RHSEtAf4CPfIALxcd
PA0eIA4MEAwNHBAMCgBQDxINEBwTA0QsHiwNBAP-Di4NbkAOnUAtXB0wHSwgHB0wHRxADB1APUwN
cH0gCAMn-zQwOhcqAA5QKgcQBwoeUCogBwoOUAoHGjcaQA4nanAXCicKYAcABwoHIAceQCcKFxAH
ClAKBwoOCjcKUFoXGnBqwBpA2wIeDzEAf7ALHxjQHuAO8CAO8IEPQPABDlAjD-8BXmA_Pw4eUB4d
Lxc_UC4cHf0CIPAODxtgHjAOAA7wNx5ADlAOKx8agA0bLQ4wDiAOPQD5Av8jAx0gDStQCw0gHQse
UAsdAA0AKw5QXQATDjAOAA0TDQMdGwMgDiADDg0eCw5ADiAOAA33Ai3QLxwxLR4gPQEOAQ0QDV4D
xB0OAQ0gDQ4QDTANDAoA-w09IB0eHSAdAQ0wDS4dAE0wDS49ES0gDT4tIU0OAAMq8AAgDiA_Dxde
DQ4APi0uPRDQAHANAE0ADQ4gAwCSQB0OEB0gHTAtBgD-JFAdEA0QDw4NDjANEH0eEL0ADhC9IC0A
PSANDB0ALWA9EE1QHQAOAD0QPQAdAA5ADH0ADgsDKUIHABcKDQP-IBceUBcwFw5QJzAHGkAOhwpw
FxAHcAcQFzAHHjAHEAdABwpAN1AKUCoARwpwGicaBgOyQCAPGHD6CACqBf8BSg7wKQ7ADxcuoF2Q
DQgOLfQFIf8ZHxrwAA8bcA8agB4QDxugDfAFDvAECyAOEA3wAA2gA-AFDtAO4A7wLyYQHvIIEC8c
oB8QEA4ADnAeUA6QAUAO4A8c4A0CABIOBwD-BhAODZAOEC5wDQ4wHR4BIA4dYC5NMMUAHiEXILEC
0A8XLg0OXQ4ADh0OLQ6nAiAQDqkD8BYdUB0ADQ6gDWANYA0QDUANUA3ADw4ADTANcC0OEA2AHQAO
EA2Q3wL-Cg2gDE2gDQA9cA0QDgA9kA4AHRAMDRBNAA2RABz-MuAPGcAOcCcAJw4wFwAXGgAXEA4w
BwAaB0AOgAcQBwAXAA7wAwfQDvAPB3AXDjAHcCcwJ2AKB0AHGkAHCgdAFxogqQJ-8IAgIAT-IAEE
-g4E-g4UPgR_HxXuBD4Ebj3uBC4UTg0PFD3uFA4UCQQuHQw9-gAMFAoZBA4NBA0cLf4AHBQaDSQc
BC3_ACwUGhksBC3eCi4cFBoJDCQtvgoUGgksFBokPZ4KDgQaBAkcLxkECg0UTQWeBAopBBwKCA8Y
DxkPGARtFT4aDgQOGgkEHxkMCg8fChgA8HIIfQ4VTgkECikLGgQKDx8JChxdPiUuDDoLCiwECixd
XiUOHCkMBAxUHE1_DSUsGWQpTS4NPgkMJTwJNCkECT1_BAkcJTwJJDkEPW4NCQoEHAUdLAQZJAwE
XU4ZCiQJLQwZBBokHARNDh0eGiQJHQ4NDAoECUQcBC0OHT40CQodDg1HAP9jBAwECT0eLTQNCg0e
DQQZBCoEKQQJnQQZBB0OHRoEGQQKBAkNKZ0EKQQ9dAkdCRWNBCkKPRQZNAktFQldEgQ5Ih0kGRQJ
PQU5LRIEOTINNAoUGQIdFSktEgQNGSoiJBokCTIFDQk9EhQpGkIUGhQZIhVNtgELHDS2AbGfIC8U
-yANHxQKDwoAEQkKAKEfFAr-IAgZHxUJCgDxAAcKGRQJ-goKGST_CQQpFAUA8C2eGQQZngQZJI4J
VAl_BCkOBH4ZJB8UJH4EKY4KVC0UbgQZBI4JBBk0LRReFAkEjgQpRB0UXhQZCn4KSWQIAP9yjhka
KUReFCkKTgoJDgQJGjkUDQROHxgkCQQaHgoJDxUECRpJFA0EPg8YHiQpBB4JBHlUbkSZlG6EGQQJ
tG4MJC2EPTRuDB40LVQ9JA4MrjQ9NB0kDB4MnhwOxB4c-gAcRC8VDD4MvjI7DCsi3lJLDCtCvmJr
cq5yO2Lusv4FMv4kKQEc_RvwdvgF8LlYQDgwKIAYgBgQGCAIABhgGIAYQAgQCBAIYAiQCFAIEAgg
CFAKACJAGAoAcTAoIAhACCAMAGFQGBAIMBgMABEYIAD-CRgwCCAIYGggSEAIACjwAhhgKPC6_Ajw
VKMAHvkZ8wXwuVNAMzAjgBOAExATIAMAE2ATgBNAAxADEANgA5ADUAMQAyADUAoAIkATCgBxMCMg
A0ADIAwAYVATEAMwEwwAERMgAP8GEzADIANgYyBDQAMAI-ACE2Aj8LrzowAh_Rr-EAXwuV5APjAu
gB6AHhAeIA4AHmAegB5ADhAOEA5gDpAOUA4QDiAOUAoAIkAeCgAAMRYAPwkADABhUB4QDjAeDAAR
HiAAEB6PCf8BYG4gTkAOAC7wAh5gLvC6-qQAIh8epACP_Rn6BfC5WkA6MCqAGoAaEBogCgAaYBqA
GkAKEAoQCmAKkApQChAKIApQCgAiQBoKAHEwKiAKQAogDABhUBoQCjAaDAARGiAA-wYaMAogCmBq
IEpACgAq8AIaYCrwuvqjAA8PQQYdDdQA8EQ-EzG_LQ4NHi0fEA4BLnFuHR4tDh0cES4BDhgeKG4N
Dw59DA4hHggfGBgeCA5ILQ8ODk0cDjE_DxgIHggvDig7DQ4LPQxhLigPGAg7KCsdCz0BLhIR8i0I
Gqg7HQwNEQ4xOAooOggqGBs9DA8VQQgfCQgKGCo4Ch8MDBgbLQwvFREYDwkYKh8VGigKDB8MKBsd
DB8UAPEBCg8VCik6GAoYAggCKB0ZARQA82wJCjkKGUoYEigdKRgHCApZChkKCR8PCSoYAhgcGRgH
CBpJChkKOQoJBgA6GAwZCAcIOhIGCQpZGg8WBhIWAhoMCScIKhIGBRkKSQoOBg4JBQYMBRYMCBIH
CAoSGgIFAgqZDgYcBgwGDAciBwoiChIFBgoIOQ4JDgkeDAUXAIASCgIaAgYFEhgAcC4MBjwHEgcS
AMAKIgUGAgoIGQEJTkwTABAIPwDwOxYSCkg7DjwKEhoIChIKIhoGAjpYCywOIgoCCCIKEgoCCgIG
BQYRShgLHA4yCghiCgIKCAoBDkEOCggLDgwOIhpiGgIKAgpRDhEYDwAwCggSNQAQCDgA8AERCVEO
CggODA4KEgoIMhoIKQDAKVEeCC4CChIKMggKcAAEEQDwEgIKMhoCGgIqCQEJMQgBDgg_CmIKQgoI
GhkBGREYAR4BDiIAIgoSpgBQKUEOIQ40ACACOtYAXwIaEjlxFwwMHDVTAvA4DyAFHh8ZDh3_DC0J
LgmeBY4FPgkKGQ0_CZ4FrgkaGQ1uDc4FDgUuCSoJHR4K-gEFDgkeKRoJHf4KGRopTg3_BBk6Cf4G
DS4HAOAABY4JSv4EDV4JKh8UDhAA8ApODQ4JGhwK7gVeDR4JGjzuBR4FTg0JCg0MAgCQ-gQVHgkN
HA8YDADwQQgJTBLeBX4JDR4KCwIc7gUuBS4NDB4KDQwCHP4GDC4KLA4JDK4FjgwNDgkNLB4NHP4D
HA4JLA8VDB4MDY4Fjg0eCQwNKP4ADR4FTgkNCB4YUgDwAAg_GD4F-gIJCE4Y-gYJDQcA-ywCCR4d
CF4JDC4F-gENCG4JDN4iCRINBFINDhyuUg0JDQQpDRkiHPIAHQkNBAoMCR05LFkNYi1ZTWlNElgB
HPAqQgMSAyIJQgkPFPIBMzIJMglSDxkiDnIjHxMSCTIZMg4CKQRyIx0CClIKCTIZGgkEchMdCXIK
MgkqCwDxBA0ZIgoCChIOAg4CWQRyDQMNCQpPArAeEhoZAgmCHRMHGfcB8BkJAg4KEioHCWJNIwoe
ChkEHiIqCQcJUl0jGg4KBA8UBDITCgkaYm0jBgrw6AkTHQIDEhkKMg0STQRDDxQPFQkTHhMSDgkO
IhMtEw0EMy8UHxUuIxIuIg8RAy0jBBNPFAk-FQkaAi4yDxEzCRMUCg4-FBk-FSksIg0fEQMLCSME
DgoOGh8UCQwJDVwSTRsJIzoEGhYJHN0bBAkqCR4dGgYMCQxNQz0JWh4tBwoGHAktkw0KFyoeAy0H
Cjwdgy0KFxoJGzMaERyDLQ8QDQkqDksTCg8FERVTDQ8QAy0AHSkNWwoGDhEsQw0QLQBdWxYEHixD
DVB9KwoWDgQMBBwzHVCNGwoGBB4EPBMtUBFtGwoGDAYeBCwTEA1QMW0KCQYEBg4GHgwPACJBXQ8A
sQQGHgkDcHE9CgkWDgD-Bw4JIAQgwRoJFBw0CQQRBNE6bBQMJGHoARzxOJ8ghQ8aFQ7-IAIVDhUO
BQ8bHgUOBQ7-IAElDgUuAw8bBS4F-yABNQ4FEz41zR8TDUUOLxtlvR8TAw1FDg8bEyUOJR0PE40j
GADgDlUNDxMDFV0VEw0lDgURAGFlDQMOBU0QANAVDh8TDxseVQ0TFT0VPgD4BQsuDxMLDlUNDgMV
PRUODTUuGw4MEACQDgsOKwwLDkUdEQDwClUOOwwbDAsOXQUDDhU9NR47AysMCx4FDTUPAPAfFT4D
KwwrDBsfG0UeFT0FDiUOIwUMKwwDCwwKLhUOJT1FCgUOFQsKCwoDDAsMCugAYCUDLSUOBRcAMBsK
GxUAYEUOJQ4DHRQA8BM1GwobAwwKlQ0OLTUKNVsMLXVdJQo1SwMMDgUdAEVtJQoliQDwGAMcCxUd
ACV9BQ4FCiUMCwMMGwMMCw4VHiV9ZQwLDAMLDgMMCy4NDiEA8AhFGwwbDgMcCwUOHQ4dG11FDBsK
DAoLDjQA8QwuDxUOLQtNJRwrCgwKHgsDDAMrHgs9Cz0VDDskAP8OKwMMOwkMCw0rHYtu223zAp0T
bQ8U-QUTLXidIz3pARwAAwzzAxP-IAkPGj8gDxP-IAAPGm8gHw0A8AIILxovIC8TzyAPGo8gHxpP
ICsA8BoCAw8bLyAPGx8gTxMD-yABMy4PGw8TDj0D-gETHR4fGy4NDg3_AgMtHgwF8FoPGh4TDxUN
Cy4N-gcDDSsuDf4GEwstHgwN-gEPGj4bPS4c-gQDLQsNCw4cDf4FIx0LTf4BCi4DHQNNBQ3_BQMt
Ky0M-gUDPQsNCwUBDf4GDQsdGw0RDf4ACj4DDQtNAR3_BQMNCwMtEQ0nAGENAwstEQxjAMANCw0R
Awz_BgMbHQsJAPAAAgoeExsdCw0BAw3_BBMFCwAQBQsA-xADDQULPQsFHV4Nnh0DHXMdPgMODW4d
8wUtNS3zA-U3TQEc8cBVDxMV-gYFLhUeBW4PGw8PHg3OBR4FDhVODxsNDA0LDiyuFS4VPgssC1wu
Gw1OBS4lLgwrbB4LDQwLnhUuTAtMKwy_BT4sC1wLHAsMDW4VbhwbTCt_JX68jiV_PDEsnhWOHAsM
QRweBf4CHAsDAQ8aAQoBDC4FbiWOHANBDK4lng8VUb4ljgwDCSFeBV41bgwkIxEOBR4lPkVeNB8U
BAMRdS5FTjQIFAkDEQNlLkU_JBgECCQhA0UuRU4EGAQJCAQ5IQM1LkVOCBkIFAgEORENAFA5GAQY
KQsAgDVODFkIGQgZDAAA8gZAKQg5CCQAcU4VPgwpCFkZALA_FU4FKQgJAUkICScAcSVOKQgZAWkZ
AKA_DAkYGRE5GAkhDQD-GEkRaQghJQE_FS45MQkBCREZQRUBPhUeCREJQQkBCbEOEQ4VDvENFYAB
HPADIU8QAy4PGg4TLgNucR4DHhMNrR-wYiNOAx4BLgEOIRM_Aw0ODU4DPgMeAY4TDgMVAwUNRRMV
DgMOET4BAw8TLiMVAw01DBUDFRMRTgEMAxUTHCMNNQwDBTMVAU4BBTNFEw0FDAUMAyUDMQU_ARUM
JQwFAxUTDxsFDBMFDQMBJREFLhFVHAMVYwTwNRMFEwEDJREFHhFVQwUMGwMKExUDBQMVARUOEZUK
IwsPGAsVDCMMBQ8WEQUOESUZRQoMAwtTDAUpFQEVITUJNQwDCyMNigDyMBkVEQUhdQwDCwMLAw0T
DAUjDDUBBTFlMwQNFBOFIQURBQolCRMMCSQNBBMZdREFERUKBQwTDBkEAwQdDBMZZRIAwRMMKQwE
Aw0DCQwTCRMA8AkaEwwpAxQNAykzRREFIQU8BRkMEwQTOSMOAPAIZQkTCzMpIzUhFRF1AwsTCxMM
CQwDDQMQAPAXDVUMIwsjCwwFDWURJQEDDUUTC1MMdSFFAw0lDDMlEwx1ITURAw2BANAFDCULAwx1
DREONREDEQD-I0UMA4UNER41ERUDDBURFQwDdR0hHjURDQMlMQwDdRMxDjURE3ETBV5RLuFNkQ7h
Mx1R-AEc8BX-FThFvgWuBS71Aa71Bq51Dx81DWWeNQ31AK71BR4VbkUNHxOgCdDFbjUMYx2VbjUN
MwsPmAHxQw0lDTVuNQ0TGgsfEQoDGgOlDlUMEwobCgMZChkDDcUNFQ0zChsDCgkaCROFHjUMIxoD
SgkaCQoNZS4lDCMZG2MKGQMMRT4lDBM5ChMEPAMaAQ0OAPBRCQsJIxwhAxwBEw0lTiUMAxkLGQME
MQMcAwwqDAVeBR4NAwkKGQMJDBoOCgMMAxwDCgMBDY4RExsRDAMKAw4KAxwjARMNbgENDxkBEwEI
DQEOCQMOGQwDLAMZA24BDwkIFgDwBwcBDgEDDgwJCgEsGRsDbgEaAgMCGgwUAPACAQMKDgEcEwoL
Cm4cCiwNLgwTAP9KDD4cAwoLbgweDAIMPgwDDgoMCk4MCQsuFS4MHg8WAjYKBAwKKT4MAwkuJS4N
JgwGLwYJDFkeIy41LiYJDBkQKSAJLgMZHmVJDWkgCQ5ZDkXZEFkQOTX5DSWrARzxBq8VfxDBfxUP
HA8VbxAPHA8QMQ5xbw8AkA8cDG4hHjEOMR4A8AIGDD4NDiEOMQ4hDhFPFQ0LLRAAEHEOAEJbDTwu
CwDwDCFbDA0cHgEeUQ6RSx0sDoEOkQ4NGxwdHB4BDror8QhxHgELDC0GHQweAQ4BDg0OAQ6BDiFN
Bp8e8BguYR5hHA0cDQYtHg0eYQ6BDC4cHQwdDh0OUQ6RDiEeDA0cPbEeYQ0JAPA0HQcNDpEOkR4M
HSwXDoEOsR4MHRwXDfEFDR4MLSwdMQ4c4R4NDE0OIQwNBw0M4R4dBi0OEQwNFwyxDjEOHRYfDUEN
DK0A8B4MDjEdCgEGGiEGER5hDgEODAsMDjENBhEWGgYKER0eYQ4MCwEMDiENCgYhFlGIAPAFDBsM
DiEdChYhCmENDkEODCsMDhFADHImcRwxDgxLDgDwBBxxDQxBDGsNDhENHIENDBEsAQ4OAP8MsRwO
HB4sewwOsQwOQQ4NiwwO8QQNmwwO8QINTQ0d8DU1fxw1JM8VNQ8cBx4HLjU0TxUUTTUOBy4HPhUE
HxkUrTUeB14fDAVEDRQtJB01biwfEBQfGSSNNR4HLgcMIQ8QBA8ZJCUA8xUeHA8QIQtELRRdJS4H
HgwLIR4kDxkErSVODAshCx4EGhRdJB0NAPUAdH0VHgcuDDELHg0UGkRdDQDxBgQKRE0UDQUuBy4c
IQseDSQaBI0FbgsAQlQtJC0LAPBrHSRNBE0FHgc_LBELHv0ABQ5LDgwODBELHk0UTRQdBQscCy4H
DgwRLh0UvSwLXgwRLn0UXRscC04MES4NJL0bLAs_DBEuXSQtJA0OCzwbDgcMES5BrR4rLAsHDAEH
LvEAThscFxsXTrFuCxwrLkuhfgsMCxEsGxEbkY4JAGAhO4EuET4KAPAAWwELsT4MCzEcGzErkRsu
CgBQewEbcU4JAFArMTuhHgkAL7sxjQEc8DRfFQ8QXxUhHCEOAe4PED4Brf4AHR4dTD0B3h0eER0c
LRwN-gAhLQwNDD0BDA3_Aj0sDQcPHA0BDB3_AQENDA0cDScLDQAQBK0OAwsAUA0cDRcLOQnxKgcM
DRsRDP4KHw0RCgz_CDohGv4GOkEa-gVKISoB-gMqDUodGgH_ARoNGh0BDSodCv4AGg0ODVEKIQoA
UXENAQ0BCgDxBAEdQR0RCv4ACh0RDQEtEQ0BDx0OAP9gGX0BCQr_AA0KDRkNESwdGQruCi0pDQwX
DSkK-gAtESkKFwsJLf4AQQ0JCiwRHRGODxQuKgEJES0xHVFeKC0qCQEaTQkRKiFOKBEtCSpVAToh
Ck5IER2FKlEuiAEtARI1KkHYES0SNQoBAhH4AcGYWgEc8Ag-FTUPFjUuRi4WDkYvFUUOFU42PgYP
HA0A8BI1HiVOFk4fHB42HxU1LiW_HxwuBj8VNS4FDgW_Bg8cLk8MAFHeBg8cPhYAdU4PEA8RDF4Q
APARPg8QHxIPEQxOBg8cTh8VVV4fEAEPEh8RDD4fHF51Pi8OAAINAHKFDj8QDxIxDAAQTxgA_CMP
HAcRPgYNXgUPFVVfEA8SAQ0PEAxOBg1eLxU1PxBPEg0PEA1OBg1OBS8VNQ8SIRsRCxIAMgEbQRAA
8QUdPhUvFSULARsPEBshDQoMTh0uJREA8QELKhsRDQocPh1lCTULAQtqDAD2LUU5FRFKDSoNCgwL
DC4dNTklASoLEQsNGg0KDBseAA0GNSklATohGy0KDAELDBANBkUJJQALOgsBCwEbHRQAcgEVEWoR
GwwRAJAdVTEqAToRGw0PAHENEB1VARs6EADwAAsNAQsBEB0VLAURGwFqEWgA-yEJAW08KwEbAUpR
DQm8IQsAASoBKjEKDSlcCSwKKxErIVoMDYkcCfoDDC1pHPoGHXnpARzwCREMLxAMIS5c4QweDBEu
HA5cF0EMAQ4MMWYUEAwsBPBCDxwMTQEMDUwRDBEcER4cDgwOTB0MBx0MYQwRBwYeLAZsDTdxDgYM
FgcGLAYsBywNBy0WIT0OAQYRDQYXfBcNPAYRDQcNDgxBHmwBDg0GDkwGGQbwOh4MMS5MEQ4NBj4s
Jw0BHgwOAR0eDRccLg0XDR5GBxwxDi0nDRxOHU4cBwxRDhcNBx0sASw_LAEsYQ49EQ4MBj4MHgwu
AQxBDTH8BTAGDg3EBgAGANEODBbRDhwOBgcMDg0MBwDADBZBFg5RDBYOER4N7ijw2Q0MFiEWIQ4R
DREMFg1ODD4NDCYRBjEOIQcBDBYODS4cPhYMNjEOQRwmDX4NFiwGEQcRDjEWDDYNDA8SHxgPEgwN
NiwGYRYcFgcWAQ0MGwwNAQYHJhwGDUENLCYXBg4BDRwNAQ4HNgwGAQ1BDQEcJgwHBh5BDgc2HA0h
DhEMHQwmDAYHDB4xDhYHFjwRDkENBwYcFhxODAYXFiwODAEOISY8BgcNHC4cAQcGHQYsDgwOAQwG
LDENDgcNHAYcLgcdBg08DgwBBiEcEQ4dBw0MBh0cHgcMLSwODAYRKx0_Bx0HDU4MBg4MBh0FAIBB
Cx4LPi0uDSMB8QYWDQYNDgYMBg4hCy4LDS4NXgYeBh0TAHEOJkEbbiYuDgAPDQcc8C1xPxAPFwwP
Hg8QDA4cDxVOLR4NYU4PHgwPEg4MPi0-FA0eDUEuDB4CDx4MAg8dDjweDxRNDh0hLiweDxInAPIC
HQ8SDjwuHxQNCw4NDg0BPjwYAHAKAg48Pgs95zDADiwuCg8XDAIMHiwO9w-gLiwODC4PEgoMCQwu
DB4tD4AdES4MLgwuAhMA8AJuCw0bHSEOAT4cLgIJCgkMbnUl8HQhDiEOLD4pDB4MDg8RHggDCx0P
GGEOLA8dDxcaDw4JBwweDB4IDggOAwsdIQ8YAQ4BHhwPFwoPGAkdCgYMDgweGA4YDgsdIU4RDA8d
KQoNCQwOHC4oAw8TDZEcDx0ZBQoZBg4cYw8TC0EeAR4cChkVBg8NCg4MAw8TAwQDNAMBFhFeDBYA
gAwKDgOEAxENjhf2AAEeBQkFGQYPDQkKA2QDBBYA9RYCCRUJAAwKDCNUAwtBDiEeEjkADAocDgwD
DB4TFkEeAS4CGRIZEgDwAQsxLhEOBw4JAgkSGQwJDB4VABEUFQDyGQoHAgkiGSweLA4DBBsxLhEK
BwoHCRIpDD4sDgQDCw4xHhEKB0I5LB4PAGBRAgoHUjkdAPADAwQLDkECCgcySQEJDD4MDgwEEgAQ
MRIA-zc5IQksHgwEAxQbDkEHEgkRGQECBx8XCRIMDhQTFAsOgRYRBlgWARQDBAMEGw4BBrESKlED
JAse4RoCClEkGx7xABIKcRsu4gce8UYUXB4sbxAfHg8ODx4-DgEeBA4PEEwePC1fHh8dHxISAQ4U
DgEeDC5MDT8ePx1PEhEOBI48Dx0fHl8dTxIhDgQOAS5crx0PEhIbER4EDgENbA8dEiqrDADwDBwm
HAoSOpshHgQODRwGBwYMCg8OAhoLCisiAb0F8QALIQ4ELgwWHE8eSwIRKwIQAPAPHkwKDw4aAQ0K
KxJLAQsxDgQOHTwZCiENGhsCATsCEQDzdh4NTAkaIRoLAhELAhsCMU4dPAsBOjsxIgsCMR49LAo7
ARsCQRsCUR5NLAohCxJRCgsSMS5tHAECGwJhCisxLi0PDz0cAgsCWxEKKyEuDQ8NDQUPD00MHw2B
GhshDgEuCBU9KC0oCgsRGhshTggFDxZNCC0YDQgKCxEKC0EfFT4VDghtCB0QACECI_oL8AVdCB0I
GgsRGggLIQMCEw4BLgEITSQAERsTAJATAhMOER4YLRgSAPEOAQsaCwghYw4JOigtChsBGworIRMy
Ew8eAwAbGC0gAMEJCishMyJDGzgKGxENAIATApMBAgoPABAA-ykaKzECAyJzIQI5OisxEhMCEwJT
ESJQCzELARMCAwIDIgMCMyECawELASsDAhMCA0ITEgMRElsBSxQCHPACAQ8cDA8O-xUHDxIRHAEM
DxwNAPAEBQwvEh8cIQwODxIvFR8dDxIfFV8E8CAPHV8VDB8dDg8SDhwRDw4BDxIOLT8VDQsSDQ8d
KwwPEA4fHR4MDhECDw4BDRENDhkAUAIRDQIL0gTwBAoPHQ0PFwEMDgEfDgsZAV0BCg03BvALCg4a
DjEpKxkNAQ0hDQsKDSE6DgwxGRE7GREJCvBPES0RDA4BCQEJIQJbGR1BCgENIRIBGQIhAlsPHgsZ
Hx8hCh0hAgECGSENAmsPHgEPFxkxCg0RMhkCIQ17Dx4BHxcJEQIPHRpBGQ0CER17Dx4RCQEJAQId
CmESAS17CFkAwBECLR8dHUENAg2bCGcA8JMBHScdMQ0CqwgCAQIBEg0BDRcNBw0hDQINuxgREh0B
Bw0XHRENAg07FFsYCQEdAQ0CDRctES0LVEsYCQItAQIXDQcJCA0RDXRLCAkICRINEQ0HOQgBGQQq
NCsPDQsoDxYPDw8WAhEJLw8CGQEZKhQaBGsIBg8HBh0PGAEHDwcGGQ0BCSoNCgQKFGsICR0JDxgI
HRkXDQELDgodKgQKCwQbBxsYACEFCJoA8A8RDC0aHRokKwQBCAkBCQUYPREHDg0YLSpkGRgJIQ2f
AIAHKE0KDVQKCY4AIAEbQAvwDgcJKA0IPQQKBBoEGgEZKy8NIQ0JEgkoDRgNCg0EegD-Ig0KCQEJ
Ez0RGSIJOD0KHQotGVEdAQkIQglIXQgdGSEdAQkRIh0SGZg6IR0xEgE9EhlxAhzwHsVfFtUPDnW-
FoUPDgUOVV8WDh8YDl8WVQ4VDhUKCQUuTR5dHkUOFQEOBRoJL1cl8A8fDQ4tHh8dDg0VDg8SFQEO
Hx0aLxIPHQ4NDg8eDw3kBoEODQ4fHS8SDpsC8FAVATwKCSwPHQ4fHg8NDB8eDg8dLAFMASUBLAoJ
AjwCDx4cCwI8AhEsATUxCgkCHDIbMhwCDTENNU0KCUIBHAFSXSVNAR0CIQ8NARwBCCECHQFNFU0B
HQgOKDEoDggdDA4A8BEMDSgsESwoDQwBTQVtDA0IDxAIHAYcBhwIBwgNDAHNAaIP8WQIDwcWBAgM
Fw0c3QEMDQECDB8dFBMMAgENDAHdEQgBEgw2DBIBCBHdDAgRIgwGCwwiEQgMvQ4NDAgRAg4PCwwb
DAAOAhEIDA0OTQU9Bw0MDQgBAgwODBMMDgwCAQgNDA0HPRU9Bw0HDQgRAhwTHAIRCA0HFADxLAwH
DBgRAgwIAwoIDAIRGAwHDD0lXQgdARIMEQkSLQhdNW0MIQwyDCF9RU0cAQwBDAgfGAgMASwBTWUt
IQkwETgRswrwIREddR0OHBEMIRghDBEsHVUDLiwGARwBDwwRBBEMEQwBDC4BJRMMAxxBDAEUDxwE
ARQA8BRMHgEDAQwDDDEMAQMMEQQLEQwDAQwhLBEOEQMcASwRDC0ULfcK8AAMARwRLFEDBhwxHAYD
IQx2BA9DAhxgPxIvEL8S0AzwCk8OLxh-Em8QPxJPEB8OTxgPDg8QPxJyPxAjAGAfDg8YTw4iDfAo
Mp8QbxJ-Dg8QDxIybxACDxIPEH8SDw5vEkIvEE8VDxIijj8dHiI-EA8VLgFOAl5-HSIfEB8VHkAe
8BsRAg4CLn8OHhIfEA8VDgEeEg5BAg8OTj0ODR4CLxAPFR4BAg4xDx4hAh5dICItAicA8BcOAg5h
Dx4BAh4NngINDxUOAgESkd4CDQwOEgECAR4BAjECXg8dHqMMUAINDhIBixJQEg1eSy0OAFAPFhEO
IX0E8xZeWw0LHQwOAgoRHiECEQJOax0bDQwOAiEOMQIRAh4tHxcdCy0GEwDCIQwBDxgBAgEtPxdN
FABCCgEOMRUAQAm9FgsSACERDqcB8A0JEQmdFisNHgIBChEcIQIJEQlvFxZLDQ4CQRwxDgDwDAs4
BmsNDgIcEQwOGzESEQkLCA2LDSwBXAseER8AkAIrDw8KKwMLFboB8AFMDg0REgkBCQJvDAMHFQwB
FAAwPA4hEwBQZw4HFVzmDPAUMQIBAkcDBw4HJQwhPEEOERIRBRMHEwcOBwwlPBEcIwUTMRUxF-8C
Aw4HHOU8pSy1XAUsFRwl-BAVAhzwL_8TLxEEzs8THgQOCX8aXr8TLgkPGgqdPq8TBAkeDQpvGU0u
rxMeCR0PGWkMPS5-EwQZHg0KHCkqGQw9HpsOfifwAVoZDC0eix4NCRoMGSoXGgkOAGEOLSwZGicM
AIJ7Hg0aFCwJCg4A8AlrBAkMChQcLxQMGhcKCQw9HnsKCSxYDDoLAPICaxxoHxUYDCkMTR5bCQwL
lhgKAPEbGwYJBgoWCSYIPF0eWwkLCJYICY0eSwkMCwgWCTYYBAmNLjsEGQsIVggdDACkCQsJCwgm
CQYIBBAARQobCDYOAPAXOwgGFBYELQQJbT4BKwk7FgQNJj0ECV0_ASsKOwYEHSYJLRQZLU4OAPAR
CQQdBA0GDAkdBA0ECR1eAXsECR0EHQYJLQQNCR1eEWsPAP8oLQwJXW4RawkEXQYJTX4RawkGXQYE
PY4hWxYrLQYILZ4xSxZLDQgGDb5xCwZrCAYLvoEGYQgGwaQBHPEb4X8TDxYKPi8T0X1OCg4twY0J
Ci4NDi2hfR8NCh0eXZF9DAkKrYF9DAnNBQDxlHGNDA8ZCb1hrRsJrVG9DAsZnVFNDm0MGQuNQV0O
fQoJDI0xbQ5tGgsMPQ49Ma0JDRoZCz0ePSGNDi0aGQtNHj0hXQ4NHh0qCQtNHk0hPS4dCw4NCgcK
Dk0uTSFNDgsdDh0MGi4tLk0hXQ5dDA8VBB4dLl0hTS5NDAgEDQ4dLk0OIV0eHQ4dGAQKLS49HiFd
DgoNLgoECAQKHR4JDi0uER0eTT4QAMAtHj0OCw4RLQ59DgouAJA_DT4RXS4NCx0OAOANDg0_DS4N
EV0_PSh_CQkA8BhOHQ4IDggJjgsODRFdHgtOCB4Irg0RPQodbgoeCAo_CT4dEW0ODS4bCYEabj0R
jQpOCgkAf50_GQ0KTm10ARymHxPyAE8SbxAfEgoAYi8TsgkEAgwAkU8TQg8UXxUUPw4A8AdfEyIP
FGEfFQQvEn8QDxJvEwIPFJEPDwARbw8Akw8UIQ5xDxUEHxAAQA4BHgIRABAvgQVQEm8TAS4PBWEZ
DxURHR8TAPAHXxMEHgIeAQ8SPg0hHQxPEBxfEy4CLvoQcA0xDQ8ZDD8SAJQOCyIOHA4EDB4TACJL
BBMAZQkcDhEZHxMA9BQSHgwEDiwOAQ0JDwoPGSwvEBxLCRsCBA4EDA4EHAkOER8ZARUA9QAOFAwO
BCwNMQ4sKhw7DgQRAAAcD7EOPBocOw4rBA4CBBQAEAzvEPsODiwKLCsEDisOIhwOBBwNDA0JDQwO
bCsOKw4EEiwSABUiEQCYHA5MAhseGw4EEwB1PBIbDisOCxMAgiwOLCIbDhsEEwARTBAAVgsOKw4b
DwARBA8AIDwODgD-SxwyDiseKyIsDiwpDxkcDlI7DgQrMhwOLAkfCh8ZDAQOQisEDjtCDA4cCAkv
CggcDkIrHktCDgwIGScZBA4EMhseWzIJFBk3FBkIFBIbDgRbEgkUOQcZBykYMjsCHPADfxUG-g8G
-g8FJh4G-gwZHgb_rRrxIg4G-gkJCg8ZGQYFrg8Tjj0KDxkEAQRdTi1eXQkKBAECDn0OTU5dCQoM
ARIOzV5NCRoJAAASABAcHgAACgAgPBEHAOpMBAEO3T5NCRwEHAQBBAoA9QQsBAwk7S5NCQwEDAQM
NO0ePQkcCgAxDAQcCgAQTW0t8B003S5NGQEfFAwkBt0uXSEbJAUG3R5dCQsRCyQNFQZNB10eXQkh
CxQLLRU2BQwAhAsBKwQLTTVtCwBh-QgJCwFLBgCgCwEr-QgbUf0IDJsM-wX9AxxaEQwRnFocCpwq
HBosOhwKTEABHPA4nxUWahb_BAYaZhoG-gIGCgcaTgoOBgoG-gEGCi4-Ei4KBgoG7gYKDgoOHQcG
HT4KBgreBgoeHQYJAQkdLgYJBt4KBh4dChENABAKDQDwFA4tChEPGS0eBgq_Ch4KBgodGhkMPQ4G
Cu4KBg4dKiwKHQ4GDhfyfy0MOgwJLQoOCu4JBh0cGgQZLQmuCj4NBgodPAQZHQoN-gAdBgoNCiwK
KQot7h0WGiwECQ0KGS3OLQYaDQocBAkKHQkKLb4tBgoGCQoMCRQ9Gi0Wji0aBgkaBAkEHQZNJn49
Cg0GCRoUCQomPSYNbl0KCSoECQo2LRYtTj0KHQoJOgkKBp0JDT5tCgk6Ga0JAPABGgwKKY0JHS5N
Ch0JDAkKDNwocC0KLQktLn0QAHEJChkGCgmdHwDwCAopCikNCgmNHn0ZChkMCjkNCglNCR0eRQBQ
GQwKKQqtAHEdCS0ObQoNEgCQDBkaCY0OfQkqDABAKSoJzVcSAg0Ac3oNGk0KDRwbAC8MmsABDA9w
Kh4PMQD-------8g8C2AEATw-4VbQCsQWyA7gCtAKyA7ABtAOzA7QFvwGgswGzALMAsgCxAbIAuA
C2ALQBsgG1ALUBtgCyAL8BoPAGQLMAtQCzAdAOErQAtQCwALUAvwHgtQCx0AIhvAGwCDCwALQAtA
CxAdAKQbEAswCxALMDuQHwAgGzAfABAbIwAi8BshADM7YBtZAAGCAIUwGyALQDvwGz4ABh8AESAS
ACQwCz4AAXwAEqCXAAAZAGAbAAswazB6ACFAG5cANAsgGx0AYUArIBtACx0ABfAAAR8AACkAICAb
xAARIAQARCAL8BkqAfwAW0ArQCtAGxArMDsAW-D-YkE2Ny42AQATN4EBQjYuNzWEARwylQnzFLA-
IDbwBW5m8ACOhsCelqCupoC_tmDOxkDe1jDe1iDe9gAQBABPAO72AQMAAhQAJQAx7uYgNgD-CUDO
xmC_toCupqCelsCOhvAAflbwBU4msB8CCx82mwAceT4obmYoVhAHAA_kAFsO9AIPMQDQAbgDE4CO
AvkBoBtAG2A7QFtAiwArIDvwEbgDcZAbQBtwG2DKAiIQG9wCRyAL8BC_AwEjAAG4A0IwC2AbPQMl
8BDCA5bQGzALAAtgCxAhADcb8BTEA1KgCwALICMAUBtACyAbIwAQMIgABcYDYRsACxALEEYDqUBL
cBtQC2Ab8BDIAwBAAAJhAAAGBAYjAAXKA3MgGyAbQGswXwAYcMIAAMwDETDnAwLtAxFQxAAQIEAA
CtIDASUAAoYAFQslABQP1AMxK2Ar0ANQKzArIDsEADvw-wKUAUMzNC41lwEvLTIhPATxEbB-IPAF
3vAA-gLA-gSg-gaA-ghg-gpA-gww-gwg-g4QAwBEAP7wAAwAESAbAP8HQP4KYP4IgP4GoP4EwP4C
8ADe8AV_sMwFDA98ABq-PkjOSC4QTijuKD6CAEQOxwIPQwfVF3qLA3AwWxBbcEsQSwcAFgA9K-AB
kQMxQAsgfQIAfAYCyAIDhAYVAtUCEzApABJg0wIUC_8CAycAKFALnQMEJwAbgCUADaMDACEHAtYG
GpB3AAErAAerA1JAOzBLQCUAKktQTgAGrwMCTgAjEBspAEgLEBtQngAEtwMhMAt-BCEbgJgADeoA
Bb8DAMUAIhsg7AAjCzA1AS-wAsUDAgBAAVFACzArIMUAAvIASDAL8AHNA3BbECswKzBLqwcwMCsA
igEb99kBXS03LjE2qQc5NC4xvwcPtAcE8xM2PyDwBWZu8ACGjsCWnqCmroC2vmDGzkDW3jDW3iD2
AN4QBAAUAAAHDAMAFAAlADHm7iA2AP8IQMbOYLa_gKauoJaewIaO8ABWfvAFJk6FA-8QD7YDIxWP
LgIxQDtA_wVLIDvwJPcKMVA7UDMGATcHFSO2AgD1CgB-AgIMAAAUACfwI-UKUSAbUBswSgBJIBvw
J-EKNCALcKUDAG4ABXoDARkAAk8DS2Ab8CNwAwEbABELFwcZI2ADIlAbdAsYcJ4AIiAbngARYKwL
ECA0AApGA0NQS4ALGwAXIgYBMZALUPkGDNEKFTL3Bj8wLjLGCgbxD3bwBdbwAPYCwPYEoPYGgPYI
YPYKQPYMMPYMIPYOEAMARAD28AAMABEgGwD-BkD2CmD2CID2BqD2BMD2AvAA1vAFdvIC-0YVf_wB
ALkMMBAbQAYAEFv3DSzwDvgCIRsgIAIAbAICCgASQAQDGQ0EAwAGACBgK9EGEWDUAgAaACbwDaAG
AVYAEWB7BgUjADkb8BGcBhMwSgYiABuhAgMlBgCUAAQeAxCgGAMhOzCcAEEgOzBLCQMXDSQDEaAe
AwI8ABMQRgAkEBsnAAMwAxGwKgMRYBEOESCWBjhAC3DSAFAgG7AbYBkOESutAAGQABAgQgAIPgMS
wDoDBCIBAXwGAScAEwxeAVDQC1BbEB8OAYIGAVYEL-8ArAELHTNNAy9-GUcKNw_KAh4PTgP-FBN9
8AFCkDtQO30NMABbQFQDOSvwCE4DEXBDEBFQDAAF8AkBWgMn8AlOAxFwCAAgAAv-DAIWADJAK0Al
AARQA1iwG4ALECEAA1oDACMABVIDIJA7awAAKA0DawADWgMl8AlQAyCwG08RAyMAEkuaAAlGAAEj
ACQLMCMAAdwJAloDBY4AYKALwAswa9gAAQIDIxtAWAMH1AAyIBtwug0B-wAE1gkhQCslAAhUAwEn
AEMLUBtAqw4RQO4ARSAL8AhkAXMgKzA7IDtgzgkAfREr8PuzAUM0MS4ytgEuMS6hDQ8aAhQPDwP-
JhiNDwMBTBQm8CXlAQMHAyBAO4EFAUkGGyT7AhEgTwkAXAUQMB0ABvMCQlAbUBuvBSnwKOcCAFMA
EBCpBQBqAAbbAhMQFwBJYBvwJNECChkABcUCExBgABhwlAADuwIFlAAQIDQADLMCIEBLfQMSIB8A
GCMAASFbEPcFGwlGASYxN0IQHjFICQ_sARMPMQD--6rwDMjIBP8VuwBuAA4A-gMQ3gAuAB4A-gMA
3gD_CwoA8TsJAL4QHhD_BQBeAE4AbhDuAE4APgD_BAAeAD4ADhAOAI4A-hgAThCeAC4QHhCeAB4Q
-gkADgCuEL4A-gwgThA_AC4AbhD_AwD_DGMA8BAuAF4AXhAuEB4AHhCuEH4AngB_EC4ALiD_AgA_
EG4QIQARTgQA8Af_GwB_AE4QrgAuAH4AHhAuEG4AHiDeLgAQEKIA8Q-eAB4Q7hA_AH4AzgD_MAAe
MB4ALgAuAN4AfgBeAB6lAAACAPAKHgAeAG4APgBeAM4QrgCeAP4ZAI4gXhAeEBsAES4tACC_AKQA
ABAA8QcOAJ4QDgCuAB5A3hCuEB4A-jcQDgBORAAxzgA_mAASDo8AAQwAEM4aAAGNALB_AP4CAP45
AB4QXgkBEACjACAuECABEW4sABGOLgEARgAAKAAQP0EBEAF0AFAQHgA_EFUAMe4QLqcAEw4WAIEe
AP5WAG4AXnIAEB4xAXEA-gcQTgCeIgCAbiBOAG4A-lIcACEgPr8AIf4HuAERPmABAMoAAEwAEW57
AMP_SgB_AC4gTgBOAH4hAAA0AAFVAQAnADEQ-mPjABCuEgFwEM4AbgB_AAYCEH4CAXJeAE4QXgAO
SQAAEAIC9wBQ-mgAngDdATFuIC5eAQApAsEQ-hwF7gXeFf4cAH43AUFeEP4NcADwAw4Q-iM1riXO
BR8WBf4VAN4AngYCADkC8gUeAP4aBQ0VDa41rjUNDgD_FCC_AMoBEY6VAPAH-gcgngD_HQUNNZ5V
nlX_GDD_AwBuEFsA8wPeEP4BAP4bRQ0FnlWuVf4XAC74AALfABG_RQAgLhA-AVD_AAD_GCkA8QQF
DVWeRQ3_GhBOAI4QXgD_ACA_ZgARHi8BUU4Q-hw1JgBxdZ5V-hwwjsQBAvABEx5PAQCJArD_HVWe
BQ2FrlX_H3UAEDBMARF_4AEBLgIxEG4QsQAxrqUNIwBRPgDOEC6QABDO3gFwAP4ZZZ5VHokAMAX_
H0cBAZkBES7qAuJuAC4Q-hUFDSUNBZ5lHrMAESUoABFeuwEAKgAg-gAFAiEgHkwCYQdlnmU_ZUwA
UBEAvgCubgAAJADgLVWuRQ1OZa5l-hEA-gbbAJAKIP4lDUWuZV4VAABQABBu7wMg-iwpADAFfmUG
AEH_FwCuyAFTLwUNRZ6GAGCuVf4cEE7_AyIQfswD0CZVnmW_ZZ5l-iAQngBgAFAcZZ5lzlcAExRi
AgGuAhBuEAJQDVWeZd4bAFMQAK4ATqICEO6UAfAAJQUNVb51nnXOVf4eIB4QsQNQjgAuAK55BKAP
Vd5VDQV_dd5lXATxDwAOIB4QfgC_AA4AXiD_HwUNRd51XgUNVe5V-iIATrIEEC7iALAhZc51XmXu
Zf4oEEwAEV4FBPEF-h81DQXedT5VDQXeZf4SAP4VEF7MAwBJALE1-gANVR517lX_KpECAZ8AcBD_
J1XudQ5JABEpqQQAtwHxAw4Q-iVl7tX_AFX_JBAeEF4AjuMDoP4qZe61-gBl-jEGBAFVBID_KVX_
AHUNBRYAQCoAngACBACLALH_I2X_AHX_AVX_NXwDAD4Dgv4kVf4ABQ01LgAgJgCXBBGewwIQbooB
YBk1Df4CRTMAICcQHgQSnrYBURT1RP4hsQMiXhA_AzBVDbUCAEIdFT31TgBQGRBeAH6CAVMe9UT_
JMICsK4A-hX1QQ3_EiDOPwUwAI4gawLwBWUNFQ0VLWU9FR0lPRU9BZ1lLRUtvwBwHAC_AE4gPmQA
cRj1QP4dAH70AAAHAyD_GGYAAAoAUA4NRf4QfwMiFTCpBTE_EG7SA3BFnlX_D1WuwAEA1AEC_AFC
HgD_I9QCMDX_DUECADIDEV6rAaP_JFWuDUX_DFWu8wEBFwPA-gEgTgD_F1WeZf4KMABRGRC_EA5m
AAANAST_FacCIP4KhAASIoADIACuowBgH2WOZf4IbgAwZf4lKwMRPqgFQL4A-gq9AECeZf4HVwAg
HSACBRCeIAERECcEADcAIAZFugNRFQDeIB41ABCuvQFAjmX_BIQAMRcwTkwAMS4gbgQFAP4CMVX_
BL8AExjHAxG_pwUg-iY1ABACHwAhKgBvXgEGAQHvABAdGwAQALkDIf4gIwIAgQASbpYEMB5Vjo0D
EACgAHENAJ4QXiCOPQBSfhB_EE7aABDuDQXBGgBeIA4QXgAeEL4QYgLAIEWeZd5VvgUNFf4lnQIR
ABgD8QJOAP4hNb5lvmXOJf4sAM4QHoQAsf4iBe5VvlXuFf4nzwARruoAQE4A-jGwADFBAJ5sBpBO
AP4yZY5V-je8AEIQrgBelwHAM1V_Vf45AG4AzgCumwZAM2VeVVwAAtcGEU7rAdEuAP40ZT5l-iwA
3gA_XwAQDn4BYThVPlX_LRQAEd6nBSD_NekEQv4vEL5RBgQpAIE2VR5V-i8AHogAAogBER5mCGH_
OKUN-jSNAhFO8AERnjMAw-4tBQ2etZ4V-iEAXq0HIP4AWQWRAP4tJa6FDa4lagERPjcAIR4ASwFQ
NUWelZ5gBTEgAL4aAFCeAP4FEJsEQDWuda53AxE_5wMRjrkFEL43ASEdVRMFMiIQ7kQHIABuBQUR
J-ICARgAEY5MBhRu8AcwLmV_6wERJSwAAOEFwF4Q7iD_KlUNfg1lfucBAJ0CAWEAkf47ZV6FflX_
JicAM24QfjACAF4BgA2FXkUN-icAIgISDlkAwThlPqVOBQ1F-i4QTi4AEQ46CBAOsgFQHmUORS4c
ADE2AA6dBgDJBkD_NFUeAgAAfgMRKKUAAhsJALECkP46BQ2lLkUNDjUAMiwA3slhAbwIcf42tT61
-i9VBxI_oQGxEP48hQ1OBQ2F-iyiABA_hQIwAJ4Q2gWR-imFXpX_JwCeLgYQDhICAJkAlf4ydX4N
VQ3_MBAJAZ4CADMEIP4ogQYxdf4p-wQRXroBMJ4QTkkEgjJVng1F-ikAFAgAXQJQEP4_Na7zBCH_
KeUBADEAAEgC0P5ABQ0FvhUNBf4oAL4zAgGIAxEuJAhQKhXeDQXMBQFhBgFrAxAApgEg-qBTAJEe
AP4BEP6WAH6yASH_nWcAAG4AEJD4AxED2QBjjhD_fQDOcQIAcwBRngD_gBDJCgLqA0EBIP6H4gEC
vgURPmMCMR4QHi8AQe4A-mbBAACBAAEfAAFXBlCuAP5-AFABMT4gvvIE8gHeAE7QbvABPvAAzmCe
4K7wRwMD8AoRHqQDACcAgK4AThAOBR4FOgjADgX_AgAOBc4FrgCOjwXBBc4AngXOBR4AzhBeXQEC
dwARDnYBAFkBkA4tBBVNBA0EDroA4B0EBQ0EbQQNBE4tJI0F2gHxBwVdBR4QbgQdJE0UBQ4Qfh0E
BQSdBQ5GABI_vwsBBQQTDosAgA5VDgUOBQQVjV-AAA61DRU_AA6FDiUELQyADgUNBQ41JAV6ACAO
1agEoQ5VDnX_BhBOAH4wAgC6AGEQDg0VDjAyAME_EAUEFQ5AHhVOEA4JAOANBQBOAAUEDQVALhUN
BJ8JAi0AYQQ1jgAODSsAIA4QmAsA9GsA7gAw-gwAQwByAB4QDiUEXgwAcU4ABQ1eADWgAABRAEAF
FAUOS28QNRsAFA4uAAHMBgEwAFEuIAUEDt8MAZIIES41AQDDChN_IACCEAUNJU4AJQRbAABYAPEE
NX4NBQAuAAUNBAUOAG4QDhUEBW8AMQQFBAgAFhVeAADQABEOywEgThBhABEeVgMQjmcCEi4iACJe
NV0AEN4PAEDOAA4lUGUCvwAiBBUHABAlNAdBBQ0VDlUFII4A_gMh-gjuATJOADVlABEVCgAhbhAM
AHB_EB4QNb4A9AAWLkcAAJcAEV5JAQEoACD_BLwCIBB_-wIAcABBEAUNBTkBEl69AABAACQArkUA
EhXbABU1iwARnugCEl7YA0H_BAA1SwFiDQUQLhAFcgAhHgCTAQCQBgLbAAJKABUlJAEAUQIFLABA
LhD_C0cDoRD_CgA1DkAOJRAYASFQBXIAACACMA4FLpMAAkkAEh7JAAGaABQFbwEALQABLQsxfiAe
PgkAdwEArARhBQQlThUOCQBDFV4FDVMAhF4EBQAeAEXeUQAAwAEhMA6SABV_KgCQbhCOEB4A3hBu
cAIAwgTiNQRNBC4AbjUEDQUUDRVLAEUlFB0UTAABswEQPo4BAuAAIQRNUQAw-gQQ3w4CgwUAYABg
hQQVDhBO8VECkgAQRfhSEA1HADUFBCVJADANBDX4AREFulJAFQQOEFABAroHIT4AawMhEI4WAgC4
ACIwHu8CADoBIUAOVgCSNQ5AFQAuRQDOUQAyNQ5FTwAyFQ5ArwIQvkAAARkOADQGEZ7TCgQ0AgOc
AjI_ABUyARAOJwYB6QAAsgcBUQAAkwABowIRniEAACQEIBAFBwAC-gQC8wIRLv8KAPsAANkIAAMC
AIcDNSUEBS0CAsAAAAcAIw01qwCSJQ4gDhUNBQCecQIAoQYTHgIAAJsEFC5aAEEADhBOQgcDRAAT
TtABAg0AAdEPAQsARj4QTkXRAgASACQOEKYBAmEAAMoNEc67ABEO5QYAEQEBtwQDSwABVwAQNc0B
A1MAEZ6YASkAnlUAIQAeJgMSDqICEn5bAQECBxIuLg0CqAlwBQQVbhA1TmABAPgPEg5QACAORVQD
AGoAEj4TAAriAjQAXhACAQCjDAD8DRFOsQgUrlAEYT4QDjUALrcBAFUAA6kAAfcAkxBeEA4FBAUO
EFsAMT4ABbMEFG7gACAVQJMDAEsBAn8NAKoLAg0CEFAXAyE_EOUDIw4VVQCwvgAOJQQOEB4wDiWD
AQALAgF2BQAIACBOEFQBAMRcAFgDIRCOSgAQXvgEApgDAJ0BISAOOAERHicDESXrACIlTlIBIL4A
qAIAKwIhDQVKBgB6AGIQDgQ1AE4sAGEeAA41ED65AhFeWgARXooRAM0BIQ7lSwAxxQQFJwCAZRC_
AA6VBAUlAEIORQQF0wURFfwDAiUAAhQJAEEHANsJABIJUD0kBQ4AbAkxVAUEzQLADlUUBc4QHgUE
BSQVDQ5ADgUERVMAIR4QDQcAWAGRNQQNBBUUJRBujgEx3hA_5hFgDgD_NCB_VRMgXhCUDCEwHq4A
ES5cAQFoAvABEN7gfvAAPqD_AUAOAL6Qbv0OMPABTiUGEQ8gAECeAP6BhwITEvMBASoOEWnMCQAI
AjL_ARANA1LeEP5sAHgQNW4AvmcAEB44EiL_AVALAA4AMwAQnuwJ8QteAN4wTvAEfhDOIG6gLqAu
AB7wAY4AHqD_AW8NEX5gACB_AIEBAdMHAAsBESCACAHpAVGVDhAOlRMEMHUeVYcEIA6FegFAPgCu
EKQJEV79A-IBjgBuJQQFBAWNJS4Q7gAOHTsAYBUUFQ0FLjcBQg0VBCUTAPACBA0lLgUNNAUQTgBO
JQQNFa6QDgC6ABE_7gIRLkEDUB4AHiDVNQBTBQ4Q7iUlCBA1BHTARSBeEA4EDQUQDiBFBgAxAG4g
7QJA3gBOIIkAEe5GABE_1AARnroCYHAlDRUNBR8CEjUtAzElEC7SASIlAOsOAqwAMUUEBRsIAJwF
EQ4fCNEeEL4AXhB_AD4gPgBuMhICogJCbhAeJTACMI4ADrgFAtoIIQBuHgAAwwAB4QVQTgAOVQQH
AACJAjEFEJ7FEQC_AhFOUxURDoADAsYEAIILEQ6mAESOEA4N1QMTJbQDUY4ADhQFRgIhDmWlACIO
EKUAAL0EAeMBIRBeMRQC-woRrr8AAlcAEE65AiAEBakAEWVVAABlCAD7ABB__AAB5goxDjUEKAkB
VAACtwYRjgYAAjkREy4CAAD7CiEOJeYIAAoBALgDAEQAMR4EJVgAAAYEIS4Q4gMABAsD7AZzDgUN
HlUQXlsAEF7OFADuCgHqAQHQBAC6BwFWAAFVDAG8CEBuAA4VeQMSFVgAATEEEB4vBAD5AAGSCQNg
ASAONSgBFBCwAQF-DxIEpQEQAHoSAW8FAFYHEhAqAEAADg0O_wACHgFFEE4AZT4KAAcBgQUEBRAO
RQ4QIglCAJ4QHggIEI7EFQFbEgCMBBEOsw8CDQQRTlEAEg6eAhM1OAoxNRAuSwAChAGSBQQFIAUN
NQ4QAwIBNAAQABwXAK8AEc5kARF_pAARHu4JAgEBAGMFAF0CAq4CEjUcBgMIAAFIAQJZAAEVASM1
Dl4CET55BxE_qQEAbw0RTgwAAL8BAm0BE05TAQBhFgKzAAJNABMQFgACFgMATAgAtAsEagAiLiBq
ADEQBQSAAAAaARE__REg-gqDDRHuoAAAmwYSHhUBAJECJAUOpQYTTtwAAdAAEDUIBAA5FwG9AWIu
EFUOAC4KABMurAAA1A0QA0cMAfAFEQ7cAEReIAUEcQYRBawIAGwGAhACAHsHYA4gBQQlIHwGEn5Z
ABE_6QAAnwMQHhgBEx7eBwDnEAATAhCeQgYAPQUCuQESbp8MABABYQUEDmAOJV4CETXqBSIOIJMH
Qx4EBSC2AAB2BwHTAQFVDUEALhB_QgARTnYCEM4ZDgD8AgFBAABMBQJaAAFNATB_RV4JCREQWAEQ
EFAHAQcJAVYAAOYBAGkAEQV0AQMmCzEDAH4GCACBBABgAALQAxIuMAgRBN8MMAWdNSgCMC4AJQMD
IQUNawFAJQ0OEAsVEx5cAAGyAAFbAAFGAAGpEBB_OxZgjgAOEH4QVwAABgghDkU_ACAVnlMAYhA_
NR4NBE8AAMsCEBVKBQL1CwBCAzBVBAV3EBEEBw8AqAwk-gppAwBKBEAuEBWQXQUgThDWBwJmBBBF
ZQURDpoCAZcAA4YEMgQlEPEAEL7bEzQWAB6eAhC_4QEDkgACEgAxPhBVXwIRZRkZA0UAALUEQjUE
BRCUDxBe1gEBfAcRjiYDEn47ByIQDkIAAdUPISUN3gIRBHAKEgQXASEONUkGAEUIA10AAB8AAaAA
AugBALkAEg4cBQGGCwLjCQCfAwEXDgG0AyE_EE8AAf8AAOUCA8ACEA5QFRJOggQiHgAUBQFWAASe
CACOGQAZAFE_AP4MEOoaIRBOsAAxEF4wdgsBNwMhAK7FCQBMAQF3ChEQfwUSHk0AACwIEA5yARFu
oxBAXgBOIIIbAKYAIV4gCgJANQ5wLswCERC8DSMArk4CAOACIQBujgIBHQERBdkBAGAGEzXMCxF_
UAABbAABAQcRbkYCUB4gZW4l8gWwHhAeNQ4QbhAeRSAsAiEOEPwFESVwG1FFIG4AHm8AE05mChEO
FBEA7wAzXhBuDAhQBRStFQ4UAFAFDSQNBGUAMB4FDbFCAHYJADkDAKgCIR0OLguRHgUdBB0FHiAe
zAURBesHAD0CAloAAogIEz4UAHAORQ4lHmUOBhYhBU5KAgBMAjIeJQ5jDBEFfQMBowRSLhAOFU6t
BACVAQCYDwJUCRFu9gEQblgHEBDaGMAu8AR_oC4ALrA_IK7gCUEQTqAuSQ0xLjCu7wMRnsYEAHoC
AFwbIP4KQQYg-gCdARAQkwIQXhEMUU4AnjCODgEQvsAAQBCeAO5NAgBNBRJuaAcQEM0YERu_HHH_
ABBeIP4LEBABOwcAAgATXv0JATYAcAIQzgAeIK5ECiD_ArsOEQs5ADAOAP4zAQFEHQA4CgBVHRD_
PQIBRBoQCW4AAMsWEU4wAhNOlAcRjlcAAU4PAUMBIB5AZQAg-g3qAxIOpRMAugECsQMjfhD3BACB
AADmAAB1AAHOBwGlAAFPGxADTxMQBmMeES5YEkFOEB6AwgAB7hcRHmMBAXEeAMEBAx4dERAcAhO_
8AsAfwIAzQIBJoEjAB5-AwCjAFEeAI4Qvg4UIL4gJxEBChABggUBnwAw-g0g1BQCkRIA3QAAmQAR
ntsCMU4AztECEQ4tABEeKQMRnvoJEQ4IFREuRgQRrv8IEE5WARDuEAkBYA4AjwAwbiD_VgYSrukA
ITAevRkRHpkFQB5ALiDdBwFbAwFZCwFOAAH-AQDfAEB_AJ4gNB0C_AkyThDOHgIRHowBEw7rHgAE
ABG_-xcRXtkDMy4wrr4dQU4gjhBHAQBTFBIgSwMAPQcxfhAOtgMRvtMREd4lDQDPAAC3GhMOkg8S
fmYBAPEfQAoAriDjASF_EC0BAFIEACwBEBAEBAA-CzGOEG7uChM_WQoCigEQHsoBEc4JABIusBcA
5AMjEF4aBQHdAAEiBQAtAAImBACBGQDUHgAMAkFOEP4IqwYRDjMHE154AABqASBOIMcMIC4gDGsR
fl0AUx4ADkCOzgUiHhC3BgPIGQI0ChI_-xEhbjBlAAM0BSH_AaIBEh5MAQO4FhFeEgAwPgCOlg0T
rigWALUAEY6jADJuIF7CAwHzChMOfQEArAEAtAERToQAAkICQV4AjiDaAQAWDgBsABGONwAASBYx
EP4EDAExHhCujwARHmUJAAQBEa4OAAMaCGEAPhDuEB7tCAAUAAG7AANrARG_YwAh-gsqBQArBABu
GxOu_AAAvwERLiIMAAYDAiABER7MAgHrAQMnAgL3AgGTADEFAN7NABFOBgEA5wACmwQC9BQAtAEA
agQEpxBAbgCOILIBATcFIRAevxkACAAAzB8xHkBOGgARDiYEIV4g3CEBfQAD2xQAuwARfsgDEc48
AhC_fBABqxICLQNPLiD_xbMiCx4xsyLwBrggHvAEHvAJDvAOHvA0DnA_oA7wApMA8AIOcC6QHrAO
sB4ADvAEDlAeACgAESAQABEwFG3wEwAeMC5ALtAOEA4wDkAOYB4wHvAEDqAOMB5QPuAOIB7AHkD4
iQAvACIeIC8AcB4wTgAewB4QAACPd1BgHiAeUFFtAMoJEA5RbQCAfQAMh0BAHvAHEQACcwAQBUEU
wQ7QDnAOUD6wDjAesPoJEUAlEQA_ASAgHs8C8QHgHnAOkB5gDhBe4A5APlAOdwYAqwAgLhC-bRM_
VgARED0AAHUAMwAOUJYEAMhtEB7jbSJgDuNtsXAeME5QHgAOBS4g_gAQICkgEB52hCAgHj97Ex6O
BDIeUA6LAMCAHjAe4A6QHkAeAA6vhADmAzFQ3tDcfBEwJQMhMC7lh4AOUB6ADhAeUGMAIA7gUoEQ
Lk4BIHAOD4igUD5AzgUO4A5wHiIAIEAOJwEAXQ0AEX0ggA4jAVAwLoAOMIpuYR5AHmAO0IwBEJCG
CWEOBc6gHjCwAoEQHvANHhAeYBoBEWAkA5BwHqAegB7wBF7VhYIQHjAF3kA_cOcDIB7QSAEgHoBd
AAESADAgHmCCAgEKADEQHnAYAZFQDsAOIB6AThBSAWAFzkA_BQ7XAADFABCAtHdAXiAOUCwEAU8B
AfoEMS4AHkVvASkBAOwBAD9vAFoBMFAeIBoJgA4A3gUOMF4FNQhhHkAeUA4wzgEQQMwBEh7jAFAA
XjAeQAd3IA0ePwAQcEgBAKADYQ4F3jB_BVMAAJEBIjAOqwAxYB5gQQAAuwARENUA8ANwDvAGDvAF
LjAeUB5QHgXeMK4IAAIKeoKADgAuwC4QHmQBAX8AAUQAAMIBQKAekD4UAAGSDbABLhEFXgUOMJ4F
DnAAQQAecE7lAgDFjDE_QA6ZBAKXBfADDiAOcA6QLvAFHjAekE4gTgEOg1IA4wAQzpoAAE0BAA0B
AUpwAcIBACMBAjoAAQQAIS5QlAIg8AK3APAFMD4QPiBOAQUdDgFeMM5gDkAuYB7XAhEQ7hIAYQEh
UA5VAwE5AVEwDrAeQDIDMXAegM4k4CBOAQ8WHQUAbjAFzrA_8Y0AQAIiEE7nAREwuAIAzQEREGR7
IHAukgLzA4AO8AAOcD4gPgEFLQF_MM4FMC0DIEBu_QAAsAMAWwAyMC4QC3EBxQAA3AEg8AX6ANAO
MD4BBR0MAX4wjhAeoAEREGgAAAMCAPoAARcCIz4AgBEREDQBAPh_AeUBIi5AmAEAtgHRHkBODA0M
AY4wjhA_YJUBMTAOUFICASsnAAEVEE5_ACEADiYCASEDEVALAgDUAhDQCABwHjAOBR4BDo0AEAVG
EEBOoB6Q6QMAdAgRENoBACYCAOABAYABAK4OkC7AHvAIDkAeQAABgA4tBQF_IP4ANwAxEC5wWAMB
dwxQDhBeIB6RJwE4APECDjA_AB5wLiAOYA6APqAOFQ47AHQMAY4QjhBOnAIAOwEAa48UMB8DEi6i
AgE4DUIOQC5ASgAAUHIQB1gBgA5gLjA_AQ49ggATfkcAEB6ifxMQIwEAehMiEB7_CxEAvQIRcFkA
UFAFTtAuBgIBmQEAugKAAQwtDBFeMG55FQBIABSAfQISbrcCIQAuhQkBTgAAAgUgQC6SjBGAGwLw
ByAuIF4BBT0MQS4wXgUQPgUOkB6gPnA_BACVEQCMgwBpIJBOIC4QHqA_UC4pBPAB0C4wHkBeAQw9
JRwuMG4ATgQCAKEAMTAuIOIEETA4EREgogkBAgGATjA_AC6QLnAgAiE_kFgGsEBeAQ4VXQUBDkBu
AAQA2AAgYD61cwCAAoFATgAeIF4FLqsQAF8CcS5AHrAe8APCAoAwbiEVHQwFAbAAAScDEECZAABs
BCF_AIgEALcAArYIAokCAEAAIaA_MQQBBQPQgB4wnhEVDgE_MI4AHuEEEkC9BjAOAC7zAkAAvkA_
GAAAzgoSEEcLEh7eAiDAPt0EIAAOOQHAMD4wFS4FXhFeII4FTA4CwwABagMAgQASDtcHIhUO-QsB
1QITTiQDUA7gPvADhgEALwBwPhXOBSAFnuuPMUAeQFsNECBlADEeBS61CCEFnpUiEi6KCBBA2wIQ
8GAAAMoEcED_BCCu4B4qByEwLu8iAZQKAAcOATYCAK0GQR4ALjD7BBEAVwaSID4VHhWeQK5gOwUg
DmApBREumBoB7wpBThBuIJwKcXAO8ANe0C6oBWD_AAUeIN5TAhGgLAEQBTYJUy4ALmA_4AkA-AAy
LgUuXAXxBuBeQB7gHhAuQA4FrgUeBR4gXgB_MIsBAH2FAJMhIQUeLQkBMQkgEE6yBEBgHjAFMwFA
DsBOQIcIcBUOMD4FfgV-BjI_EG4_AACbBgBAAQJaBCMAPkAAAEgAATEEUEAeEF4FJgcgTsApA7EO
BQ4gTiUeAJ4wToAAIA4Q5AMQHsQDAd4JAOIBQB4A7iCeAgJjBBAlIwBBPgUOoAQFANUEoAVeMH5A
PgVuBQ7ZBFCgDkAekOgRAJEFAGkPAXAVALYAEGAVASEOYJgEcAUOoA4QPnB-ADAOBS5RBlAwHiUQ
bscIQQAe4A64AwBQBAGhAUAAThVuNiMAOQnQEA4VDnAuQE4FDtAugH0AAIEF4V4gLgUuAG5ADkAe
0B5AcgiiQE4FjhA_BV4QPhYCkSAuBR6QLmBOcD8FAFgXMgUOEH8AIT4wNgIwFQ6gPQNQYA4ALkC5
ExBOWAUAlwIARwJxBR7QHmAOBTwIEBDwjUAVIH4wFwMQLj8gEFAzChIgegEQLjIBEEAGABAu0BUA
PATgHjAuBQ7gLkBOsB7wAR50AKQgDhVeMC4FHhA_FAMR0Ix3AhoGQQVeEA7EAREurQsBKAlhBQ7w
AC5A3wEgMA7YGBAllgARLu0IALUgIS4Fp3dwAB6gTgAu4IkHASwEAa0LADAFwBXwAx4QXqAeIC5A
LkEKAOUEQDA_IB59AZAQTqAeoF4VLkBsAEAeEH6AEQURXrICME5AHrQJAEQtAHqTMWAeUDsAMR4g
HogKQC4FDgFfBHGgHpAuAD4F3AASBTIWAQUMURAFDkBeIhgBWXgA5hsQJXcBYAwFQB4QTk4GMVAu
IDAERDUuEE5AAABsBBCQIhEAGAQBuQoAVAFRJS4wPhBDAgGwAQFoAFMAHpAeBVUAEBUXB0FOwB5Q
4AAAcQAwEA4VYAEgTgUoEQF1C-MCgA41HhU_BRAFThUQFSBeABUDAjEeBQ4pLiEeAIEAAMEHIDAO
Owgg8Ab2CAF1AzAADhVmAUAwfhWwYAKCHhAOFQwFAG6fAAFqcQK1AQBdAQAzACA_MEED0Q4wDhUO
8AgeID6AHiCcABAgfA5AHgUuMBQSoh6QHiAekA4MBQ5KABAVjQBgAA4FMA5AjRwBjgAiIK5wAVHw
CR5ABcIJQT4FDmC4AlEFHiUO4HcIUQUeFR4F6wEwBT4FVgoxBSAFegIAvxAAGQQg8AmZAMA_8AUu
QD5gDgVOMA6SBUEuJQ7AQABBFT4VEP0YEB5qARBAQQAA6QMBWQYhIA59AACnAgAiBlBQDgUOgPQA
AOcEAfUBEWANCtEgFU4lHgVOBQwFAA6wWwQhsC42D3EOQBUO8AkuUQJADqAOQLQCgA5wPgU_ID4Q
d28TMAAJIlAeqi0AOggRYEEAIpAukAgQQIIAEQpuBHDwAgUe4D4V5QEA9wAgLpD0AgD-ABE_ywIA
JxcADRFBDpBeEB0CIPAIeAkQPj4DIC5gbgCAHjAuFR4gPrDaihGVrgNQIA4VHhWKBWAOwD4APrBs
AKEHHoAOBS7gDgUg3wEQYO8AUE4QPhUumAURgH0IMCAOVVwEQQUOIBVoAgBAAICwDiBeoD7wBt8A
MRUOwBgJEHAnAxAuagNCFQ4wFTwAURBOJR4VXAXQEC4FLjUOUD6QfgAOYPoekPADLkAOEG4FDpAL
YIBOBT4wTlkCACoLAfQL0A4FDkVOBQ4gbgUOFS6YABBQhglADlA_MOQAEFAcBzE_kA7JAyEeUNIh
MTCOFcIGEHDOACFFbtIFES4eAgCrghEQRgoAngXwAoA_sC7gHgBOgC4AHpA_FU5A53FDHgUO4EIK
MAQeJbMAET4yA0AgHoAFC3wAQoYQHjMBEJA3AREAAAUA_geggA4FnkAFHgVe4IMLIw5FuwDxBSAu
MA4MBSAOgA4VLgUgLpAe0A4VXgEQ8G6QAPQOUAAegB4VxQIwLjAV1wEgLtCLCCEOHKsVQA4wFV7A
AFCQDhUu8MIKoS4gTvAHXoAecD4BAzAeQBWpchAOxAYQkNgBIX5QpQQAGRYgoA50A2GQLvADHgBh
CyOALtsBcIAOBW4FTiDpcSEOwJIDIaAe6wNgJQ6wPjAu8AIQ8JYDEPCwD7EFDlA_cA4lLhVOIB4B
EAUjBSEeoAwOAKkAAAoEMQUO4E4kAnYNIBs_SgYwEA5wW2lQTgUOQC7hYTDAHqAXFkEOFW5ghwMx
4C5QuwYgEA5-ECEDDu0RkA4FoD4FDgFeQGsAAAIAgA6wHtAFBAWeOgdAAAUu8MIAYEBeYB7wDFQI
ES5UBoAOcE4VHhUOUJUCIAU_OQIAew8g8ANJDQAvAkEFAB7g9A8Q0NIAAAwQIHBeXwBiME4FbkAO
9Q0hwF4LGhBe9REAUAwAtQihYB6gHvAIHpAOILIKEYA3BWAFPgUeIM64BwAqBAEWFYEeBQxFbmUe
FWUvIgAOhwQAJQIw8AEe3wsTsD8AYBWeMA4lXnUnArMOAEwU8gAFHgU_FQwVBBUuAC4FAB5KBhFg
eAoAxwQxwB6gGAsxcA5QNwAA5wIRcCYCAVAFMJ7APgAOAJUZkC4FDDU_AF4lHp8aEC5AEABTmADS
DQH0CyGQDu0IACgDEA6_AjAVPiXQBiBOJQgKEj6_DzAALkU7AmAFDhAlXgDdCBBgFA2B4A4QHqAO
gF57AFC_cA4VXkwCIcAeDzMhPgAUAzAgDoCBDwBLEQCzlQEED5AgHtAewC4gDuA0EUAADvAOcAAQ
gG8BAfsREXBzCxEA8QoREDUIAPoOEQg4DhEATwAjkB7gDiAecBkSIC6AqQEhHlAsABFAfQ4QcG4C
AJ6WAjMAIBAeQwQwMA6QTQsA_gEAAAsiHnB0EjAu0B7WlgK3CxEAoQEAeQwRYHAQAJABMFAOBWgA
EXCkCgByEQCdEhEFRgFAYB4Abp4KAHYBEQBmDxLQsxIABwEiDjCeEAGyBBEgjAoAWhIB9g5CDjA_
MEIAAWonIgUO7yUgFT6nAgAICUDwBA4gxAQBRgoCRQARQEECUiAuYD4QQg0SQD4OIQ4wAQ4xkC4w
7wABCw4A0w0hDhBtCABCDgAoADGAHnC2ABEAtwahYA6QLiAO8AMFIJ0AEHBVBhIALAAA9g8RLgAR
AW4FEID-AAJJACEQHk4Wsi7gDvACFRAeME4QCwMQBhgAATYBMUAegPcLAMEFEhB2BwAqBREuwAAx
HvABggASIDMRocAe8Ase4B5wLkAPBzEgHpB2mwD6AQMUD4Bu8A4OBRAVMG8aQfAiHmAgAjFADrC4
BRFwdQsATQkQQM8BIC4QbxBTUE4FDjCJCjABDiArAABNEyAOsPUIABUAEQX_AABiEDEFQC6fGDAO
UA4rCREFoAMBdAkR4DkCEUDpAyHwCPYDERASAhBQaAkA3hQhBTCMAQD9ACGALq0JAZsHUVAOoB5g
vRAg4A4RgjDQDmCfEQF8BDFgTjAjAhEwggQAHwUBQgcSIMcNAw0MAHQAADsAAP0EE1C7BhFw_QER
AHwIAM0AAEMAEBXEB2DwAx5ADgzYGWEOBR4QLuAcigDgEiHwCkUIAHcSMqAeMNQJAcoJATMCAaQR
cPADHlAOFQxoCQFyBCHwCy8QAJUBEYBKBBCg4AAAVA5wBQ6ALlA_QAkIQHAOZT6oAhHgeAYx0B6Q
XgYhgA4WAyAeIHwEAA0NQC4wPlDVDLEeQC6ADmUeJWAOoIYDADEAAVQFIx4wWRMAIAQQFYMAAE0G
UUBOMB6QwAAxsE4VGQ1hUA7wDB6QPAQRPhgJIS6QAAEAVwZxwC4AHmBOQIwGQC7QDhzaHbEFHqAe
oB5QLpAeYEgBAL8HEMAjeUAe8AtOUxMQ4CcGYCUeFQ6QLg4RAMMMUPAWDvAF_R9w8AI_cD7wAmoC
EASQAxGgGAMg8AUDABGQWQMACRMQJRgIEC6bAAA6BwE8A1Eu8AcOkG4NcXAeIB7ADnBPCAJ-ASBg
BWoBAbUXEC5cCjCgLmARAAE5FzGwHsAHARNwuAQCnwJQPgA_UE58D1BwDjAu0GkBAOoJMBQe0A4B
ADIHUvATPmBO_hUB_AMBggsxgA7gWAAgAR4MCBEemAMAJAYAkQUx0B6gDREBOQMRYNcDQBAO8A8X
BQHBDgCAAgKyCUHwDB5AQwIABABhQB7wDw4QxATA8AIOwA4ALnA_wB4wDxMxEg5gqgEgEB5XAxHQ
bw0AIwNh8Ag_ED6AUBMwDgAuM5Uw8BceswEg8AIQAQD4BlALDiA_cGoJIB7QTAiABw7wFQ6AHpBW
CABPASHwB6oDIRAuQg8B35hCAC7wBu0VMHAe8B4CYXAe8AEusKoFAGwAEJDHADAu8AEpAkEXHvAW
agUQkEwBACIA8QnwBx5QLvABLvABDoAO8AYe8AYO4B4gDsDPAhBOxxgxMB6g6QMR4KICEAApASHQ
Ds0XAbQGALAFMZAO8IYAQTAe8Bm-BQA0ByHwD_0GEBAbDQCWkBAAnwEQUE8XIgYeYw0B4gcCsQIR
gHYHEXDpCADDBRIAT5YALQ8Ajx1B8AcOMLQFIPACpQkgDOCIACASTvABAtAIIPAThQDRBh4wFRAe
8BseMF7wBVIIEaBiBgC-AwCTAQGRAzAwDAVYBiDwDB0OADACEQODABGQFgYALgYD_gcAnhUAgQhA
BQ0PH_cAMPALPqsMAfQYELCBBwJyGAFwAWETHgALHQUiByAO8OAIEmApARBQUAFRIAUM8BgkAEAM
HQwgIwEAbBYRkAwBMNAOHBwAsQsOgA8UDAcMCwVwagQAOAwBrg0RAE0QQAAODQx8BiDwA6kCgQse
cAULHQsFxAcRE4EBEdDXByHwBuSNAOYBcAIe8AEKJwzKCSALDqEVcB7wCAwdDFCWARDQSgBQAg0H
DGC8GgDoESDwDowWcgMeEA4tDBDDAGDwDQ5wDgwmAkESHlAOeQEAIQQAJQAwDA0XAyRw8BMe8Bge
0E8FEBXuCACAAHAMCxcNBfAWwAMALQlxDAUQDgwOgNEEYNAe8CMO8AtyIh0EIgDwBuAFHQwFCw0M
gB7wPA7wBw0XDQ7wFk4BwgoEGz0FUB7wPh7wCM8AgA4eMAQNPA0O1xpQHvBGDtB_AhAERwMRMFkD
cRAEHAQsoA4YCBE83BARMAgPACkREDA2AACmDhDw8QpyBSwLBWAOINQFEDs-A7A_EAwNBRAFDA0O
QBABAWYDQAkOHAV8DAAUCXBwPiAO8CgexBQwoAwd8YChDkAOwB7gHuAOYH0BAPkHEEXOBxFw2gtB
0B7wH28WAe4UkA5ADh0LHQsNBecEEB5xoQKZCQCyDCAMBRYHECDbAhBeMwIA0hlBID7wBLQEANYY
YEAFDUwNBeASEaA_nHDAPiA_wAUuJy0ACzsA5BAAShkgTpWWDlAeBX4ADl0MAO8DARg8gR4QDiwF
DAQMQgAR4BwSE3C0CACbGgAtJxEOvgoBgB1RQD4FLmVFAAC6DQCwDBEAVg0hDkAxIxAwIhQxHgVc
vRIAEwURMMoIoPAADkAFDlAlBBUOCwAyARAF2QAAhCgAzgYBwRKREA4FPiUOJS4QjxEAJgEQXJQV
EF6nExHQwgQicB6KAAGyEhEeHhFwLgAuME4lLhIHAXwLkS5gHoBeJT4wDsYXcS41DA4wXlC1AgAv
AQCsHAEYBVJAHjUeIB0JYQ4FHkU_MLUJAMEAQQAFPgCrHLCgPkUuIH4QLgwlDMgEIvACjwQB0wUA
NwBBDFAeFQkMMAAeVRQAAVwTAEcAMQUMEPKXMQwFwO4BgEUugA4FAAU8FwkiEB7AAACpCBEwFQQD
TQAhBQCKAkEVHlBFtgsiAC4EAACkJoAcBTAeMAUMFfoEAlQaMCAeRQgAYR4ABQwFHMMEYB4ALpAu
sKALAPkgAEsDAEcNAFEAAW8EAQYAAo8BAE4NIRUM1QoRHLoIAOkBAokCgFAOVQ5gJSwObgoRoHgF
QkAegG5xKTEMBSAuAzE1IA7uAADWAhI_oAAQXEUAIA481CoBMQMA4wASYE8UEB56KADLAAH0ARFw
GRIQQEslAXAAgA0MEA5wHjUOaBgE7wAAVQBAMBUMFZ8PcQ4FDAQ1DAWXAQF_CxEQciUBKxRkBQwF
HhUQrRkBNAxREB7ADjChJjAFHQU4BhA1qQAhPiCOGAKzCwBmAgDkCBA1_QAQDHsoIAUsJyYSLlgA
EQCXAAAgCgB0ACAFHGYmAUUcERAfDBJw3QAA1QuBXgAOCwwdAB6kAABbAhFuAxgwDgUuiAVRBQwE
DiBUAxEOoAEgBSxZAFN_MB5QLooAIA4gVxAC-QEREAEJEWBbABAQfhbBLgAFCy0FIA4lDA4gfQEA
GhtQBR4wXmBaADBQBQwCAEIEDA5AxBAAMgNSLmA_IB54FADMBwL3GQBNCgDnClAgDAstBR4pEBDc
DAA9FxEubQEAEgsQHGQDIAUEogBgLhAUBQwFhRYAMQEA9wcwEAUu5gJxFS6wDgA_YNMKQjAuIB5K
ASAcDUiWECUtABA_DwWBIH5AHjAMCwQJDyAMBLACMCAOFb0CEUCaA5EQLhAVYA4FngAAAREAZgIA
mRwA0wewEB5ATiAFDAsHDQQhAQLaBABkGDAQXgVwDUEcDnAOtwICOQICUAEyLjAOcg8BHAUxfiAO
TRkAbxEAjQkBUAIRAAYAUSAEHRcM8AARXl4AAoYiAFsMYCUOgBwFDqgBAFUTMQBOYFUIIRAMPBQR
MPsBAUEAAWICEZABAxAw_hVhDA0nBUAeqCQSPksBAAQAAiMOAPIBMAUEHL4RALcbES7iLgLTHgB5
AAGSAhIwkAoQAQubMhcMUNUAANgMANMlEW6rIwARAnMsBRAOPA4QxBwAQ58iEA43AwBjBBJwfQEQ
LqogIJAetBNAQAoFcLsBIQ4FsQAACwMRIB8IYEAeQBUcMJsAAIU4ANACAIAEIQUdhB8TEBYNAU0T
MS4AThALMA6AnscJESDGJCAATiEEETDoAwKSBAELADEsDhDYAQAZABIAUAVBDB0MEOkZMCAOJTQA
AZwDAQsbETB3AAHtIWEcHhAOwE5nDwILJwFPBzAQBSwpCyEVHJcxAPcMAGouIT0O9ikQLiosEQ68
FQBTBgBQCxAuIgxAIAUNC8wDIAsFEa0Ceg8A9CsBrRsTECgCQQAOLAVyIgATEADPOQCLbiEAPjUU
AJ02EC4BCAAoByDwBN0IQQ4QDh3KAYEQDiC_AH7gHvEAERAWAyAMJWMWkFAekAUNCwcNHF4AICA_
pBMSINohASgEAA8MgTA_IAUdCw0c8AkAMxsCxwMAhQIwFS5gwQMBKAMSID4OAoUHAE4RshAuABw9
BSCuQCUOrwAAtwAB9AAAZwKwPjAODAQLDRsNDDCpLhMOiAcAAgMhBTz-AABWBwGnBgBtATIFLDAu
AwEEBQDzLiInDW4AAC4EABYXMUA_4E4BAOQgYhUMFCwgDjofAZwAAGcHIgwUYAAxLA4g6gIATAEx
cAUs5gAgQA5QAAA3BRAwPhcA_jAAnQ8AvRcg4H5pBTAcBByuCABUGgC9LVAQHjAsBVQDEwy4BBEe
kwIAWgIAMQMAFwNAMAQtBW4DAFEAEhU5ASEOcGYcIUAOYQIA9ihyDhwUHAQMIOADAL0OASMEUAQO
YAUMwDUCGgwgEA5kAQBMAEEFDAQF5QJwgAwNDGBOMEoZALgBAKMiIh4wswYB3QFwBAxVIB4QrlUl
URAsBXAOWwciEA4YBgGqARJgNxYAagIyCiA_PQMCFTYC2wIRMCcjAMcfMhAOPN44AOcOERAFBwCM
AUAQBBwFuAMRQDIdcTVuAAQsBQ7fByAOIGEKER76AjEeFR47AwGDDyIQDhEBAdQBIA4l_wUQDjsi
ALQGEi4SAyAQLHcRMF4lfpsW8QWVHDUMNQwlPAUgLiAMHQUOBB0MML8gAYMoADACEaASDgB9AgC2
AiAwXjQCAMoMEEBVAPACDhwFCwwVPDUcxQwFDnUONQxiFiIFHj4AQBAMbQyKEUAlDnAuDgYRYGcc
AL4JUTUeDAWgBSkANwIA3IkQPBYaMSwFENSTIQwV3xAAMAFxEAQdPA0MwF8bEjCfHSEeYDYAADEG
AGg5AJcTEBB7BLEOQA6gDiwOkA5FDH4NMBA1DkIHkTAOMAUcBQwVDVwGIAUucREA8AcBeg4B-RcR
RZQLQTAeIG4zCAIYA4FQHiA1DgAFHAwCAj4cEUDbAQAsADEcBTwHAwDCOQD9AiDQDrgKcZAuQD4E
BQ4HGkEeYJ4QhAIQIJAGIlAO6gUgIBVrG1AOcA4EHAwhcD5gDhwFBBxQBhE1-QEgAB5mGwKyFDAu
IE50ESEQLq0eEB52BBBQZQIB3AYgDlDjCRIOEwQRBZYAAG0AsTAFHBUsDlAORQ5QJDwgMA72JyCQ
DuUZAEQIEVArEgAZHTAsBIDJAUFwBCwOpAAhDAX8FXEgLiAEHCUM2gcQRUsCIR5QPAIAJhZCUC7Q
btcSI2UejBAAswEgDmCJCiEOHIMaAcUCIRAuJgFhLAQsDhUQ6joRIM4GEUCWFgDErAAHEVEFbiAe
ZZEcEQBhJ0EFBAwFIBMwBQ4QBQASQAsAA54EAJgBgUAFDGUOAA5FhQMRABsAECBfCQElEgAyDRAw
uQQwTkAuhQgCSA0ALAkAWQAArQBwBQwVHhwOQOQ4AIUDAXcDELDgCgD8LwB3AgHBBwLZBTFgDmAg
AAG5EWAeMA5VDAWzFgGkCAIxARAchQMhLgWdBACvCgHJF2EMNQ6QDqDbFgCQEhFgQgESIJIFgR4w
PjUMBS6wLggAix5QFR4wDjXUD1EKDgUcFcgCIAA_IBcA4RAAFwUikB57ExEFlUAAGRAAnSUAohYg
8AD_M1AFDA4AFeYHAA0IIJAesiQBHigB6gQAUxVALkV_8GyrAGgZAYcEwgUuIC4FTpA_MA6wDjEQ
ADQaAWABAKoJ4A6ATiUMNT7wCh7wA15FnggAuTkABAIRcJkNEWBvGwBcBTBQDtAwHwC9CCBegHAm
YR4wHhUcVfACMTUuYJABECAUFQAKDQNlAAHBDwAxFDL1Cx6nGlC1QA5wjtANAAQFMcAeAPsVAdYq
AC0RAE8MUKUERQRl5hkQbhYbAsocAWAFAS8TITAe0RgRC7AvAM8BAIEYEE6hKxEe4QcgHmDQGQIf
JjI_EC4EEwAzADGgDqCIBQDzFQKfAWCgDvAhPlDmCQD0IAPWF3EgHoAOwA6ALwARQF0FAMcEBH4A
APcaEF7NJxEgy6UAfQYREH8GAMAUMREOMD8CEWAyExFQ6hIhQB4nCwCSHgHBFQBvAAEuACFgDs4X
EDDzEgB_BQCxADHQHsBgDyEQDjskEh7UCRBQVAFQYA7wDE5iHABxJQB_AQC0EDAeQF4fFgDvEwA7
DQFWEQCfEwCWBgDPEiE_wB4CAEUEQCAe8BTbozADDuCVGwDvGDGwHiD0IhGwsAYgkA5-Ef8DWA7w
TR7wQx7wYQ7wRA7wY-640SwMD7VPHg8xAP--------------olBtPTR9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA2LTE4IDE1OjQxOjM5Iixtb2RpZmllZD0iMjAyNS0w
OC0xMyAwMToyOTo0NCJdXQ==
:: gods/
:: gods/blue_gods.lua
--[[pod_format="raw",created="2025-06-24 17:53:59",modified="2025-08-12 17:56:39",revision=522]]
velith_god=function(stats)
	ret= new_god(stats)
	ret.name="Velith"
	ret.title="The Eternal Shade"
	ret.sprite=80
	ret.description="+3 to all shades"
	ret.flavor="Every light casts a shadow. To kill the shades you must first kill the world"
	ret.color=colors.blue
	ret.color_boosts={0,0,3,0,0}
	ret.cost=3
	return ret
end
asul_god=function(stats)
	ret= new_god(stats)
	ret.name="Asul"
	ret.title="The Drowned Memory"
	ret.sprite=81
	ret.description="Adds 5 seconds to the move timer"
	ret.flavor="He knows all that has ever been forgotten"
	ret.color=colors.blue
	ret.color_boosts={0,0,1,0,0}
	ret.update_other_values= function(self)

		self.stats.movetimer_max+=5*60
	end
	return ret
end
noen_god=function(stats)
	ret= new_god(stats)
	ret.name="Noen"
	ret.title="The Echo Without Voice"
	ret.sprite=82
	ret.description="Adds 1 turn per trial"
	ret.flavor="The more one opens their mind to a paradox, the deeper the infection spreads"
	ret.color=colors.blue
	ret.color_boosts={0,0,1,0,0}
	ret.update_other_values= function(self)
		self.stats.moves_max+=1
	end
	return ret
end

kyreth_god=function(stats)
	ret= new_god(stats)
	ret.name="Kyreth"
	ret.title="The blue"
	ret.sprite=83
	ret.description="Allows one free move without creating matches."
	ret.flavor="Do not ask for what The Weeper cries"
	ret.color=colors.blue
	ret.uses=1
	ret.color_boosts={0,0,1,0,0}
	ret.score_matches=function(self,matches)
		if(self.uses>0 and  #matches==0 and self.stats.chain_counter==1 ) then
			self.stats:add_message(self.name..":Free move granted")
			game.moves-=1
			self.uses-=1
		end
	end	
	ret.reset_trial=function(self) 
		self.uses=1
	end
	return ret
end
caela_god=function(stats)
	ret= new_god(stats)
	ret.name="Caela"
	ret.title="The Dreamer of Ice"
	ret.sprite=84
	ret.description="match squares"
	ret.flavor="The nature of water is life. The nature of ice is death"
	ret.color=colors.blue
	ret.color_boosts={0,0,1,0,0}
	ret.update_other_values= function(self)
		self.stats.match_square=true
	end
	return ret
end
:: gods/god.lua
--[[pod_format="raw",created="2025-06-20 23:37:11",modified="2025-08-13 01:27:32",revision=1880]]
new_god=function(stats)
	return {
		name,
		title,
		sprite,
		description="",
		flavor="",
		color=0,
		stats=stats,
		cost=4,
		color_boosts={0,0,0,0,0},
		get_cost=function(self)
			return self.cost+#game.stats.gods-1 --dummy god is in there
		end,
		update_color_values=function(self) 
			for i=1,#self.color_boosts do
				self.stats.color_values[i]+=self.color_boosts[i]
			end
		end,
		update_combo_values=function(self) end,
		update_chain_values=function(self) end,
		update_other_values=function(self) end,
		reset_chain=function(self) end,
		reset_trial=function(self) end,
		score_matches=function(self,matches) end,
		init=function(self) end,
		update=function(self)
			self:update_color_values()
			self:update_combo_values()
			self:update_chain_values()
			self:update_other_values()
		end,
		match_length=function(self,n,matches)
			return n
		end,
		draw=function(self,offset)
			rectfill(offset.x,offset.y,offset.x+42,offset.y+48,32)
			if(self.color!=0) then 
				rect(offset.x+1,offset.y+1,offset.x+42-1,offset.y+48-1,self.color)
			end
			spr(self.sprite,offset.x+5,offset.y+12)
			print(self.name,offset.x+3,offset.y+3,6)
		end,
		draw_modal=function(self)
			rectfill(174,20,174+150,20+184,32)
			local offset=16
			--self.cost
			
			print(self:get_cost(),174+132-(#tostr(self:get_cost()))*8,25,7)
			spr(24,174+132,21)
			
				
			print(self.name,176,24,7)
			print(self.title,176,38,6)
			spr(self.sprite, 235,54)
			local height=print_wrapped(self.description,new_point(180,100),140,7)
			print_wrapped(self.flavor,new_point(180,100+height+20),140,6)
			for i=1,#self.color_boosts	 do
				for j=1,self.color_boosts[i] do
					spr(i,174+148-offset,180)
					offset+=16
				end
			end
		end,
	}
end

new_base_god=function(stats)
	ret= new_god(stats)
	ret.chait_total=0
	ret.match_length=function(self,n,matches)
			return #matches-2
	end
	ret.score_matches=function(self,matches)
		if(#matches==0) then
			return
		end
		
		local match_length=self.stats:match_length(matches)
		local combo_value=self.stats.combo_values[match_length]
		--get average value	
		local tile_value_sum=0
		for _,match in  ipairs(matches) do		
			tile_value_sum+=self.stats.color_values[match.color]
		end	
		local average=tile_value_sum/#matches
		local points=flr(average*combo_value+.5)--round to nearest point
		local chain_mult=self.stats.chain_values[min(self.stats.chain_counter,#self.stats.chain_values)]	
		local chain_points= points*chain_mult
		self.stats.points+=chain_points
		self.stats.chain_counter+=1 
		self.stats:add_message(
			"value:"..flr(average).." x combo:"..combo_value.." x chain:"..chain_mult.." = "..chain_points)
		self.chait_total+=chain_points
		note(35+self.stats.chain_counter,0,50+match_length,4 , match_length-2,8, true)

	end
	ret.reset_chain=function(self)
		self.stats.chain_counter=1
		self.stats:add_message("chain total:"..self.chait_total,colors.white)
		self.chait_total=0
	end
	ret.update_color_values= function(self) --set values of all colors to 1
		self.stats.color_values={}
		for i = 1,5 do
			add(self.stats.color_values,1)
		end
	end
	ret.update_combo_values= function(self) --set values of all combos to n
		self.stats.combo_values={}
		for i = 1,27 do --the first combo is 3
			add(self.stats.combo_values,i)
		end
	end
	ret.update_chain_values= function(self) --set values of all combos to n
		self.stats.chain_values={}
		for i = 1,20 do 
			add(self.stats.chain_values,i)
		end
	end
	ret.update_other_values= function(self)
		self.stats.moves_max=5
		self.stats.movetimer_max=6*60
		self.stats.match_vertical=true
		self.stats.match_horizontal=true
		self.stats.match_square=false
	end
	return ret
end



:: gods/green_gods.lua
--[[pod_format="raw",created="2025-06-23 14:05:19",modified="2025-08-12 17:56:39",revision=654]]
vireth_god=function(stats)
	ret= new_god(stats)
	ret.name="Vireth"
	ret.title="The Emissary of Rot"
	ret.sprite=75
	ret.description="+3 to all rots"
	ret.flavor="The scent is the first thing you will sense, and the last thing you will forget"
	ret.color=colors.green
	ret.color_boosts={0,3,0,0,0}
	ret.cost=3
	return ret
end

egru_god=function(stats)
	ret= new_god(stats)
	ret.name="Egru"
	ret.title="The Mold Father"
	ret.sprite=76
	ret.description="+2 chain for chains above 3."
	ret.flavor="His children crumble stone, what are you made of?"
	ret.color=colors.green
	ret.color_boosts={0,1,0,0,0}
	ret.update_chain_values= function(self) --set values of all combos to n
		for i = 4,20 do 
			self.stats.combo_values[i]+=2
		end
	end
	return ret
end 
myru_god=function(stats)
	ret= new_god(stats)
	ret.name="Myru"
	ret.title="The Blooming Husk"
	ret.sprite=77
	ret.description="+3 chain for chains above 4."
	ret.flavor="Death feeds life, life feeds death"
	ret.color=colors.green
	ret.color_boosts={0,1,0,0,0}
	ret.update_chain_values= function(self) --set values of all combos to n
		for i = 5,20 do 
			self.stats.combo_values[i]+=3
		end
	end
	return ret
end 

beloth_god=function(stats)
	ret= new_god(stats)
	ret.name="Beloth"
	ret.title="The Allroot"
	ret.sprite=78
	ret.description="Gain 2 combo size for every additional color"
	ret.flavor="What you see is a fraction of a fraction of a fraction"
	ret.color=colors.green
	ret.color_boosts={0,1,0,0,0}
	ret.match_length=function(self,n,matches)
		local seen = {}
		for _, match in ipairs(matches) do
			seen[match.color] = true
		end
	
		local count = 0
		for _, used in pairs(seen) do
			if used then count += 1 end
		end
		if(count>1) then
			self.stats:add_message(self.name..":Combo extended by "..(count-1)*2)
			return n+(count-1)*2
		else
			return n
		end
	end
	return ret
end

grask_god=function(stats)
	ret= new_god(stats)
	ret.name="Grask"
	ret.title="The Fattened Leech"
	ret.sprite=79
	ret.description="Double the size of mono combos 4 or greater"
	ret.flavor="It prefers essence, it settles for blood"
	ret.color=colors.green
	ret.color_boosts={0,1,0,0,0}
	ret.match_length=function(self,n,matches)
		if(#matches<2) then
			return n
		end
		local c =matches[1].color
		for i=2, #matches do
			if(matches[i].color!=c) then
				return n
			end
		end
		self.stats:add_message(self.name..":Combo doubled")
		return (n+2)*2-2
	end
	return ret
end


:: gods/purple_gods.lua
--[[pod_format="raw",created="2025-06-25 13:46:31",modified="2025-08-12 18:06:26",revision=472]]
zuruth_god=function(stats)
	ret= new_god(stats)
	ret.name="zuruth"
	ret.title="The Mad Hollow"
	ret.sprite=85
	ret.description="+3 to all shades"
	ret.flavor="All hollows are insane. What does it take to earn the title mad among the hollow?"
	ret.color=colors.purple
	ret.color_boosts={0,0,0,3,0}
	ret.cost=3
	return ret
end
meraxi_god=function(stats)
	ret= new_god(stats)
	ret.name="Neraxi"
	ret.title="The Dreaming Sloth"
	ret.sprite=86
	ret.description="Halfs time to move tiles. Score matches twice"
	ret.flavor="No one has ever seen it move, that means no one sees it coming for them"
	ret.color=colors.purple
	ret.color_boosts={0,0,0,1,0}
	ret.update_other_values= function(self)
		self.stats.movetimer_max/=2
	end
	ret.score_matches=function(self,matches)
		self.stats.chain_counter-=1 --we want to score it twice, not combo it twice
		self.stats.gods[1]:score_matches(matches)
	end
	return ret
end
ilmeth_god=function(stats)
	ret= new_god(stats)
	ret.name="Ilmeth"
	ret.title="The Oath Breaker "
	ret.sprite=87
	ret.description="Destroy a random god All scores are doubled"
	ret.flavor="There is a power to a contract.  Like with all things, to take that power one must destroy it"
	ret.color=colors.purple
	ret.color_boosts={0,0,0,1,0}
	ret.destroyed=false
	ret.update_color_values= function(self)
		if(self.destroyed) then
			self.stats.color_values[4]+=1
		else
			self.stats.color_values[4]=0
		end
	end
	ret.init=function(self)
		if(#self.stats.gods>2) then --there is more than the base joker, and him
			local n=flr(rnd(#self.stats.gods-1)+2)
			self.stats:add_message(self.name..":"..self.stats.gods[n].name .." has left")
			del(self.stats.gods,self.stats.gods[n])
			self.destroyed=true
			--self.stats:add_message(self.name..":A deal comes to an end")
		else
			self.stats:add_message(self.name..":A price paid in other ways")
		end
	end
	ret.score_matches=function(self,matches)
		self.stats.chain_counter-=1 --we want to score it twice, not combo it twice
		self.stats.gods[1]:score_matches(matches)
	end
	return ret
end
dreluun_god=function(stats)
	ret= new_god(stats)
	ret.name="Dreluun"
	ret.title="The Barter of Time"
	ret.sprite=88
	ret.description="Lose a move, Time is no longer a problem"
	ret.flavor="Unused gold builds interest. Unused time festers away"
	ret.color=colors.purple
	ret.color_boosts={0,0,0,1,0}
	ret.update_other_values= function(self)
		self.stats.movetimer_max=2147483647
		self.stats.moves_max-=1
	end
	return ret
end

soruun_god=function(stats)
	ret= new_god(stats)
	ret.name="Soruun"
	ret.title="The Melancholy"
	ret.sprite=89
	ret.description="Average all values"
	ret.flavor="At least you didn't try"
	ret.color=colors.purple

	ret.color_boosts={0,0,0,1,0}
	ret.update_other_stats= function(self)	
		local values = self.stats.color_values
		local sum = 0
		for _, v in ipairs(values) do
			sum += v
		end
		local avg = ceil(sum / #values)
		for i = 1, #values do
			values[i] = avg
		end		
	end
	return ret
end
:: gods/red_gods.lua
--[[pod_format="raw",created="2025-06-21 17:20:58",modified="2025-08-12 19:27:40",revision=1138]]
malvex_god=function(stats)
	ret= new_god(stats)
	ret.name="Malvex"
	ret.title="The Wraith in Chains"
	ret.sprite=64
	ret.description="+3 to all wraiths"
	ret.flavor="No one knows who chained him. No one knows what will be when he is freed"
	ret.color=colors.red
	ret.color_boosts={3,0,0,0,0}
	ret.cost=3
	return ret
end

dravak_god=function(stats)
	ret= new_god(stats)
	ret.name="Dravak"
	ret.title="The Fire that Crawls"
	ret.sprite=65
	ret.description="Every time you achieve an x2, you have +1x for the rest of the trial"
	ret.flavor="All flame spreads. He may be slow, but he is inevitable"
	ret.color=colors.red
	ret.upgrades=0
	ret.color_boosts={1,0,0,0,0}
	ret.score_matches=function(self,matches)
		if(self.stats.chain_counter==3)then	--one more than shown
			self.upgrades+=1
			self.stats:add_message(self.name..":All values increased")
		end
	end
	ret.base_update_color_values=ret.update_color_values
	ret.update_color_values= function(self)
		self:base_update_color_values()
		for i = 1,5 do
			self.stats.color_values[i]+=self.upgrades
		end
	end
	ret.reset_trial=function(self) 
		self.upgrades=0
	end
	return ret
end 
skaza_god=function(stats)
	ret= new_god(stats)
	ret.name="Skaza"
	ret.title="The Red Maw"
	ret.sprite=72
	ret.description="+2 combo for combos above 3."
	ret.flavor="She chews for pleasure. It makes no difference to the furnace in her gizzard"
	ret.color=colors.red
	ret.color_boosts={1,0,0,0,0}
	ret.update_chain_values= function(self) --set values of all combos to n
		for i = 4,20 do 
			self.stats.chain_values[i]+=2
		end
	end
	return ret
end 


flarim_god=function(stats)
	ret= new_god(stats)
	ret.name="Flarim"
	ret.title="The Burning Echo"
	ret.sprite=73
	ret.description="+1 combo for combos above 2."
	ret.flavor="He is a reflection of all fires. All fires are a reflection of him"
	ret.color=colors.red
	ret.color_boosts={1,0,0,0,0}
	ret.update_chain_values= function(self) --set values of all combos to n
		for i = 3,20 do 
			self.stats.chain_values[i]+=1
		end
	end
	return ret
end
velcrith_god=function(stats)
	ret= new_god(stats)
	ret.name="Velcrith"
	ret.title="The Crimson Oath "
	ret.sprite=74
	ret.description="Increases the chain counter for combos of exactly 3"
	ret.flavor="Liar liar, soul's on fire"
	ret.color=colors.red
	ret.color_boosts={1,0,0,0,0}
	ret.score_matches=function(self,matches)
		if(#matches==3) then
			self.stats.chain_counter+=1 
			self.stats:add_message(self.name..":The chain grows stronger")
		end
	end
	return ret
end 	


--velcrith_god=function(stats)
--	ret= new_god(stats)
--	ret.name="Velcrith"
--	ret.title="The Crimson Oath "
--	ret.sprite=65
--	ret.description="Destroy tiles near combos"
--	ret.flavor="Liar liar, soul's on fire"
--	ret.color=colors.red
--	ret.base_score_matches=ret.score_matches
--	ret.upgrades=0
--	ret.score_matches=function(self,matches)
--		self:base_score_matches(matches)
--		if(self.stats.chain_counter>1)then	--one more than shown
--			for i =1 ,#matches do
--				local match=matches[i]
--				local bead=game.field.cup[match.position.x][match.position.y-1]
--				if(bead!=nil and bead.position.y>game.field.visible_rows + 1 and bead.matched==false) then
--					del(game.field.cup[match.position.x],bead)
--				end
--				
--			end
--		end
--	end
--	ret.update_color_values= function(self)
--		self.stats.color_values[1]+=1
--	end
--	return ret
--end 



:: gods/yellow_gods.lua
--[[pod_format="raw",created="2025-06-25 15:51:33",modified="2025-08-12 17:56:39",revision=375]]
yonvek_god=function(stats)
	ret= new_god(stats)
	ret.name="Yonvek"
	ret.title="The Blinding Wisp"
	ret.sprite=90
	ret.description="+3 to all wisps"
	ret.flavor="With enough light, your eyes will only see darkness"
	ret.color=colors.yellow
	ret.color_boosts={0,0,0,0,3}
	ret.cost=3
	return ret
end

thimel_god=function(stats)
	ret= new_god(stats)
	ret.name="Thimel"
	ret.title="The Spark in the Abyss "
	ret.sprite=91
	ret.description="Prevent death once"
	ret.flavor="Do not ask why you were granted one mercey"
	ret.color=colors.yellow
	ret.color_boosts={0,0,0,0,1}
	ret.init=function(self)
		self.stats.lives+=1
	end	

	return ret
end
vollun_god=function(stats)
	ret= new_god(stats)
	ret.name="Vollun"
	ret.title="The Last Ember"
	ret.sprite=92
	ret.description="If this is your last move for a trial, all scores are quadrupled"
	ret.flavor="Hope, Pray, Beg. What names will you invoke when you think it is your last hour?"
	ret.color=colors.yellow
	ret.color_boosts={0,0,0,0,1}
	ret.score_matches=function(self,matches)
		if(self.stats.moves_max==game.moves)then
			self.stats:add_message(self.name..":A gift has been given")
			self.stats.chain_counter-=1 --we want to score it twice, not combo it twice
			self.stats.gods[1]:score_matches(matches)
			self.stats.chain_counter-=1 --we want to score it twice, not combo it twice
			self.stats.gods[1]:score_matches(matches)
			self.stats.chain_counter-=1 --we want to score it twice, not combo it twice
			self.stats.gods[1]:score_matches(matches)
		end
	end
	return ret
end

nethir_god=function(stats)
	ret= new_god(stats)
	ret.name="Nethir"
	ret.title="The Shepherd of the Zealous"
	ret.sprite=93
	ret.description="A line across matches all"
	ret.flavor="When the blind leads the blind leads the blind, who knows who stands in the front?"
	ret.color=colors.yellow
	ret.color_boosts={0,0,0,0,1}
	ret.score_matches=function(self,matches)	
		local row_counts = {}	
		for _, bead in ipairs(matches) do
			local y = bead.position.y
			row_counts[y] = (row_counts[y] or 0) + 1
		end
		for _, count in pairs(row_counts) do
			if count >= 6 then
				self.stats:add_message(self.name..":A line is formed")
				self.stats.chain_counter-=1 
				local new_matches={}
				for x = 1, game.field.width do
					for y = game.field:match_start(), game.field.total_height do
						local bead = game.field.cup[x][y]
						if bead and bead.matched==false then
							bead.matched = true
							add(new_matches,bead)
						end
					end
				end
				self.stats.gods[1]:score_matches(new_matches)
				return --we only need to do this once
			end
		end
	end
	return ret
end

ezeleth_god=function(stats)
	ret= new_god(stats)
	ret.name="Ezeleth"
	ret.title="The Beacon to the Lost"
	ret.sprite=94
	ret.description="When 5 yellow are matched, 50% chance for each bead to become yellow. Only once per move"
	ret.flavor="In the dark, are you any different than an insect? Will not any light do?"
	ret.color=colors.yellow
	ret.uses=1
	ret.color_boosts={0,0,0,0,1}
	ret.reset_chain=function(self) 
		self.uses=1
	end
	ret.score_matches=function(self,matches)
		if(self.uses>0) then
			self.uses-=1
			local counter=0
			for _, bead in ipairs(matches) do
				if(bead.color==5) then
					counter+=1
				end
			end
			if(counter>=5) then
				self.stats:add_message(self.name..":The light spreads")
				local dummy= new_yellow_bead(new_point(0,0),new_point(0,0))
				for x = 1, game.field.width do
					for y = game.field:match_start(), game.field.total_height do
						if(rnd(1)>0.5) then
							local bead = game.field.cup[x][y]
							bead.color=dummy.color
							bead.sprites=dummy.sprites
							bead.death_anim=dummy.death_anim

						end
						
					end
				end
			end
		end
	end
	return ret
end

:: gods/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA2LTIxIDE3OjAyOjMyIixtb2RpZmllZD0iMjAyNS0w
OC0xMyAwMToyOTo0NCJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTI2IDAzOjA3OjUxIixtb2RpZmllZD0iMjAyNS0w
OC0xMyAwMToyNzozMiIscmV2aXNpb249MTAzXV1sejQA6QAAAHYQAADwCHt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDMyAwAvIjABAP-------yQQNAQA7zEwMDQ4MDA0OTAwNGEwAQBa-wQ0YjAwNGMwMDRk
MDA0ZTAwNGYwAQBaEDUEAO8xMDA1MjAwNTMwMDU0MAEAWv8ENTUwMDU2MDA1NzAwNTgwMDU5MAEA
Wv8ENWEwMDViMDA1YzAwNWQwMDVlMAEA---------6-1DSIpLGhpZGRlbj1mYWxzZSxwYW5feD0t
MjguMDYBABE3FwB4eT0tMjQuNhcAknRpbGVfaD0xNgoAEHcKAIB6b29tPTN9fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA2LTE4IDE1OjQxOjM5Iixtb2RpZmllZD0iMjAyNS0w
OC0xMyAwMToyOTo0NCJdXQ==
:: music/
:: music/karg_elert_piano_pieces_5.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTA0IDE5OjMxOjM0Iixtb2RpZmllZD0iMjAyNS0w
OC0xMyAwMToyNzozMiIscmV2aXNpb249MjczXV1sejQATiMAAMlMAADwJ3B4dQADKAAABAAED0AQ
Ag4AAaABIAKgDgAPEAAN8MoBAgMEBQYHAA--kAgJCgsPDA8NDw4PDxAA8AANDxEPEg8TDxQPFQ8W
DxcTAPEBDxgPGQ8aDxsPHA8dDx4PHxQA8QAgDyEPIg8jDyQPJQ8mDycUAPEAKA8pDyoPKw8sDy0P
Lg8vFADxADAPMQ8yDzMPNA81DzYPNxQA8AA4DzkPOg87DzwPPQ8_Dz8UAPEADg9BD0IPQw9ED0UP
Rg9HJwDxAEgPSQ9KD0sPTA9ND04PTxQA8QBQD1EPUg9TD1QPVQ9WD1cUAPEAWA9ZD1oPWw9cD10P
Xg9fFADxAGAPYQ9iD2MPZA9lD2YPZxQA8QBoD2kPag9rD2wPbQ9uD28UAPEAcA9xD3IPcw90D3UP
dg93FADxAHgPeQ96D3sPfA99D34PfxQA8QCAD4EPgg_DD4QPhQ_GD4cUAPEAiA_JD4oPiw_MD40P
jg_PFADxAJAPkQ_SD5MPlA_VD5YPlxQA8QCYD5kPmg_bD5wPnQ_eD58UAPEAoA_hD6IPow_kD6UP
pg_nFADxAKgPqQ_qD6sPrA_tD64PrxQA8QCwD7EPsg_zD7QPtQ_2D7cUAPEAuA_5D7oPuw_8D70P
vg_-FADxAMAPwQ-CD8MPxA-FD8YPxxQA8QDID8kPyg-LD8wPzQ-OD88UAPEA0A-RD9IP0w-UD9UP
1g-XFADxANgP2Q-aD9sP3A-dD94P3xQA8QDgD_EP4g-jD_QP5Q-mD_cUAPEA6A-pD_oP6w-sD_0P
7g-vFADxAPAP8Q-yD-MP9A-1D-YP9xQA9AP4D-kP_g-7D-wP-Q-_D-8ADKBwAhoMbwJLDJAPEG8C
HgxuAh4MbQIeDGwCHgxrAh4MagIdDGkCHgxoAh4MZwIeDGYCHgxlAh4MZAIeDGMCHgxiAh4MYQIe
DGACGwxfAmoQD3_QD5dfAgAlABKfXgJvMAIPD-D-AQDn8STSARAGDyAQASABIAHwAAIQAg0QASAP
ISABMA7www8oDPDGD-gKDA_AD-cPDQHwCQEQBgQtAHcFDxAP8QHAMQDgAhAEDzYPGoABAhACDxsV
APcMIg8DEAEP-BAED1cPPPChBQ8oDAewAaAPE-CsVQBwcA9wD2IPMgkCASQC-wEtD28Pcg9nD2EP
bjABEAYNnAAWDy0A--83H-8BAMzzNegOAA8tDy8wHz4cHzsMDz4POwwPOQxPPmy-Q0xvRfwAERwR
DBEMAQxBbLFMYfwAD2QPUBwODzMMHgwODA4DDygNDxpsCADUDxQPEA8NCg8IBgVMHhMAQ-wA8HBj
AO6-NK8yDL78DPEHDLH8DDUADRIADyQAACb8DE8A9QctvB9KHB9HDA9KD0cMD0UMT0r8B7G8sQAu
-Ac-AGi8DgMcDgO9ACX8B1EA8AIcHzkcHzwMCAwOTF85DLn8DksAwQEMAUxRDLH8Dg4DHDcABNsA
D50AC-MDvK8qLB9FHB9IDAsMD0z8GKEsTQAt-Bg4ABQsWwAHQACd-BSvNvwlofwlLgAn-AElAB_o
JAAQL68_JQAK8gAWDzAw-BQE-C8B-C8O-AsUAPIFBDBeXH8_PA8vrLT8AFFccTwBrLH9AQFHAEVc
DgMHTABIPA9krBAAAgsBFABJAEz8FA8hXQD9Ab8svA2sDzL8C7G8AawB-As-ABC8VAAGMAAg-LAK
APgBAgQw-zUEPA8prL8q-ADxBJUAC0AAfw8EDwMfAhGbAAjxAgIEMH87PH85PL8p-AxxPHE8kwIH
1gAL4wANZQAj-AxHAPAFXA87DDl-Lzy7Dyr8EQEMsTzB-BFfAi8HDUMADQPiAPsFAgQwrzcMqAz4
BvwCoQyhDPEG-AIqAD8PBgwSABANEQAj-AJgAO3-MgirDKv8AfETDKH8ASgAHwUSABAObwAj-AFe
AEP8FK8fZAIPIwAF-wOpDJkcmRyJ-AOhDJEckRyB-ANhAA4fHBAACiP8A1oA8A8ZDBgsWRwYHCkM
Dh9CDC9HDLb8BBEMESxRHBEcIQwCADCx-AR9AUQMDgMsQwARHAgEQAcMHgN2AA2tASP8BF0AEBwX
BSI5XAYAsA9D-AE7-AIRHBFcBABhAfwBMfwCSQATXAYAAlsBBWEC3by-KryPMvwPsbyB-A-wAD8P
BbzSAAPfvyuspxyvJvwBsayhHK8BAT0PBawUAB8cfAEH4K8_DJUcXlw-QlwfSvwAgQF-UVwxXBH8
AIMBFwHxAzVcDgPbAP8IeTyZHFkcLzoMmfwCcTyRHFEcIQyR-AJCAwYITQAUHHMBCE4DBKoC8AJ8
X0ocFhw4DA9MHF9JHJX8CsgBlzEMARxRHJH8CkMAAU8ANwwOHBMAD1IAA-AEqQx-OTxfNxwvMQx-
L-wEoQxxPK4AP3H8BAABCx88sAAGBR8CkKYMlhx-MjyfNrkDS5EccTwDAQ5VAAgIAQ4lAQe2ALCv
QgyLLH9DL0YMm10APIEsoWABD10AABgsDgAPZgEJEB9lAbE-Onw-OHw-K3w-LugHMRwxfAIAABkC
BGEBGnwFAAUAAnEcH04cH0lcBgCjPBgfSlwVPFb8BBsDhzwxXBE8UfwEHAMxPA4DCwAF8AAFiwDw
DDxWHDs8KwyLHA9EHB9FXBn8BFEcMTwhDIEcAU4AKfwE4QEcPNYAMA8KHAQCCJwC4J87HHovOgya
HKr8AZEcmQELRQMcD4YBDCsBDSEAHQ9SA_9oDMgsryX8AaEMYQzBLGEAAAmcAQ1iBD8PCixgAAig
fy08fys-KqyvL14DX7GsofwCNQIGAAwAH6xMAAAEYAGwrzYMZQw-NJUMrzVJAkthDNEMTwAPrgAR
Pw8IDGQACP8Emx9KPF9HHDt8rzH8AbE8URwxfBIBAAf_ARUcUgIPAgEE9QJ8Pyx8PyqvI738CTF8
8Qv8CTEADjUADhIAJQ8FSQBBO3x7HJ4A-QUsBhxvRPwBMXxxHBE8USwBHGH8AYYAAqoCAhAAFixc
BCUPEFAA_Q08WxxvJQw-G28lDBkcrx78BVEcYQyhDBEcofwF3gAPSwECEQwNAw-2AAbwCT89PC85
DE89TB9FPFscPz0fLhwKDAr8ARADgEFMETxRHFEcRAobAQsDE0y3ABMIfAAAZgAlDA5XAPAKuV8t
HCUMZQwlDAoMCgxb-ALxAhwhDGEMIZEKIgxRDgIYCKkBB00AAWMAIggGywAApgoDEQAk-AKeCdVl
DDVfNhwiDHIvNQwCAgDWDzr8AWEMkRwhDKEMAQIAKPwBUAASDQ0AB2gAEwmOAwYCACT8AWkA42IM
Ml85HJocKgwPOgwLAgBBG-wAYVQIAs4AAgIAA90GOwgGCWYAAgoAEglxAAYCAAM9BABlAPAIbzEM
Px1-HB8lHHg-GR8eHA8uDAUMPz1mADDRHNF-AREMIgUMXgABuQATHAwAAmADASwNAV8AJgcNYQDA
fx4cH0U8X0IcPz1cIwyBJRwfMRwK-AGYAiAcMUEFNRwRHCkBJAkClQICwgASDVEFAQMABhsB5W85
DCoMWgwqDGocKgwKAgAgDzaFAZ8hDFEMIQxhHCGJAQEBxAASDAwABwsALwkchwEGxR8eHBUcHzQc
DzsMAwIA0x8eHB8pHB8vHH8e-ATDABYMAgACEgABdAcEvQAXDAIABRUAAnwANAL8BG0AIQ805gEi
DzrQADU-DAUCAEUPPgwBAgCPvz38AA8BDAMCAA5fs-wADgwCABBBDzMPKIwABVMEBdMM9BJVHzEc
BwyvHgy-JhwfSR8uDAv8BHMcAwyjDLMcMwwD-AQ9ADAODzPoABkKSgAMEACXDwUcDgoOCgwO9QAR
OtQAIF89ZAETBQIARQ9BDAcCAEKvQvwB0ABPUxwDDAIAATOj-AHKABEKcQAKcQEGAgAnCguMAAKK
BAEUDkC7HB8n0AFlHzYPNQwEAgAA6AH1AEIcP0b8ALMcExwTHCMMAwIAABAAOjP8AFMAAd8AAgMA
Jw4MAgADFAAVCxoDgg8wMBwbHA80zwHzACccHyYcHywcHzK-QvwCE_UAAnQAMNP8AjwADsAACW0A
LwoLvwECUw8wMA8xUwFABQwfN9EA9AUqHD9CXF9EH0YfJQwVDD8d-AADDAIAEDPVAGlckwwTDDM6
AhQKaQAyCw1cbgACxgEAAwAJ1QBFDzcMBwIARQ82DAQCAEIPOwwBAgB4LB86HBQcOHgADwIABBQs
ZQEPxAINHyxiAQLzBL8nzyMMhgw9PDb8APMJDIMMMzyyAQKTBgUvAQ8TAAA5DwQMFgABDgAcPGEA
4D1fQgwfRA8-DA9CDA9JVgqRPyd-LfwA8wIMLAJfHBMc8wBzAAoTDCoCBL8ABAQAAy8ACG0A4S4P
PwxvKgwfR19EHD841gB-wwxjDHMcc9cABCcPZMQAAcUBAg0ABWkADNAA8QIYDA81DAUcJQz-Lww8
OvwAE8QAQiMM8wxiAAOpAC8LDG0AAQGGEC8jQFgAAfEhHxscH0IaKAwfSw9ODD9LDAkPPwy2PD8e
DA9BDz78ARMcYwwjDDMMEwyzPDMME-wBDAEiDgpqAAL3Ai8MHnUAARI8GwAHygP-C78lvx5ODB4v
NAwxPC8--AHzDQxDDDM8I-wB_AETAhMAFAx9AEcLDTwuXgD1GhwfPT8qPIYcHz8MHz0PRB9CHhwP
LDw-HvwGUzyDHBMMYxwDPDP8Bg4KBgEFXwARHC0DER5KAwEaACX8BFcA8Q8UDBQMDy4MGBxfRx9Q
HB9CPxxvLAw3PB8q-AITDBNtBJFzHMMMMzwT-AJHAARUBAJgAAELAAo5AhMMgQAl-AJlAJ-xFHb8
BPMc-AT2AAYP0AEGAxsAB7IAcD8vHBQ-NBo0BfMKSgx6HBoMFSw6-AAzHHMcExxDDHMcEwwTLJUC
A5wAAiEIAuUCAWEBMQsNCVYAAhkBGywzAvcFNRwUPnY8fSx2-AUzHNM8cyxz-AVOAAY-ABY8CwAW
LAsAJfwFSgDQPB80HB84AQz-KhT8BMQFIPMUBAEUHFoCHwn3AAEfMBoAAQefAPABj0IMEf9HBhy4
-ACDDPMIHGkHBzIAAkACD1sAAy4gHBsACOcD7jj-PwsMd-wA8xcMc-wALAAPWQAGF3DPAAg4BFAc
djx9PEYUb-MEPHM8s1QACx88CwACD6gAAf8GLxYcOjyPLCyfL-wC0xwzPIMsk-wCWwABAfAACU0A
GiwnAAelAv8CfTymDP8uCPwAczyjDPMI-ACPAAgPvgEHF0CoAPAArzgMGh8xHy8fMT8vm1wOqwu-
BaMM8wZcAwwD-AVUAAAEAgAqCw0dABBcGAoZBaoA8AMvTwxfNxwfQwwOD0IPPh86-AS3AJ8jDFMc
EwxD-AS8AAwEwAAAAQMnPgpdA-AFvL8qHH8uPA9CDA4sPz78DLMcczwOBz4z-AzzABgcZgABCgcJ
SAO--Aj-Nwj8GPMI-BgvARLzCygMH0QfUFwUHBQ8-zII-AAjDDNcExwTPPMIfhYBIgERXNYBHzxS
ABLwEEwPQhw1Hy8cGhw6HA9ODAEfSgw3H0MVDF8_-AYDHFPiB8IcAwwjDHMMU-wGDhx5AQQqBEAc
DgweTgMCQAQiHgyZAQiSBfkDfz8cXyNc_wj8AnMcU1zzCPwCWwQBCwARXAgAHwaoAAvGbysM6Az4
CPwAYwzjewIBvA0EDAI1BgQCuAECDAAYDQQAB3cB8AR-Jz8maAwvJww7LD8mDD82-Ajz5AB8Mywz
DDP8CEEANQkGBBECAcEBAQoAJvwITwDQMTw-NTw6PD8nPya-JR4DZDM8MzzzBKUAEgRiAgYFAAda
AA_9AwHQby4MPzI8PzQ8ry4MsfIAAE8AM6MMs_QBADkAGgxRADUJBgSZAA9VAARAaAwoDC8QMCc7
fKQAANQHTGMMc3xVABcM8gABpAAffFQACDChDLFXAFGo-AGjDEIBNaP8AU4AFwZOAA9MAQIGVQAH
7AsSfA4QUKEMsfwIogAQI8sMAZQBHgxAAA-1AA7yBX8nLyYMfyU8PzI8Nzw-NDr8AKMMngE_c-wA
qgAPqwEEB1EA8Aj-KgcMLzkMJQwVHKX8AfMHDCMMIwwTHOIMC4YABKsGFAyYAwBjAB8c_AAGIB4s
pQrwBT9fRS9MDBg8-yoE-AQTLAMMkwwTSQIwBB4sawMAPAABcQMfPG4ABBcAqASf-yYM-BTzDPwU
LAAENoD8FCwAHx8sABeg8QYc8QT8BPMGHJkADzEABC8gHKIADeABMP8qDRwfNAwX-AzzDZMIL-wM
NAAEEpCFCCT8DDoANgzxHC0JDzEAAEXwCfwDZgAfHywADgWSAPAEHzscHzccLzsMFR4cHzk8vxiv
NwALAJcIEDNmBRAH5wESHMcBAe0EBWcFKgYErgcN4wETAcEZkTy-I78Yry-8A7cFPxP8A0UAAw9V
ABX4AL8mvHscHzyl-AGzvHMcw38DAi0AFLwNAAObCQ9FAAHmjx8svxz-Hwj8AIMs8xS2BAQLCEoG
BAIIhwAPDwADJfwAlwAhLxxCASKx-CgPSzyz-AwtABoc_QAEQwAF5AEQFYsB0FUcFxwlDA4MH0Mc
HzJzEYEfPPwLHwEcE5oGEiPpDwAGAEL8Cw4KUgAnCw2jAQJzAwEIACb8C50AFDxWAHAsD0UPQwwX
4hojszxRADcsEwxIASIPGp0AFzxTABQs6gYEHQAITQHAbx8MPx7-NAQMDz8cfQlzYwzzCAwDHH4J
ADIAAQoBC-gAA40CEgDCDQQaACX8ArQAQzh8TzYpEOMFDBUcJQxV-ACzfEMMAwIAAL0AO1P8AFcA
Ar0FJAwOAgADxAABJQAGrgFFDz4MBwIAIqcsCAB6BwwXHCcMVwgQIqMsCAAGcAAI-A8IfAATLBQA
D3QABjU4DAUCALZ-Ny82DO8v-AkDDAIAfqMM4-wJDgxgAAZPAAk-AUQPAvwJXgACph91BwEwD0IM
BQIAQKUMBSwIACA1HMAFGxXbADIMAyxlEQDRBRATHwYoDA6EEwdxACEMDt8AQx4PMwvdAFQcDgr8
AHQABikTAXQAAwIAAHYALiUMdgAF3REBSwYMeABHCgsPIHgAAwIAJB4KeQAnCwx6AAX3AIW8fzf8
KHP8KD8AJ-wcGgBSAg82DA0CAHP8DXP8AgMMAgAm-A0xADkCDgxvFWMHATAcDz7MAFQFDMUMBQIA
AVQBAQIARPwDAwwCADTDDAMCABYsYQA9Aw4M2wAmDwrVEQQCAB4sfgDiryyMPyq8vy78AKOMM7wp
DQhBABGMEAAA8AQeCA4IAB0BjAjPI-wjw-wjIgBFDwT8C_IAM0IMDQIAQ70cDQwCABMsCAAoDA3i
AC_zHOIADwlpAB8c3wAJCGAVTrUcBQxdAQ97AEaAvH8rPL8v-Bh-DhQYOgACJiIHRwAl-AyqABI4
DQE3DA2MlQRmBQy-IvwC_RYWjJ0EAOsWBlACEYxWAC8MDq0ABgYmBBccXQBXLK8qDLetAjkM8wdX
AA1HAAoQAA9mAAkiDz7PAFEMDSwPQW4AgD9GHB89DAccCAUvDQz-AQEULLcDNhMMA44BDYoBFiyc
AABaJQaIAQiEAQCFAIO8vywcDzEMCQIARA8yDAajFUcPOvwN8gEJagAAsgMaCMQbCO4BD2wAAyG-
IdkAAQIAXiwPOgwCAgAv-AFkAgIIAgAv-AF8AAsGagIPhgADFxydBdh-SRwPQQz1AQwGDC9E6gIA
zRgQ81QCGCPfAgScAgIwFR8MiAABAlIHEgN8AQh1ABI7ywEF1gNQD0EMDSz0ABEH_gAAcQEwAgwG
AgAO7gEODAEP8gEHDwEBDyi-LfIBaK8eDLX8AOgBAfMND_ABDAgKAQIjAA8OAQIG7QJBvLgcB_UA
AfwBBPkCGQRiAgbkAA9gAg0fLNcAAGH-KgcM8gceDQIyCw5BAA4UAB8MJwATBmYARQ8-DAYCABcO
AgATBgIASA87DAkCAASmGg8CABYFthoPAgAVB50APzoMBQIAAhcJAgAWDQIAD5wAWQtcBlIODA80
DBICAAIAADoBjz9CP0Y-RPwC9AIMCX4FD_wCAwHWAQQEAAaEAiGPRGwAow4MX0Ycv0QcBAwCAET8
AYMMSxwvsxxpBAYCWgAWDAEED6MCCgb6ACYKDAIAFwcCABcKAgATBJkBTwQMDzKWAVmArx4Mogyi
DLKiEB_j_gMFHwwTACUIAQQDbAEA7gAD6wsAYgZBLAoMCf8AEAp7BhQFAgAJAwEeLBECD-8ABx8s
GwIMCDAErwj-Iwj8APMg-ADKBQcuI0DrBApzEAbjADEcDzrJAmQEDAQsBgwCAJ_-SwwULB8-P0fa
AgNfswwTLFPSAgQPdgAAAhYZCtgCIhwGUgEiLAdgBawMBwz-Kgj8AgMsbQABChUcLGgAD_IAFye-
RLUIWgy-S3w5OwYis3zgGQ8YAwgP1gACG3zRAAIfAgBIAQIVAwACAFC-P389H60SD0gBA0-zBgwD
RwEXCBQAAKoPB3wAJA0MAgAgv0IhAhcCZAAXFGIAD1gAAg9LARcv-x5-Aj4CtgABdALYQh8jHE8v
DAkaHBkcScMAUNMcQwwjkBsPygANAkEPcwgPGgweChwNABcCvwBWLwi5vz2-AB8CngACHkAbAAUj
AQcXAAZXAHA8SxxZDA9EOx_xH0y-LK8x-AVDHFO6ACHzCZoZMwgCHD4AA7sAAQ4AHwViAAIDFgAG
9APzAhxvIyx-OD8vrywMvyr8AmMszQsDLQASLAkAEAcUAiMLCA0AFwTfBAYPAAjbBPwJ-yMISAwP
OBwvP682DyP8APMNDAMc4-wAMgAJFQECcxEKIwAHhwLyEIwvNBxZDzYfNMgcLyUvMQwfPfwKIxzz
BhxTDBP8Cg6JD14IAgUeCmYAA1kAJwwO_gBl-Ai-J78e9BkJMgAP2gAH4I8cLJ80DzgMrycPR78t
qRMFgRsDMgAEMwFlBA0PCA4MDQBFBg8GHgwAFglTAAD1FdIsCL87LH8e-AHzFCxzZQcFKAAJIwEE
FQAFZAAl-AFGAFAMTx4cP2Mh9hAfSQwRL04MAf84ACxPLPwBTwEcMwwjDEMM8wEsQ-wBMgICNBoA
4R0eHnIAEyzfAiX-AKcAkDsHDL9CfzT8BFEKAnMWDagAKTAMFgAEDQAl-ASoAPEFHxcvJxw-Oww-
RQwRL0IMAayO-ASjAHAzDEMMA6yDWAAEzgEDiQUDpgAmDqxmASj8BLwbFhy8GwMgAC8GCb4aAvEA
-z8HD0n-OAMMPy-8APMbwCMPNAABLzAeFgABGAyVBQBOABotsgQNRwAfQJEADzBOAh_yAaAB-zsE
PzT8APMG1wMPTgACEBMGAS8MHlIAARwAmQBAIwYc_5kATwYc8whOAAMCGhgPnQALsLyfMRy-Ir8j
-AyTSAAXDDEAHxznAQJJDQYJAVokIL8xghVyHyL8Af8BHLQiBioACAwABqIEAxAAAY4AEROyAwaD
ArB-OyxPNiw-I4w-K6ofYnMsQywzjDskIQ8oPAAQLCABAbwCGIyyBAuZAPIEvH8lPM8ibBMfIfwM
fwE8ymw6-N4nAUQAFjwLAAKLAGdsDg8zDgtAABF8MQXxB3MMLyu-O-wI7wEMegzq-AgOCw8oDyDK
AAEKAAFBABYMDAABCwAzDgsIGgApDwiUAOHDLD80PM89bDv8AMosOpQAGgAtADEPBCwRAFc8DgsI
BhYAEGwQAAiqA-AAfD84-ywFLL8q-Aj6CSy6mgAoCB40AAVBABUsCgAcAyEB9AM-I7yfOwwPIfwM
vwG8mgwK-AwsAAAIABa8OQAnDA45APYCXP84Ary-LfwG_gK8uvwGDgsoACMPBtYBGbwUAAc9APIG
Xz1cPzE-MCz-Hgf8Alpceiz6B-wCLQAQXAcAAAQAHyxRAAAnKjAcIYD2CP8tCPwA_pQDDysAAB9A
FQACB4UAELyDAMI8-yMH-A16PPoH-A3RAQA3AB88fAADGgH_AK_vNvwH_gK8qvwH-gAPBzwA8AK-
Mj8xLDkM_wf8AfoALDoM_rMPBysAJQ8F-wAaDBgAD4kAAFD-KQA8OQIEf-oAPPoM-AAxAAEBzgAP
SgACCA8B9AD8ADE-L7y-HvwQery6-BA0ABq8OQAGIQcw_AcMHiBE_gcM_gwhD2MAAS8QDHoAC3AB
MAxPLwwvfDpRCQ8_CQsCADUMCQsCAPEJD0QsPy8cLgsO-AFKDDoMigy6LDocSvwBvAMiBgLPA2IO
DI4MviwTAACjOhYuXwCyXygPSRwIHC9MDC8vOvEMLD8vLC9CD0RPKPwHahwKHCoMKgwaLDosivwH
xgABRQAQDloyAAoAAmAAIwweXQACBwARHgwANgL8BxQKOwcM9Q4BAiQAAOsJDRIBDhsADRYB8xA-
TAwJDAsJCwwLTygJDCsPRywfUA82DB9KH0cMBwsOAgAwB-wCHS3TKgxqDDosKgw6DKr8An0AcAwO
DC4MHghpAHAODA4IHiwOpghWCA4IDK7mGk8PQg9EBAABYwwFD0IFBAIA8QdPKDwXDL8y-AC6DPoA
PBoMuvwAvgy_WgByPA4IDA4IDcwALg8NRwkDxQHwDx9KHAcsH04MD0kMD0wPSRwfTAwfNAkMKwkL
DzgJAwIA8A0MJfwBihwKLBoMCgwaHBoMKgy6DCr8AX4IHA4sZQAxDB4cbAAAxAAQnnQABAUD9QIB
MCw-NAwvQgwEPy8sJAwEBQIAIAw09hEAXgDA-AM6DCoMSiwqDKoMMAGASvwDDggNDyBIAGAMHggN
BiwJABCuDwAA2xIWTsAAsP8hBwzyACwPFfwE3AFQACwK-AQmAA_UDAM-KjAMHQAHFSzlLfITATAM
LRwEDA9FBBwXDB8rHzQPNw80DiwLDzELBQsMDzkPNwQAcAwPKyUMBQsCAEL8ASocGQFAaixKDAkD
dlr8AQ4IDRwZAcYILixODE4MHggODF7BALQyPA9DDB4MDz0JAwIABF8ABWcAbwMcDysPLQQAAfEB
-AA6PAoMGgz6AwwKHLr8ADYBAFglhggM-gMMDhy_aQBRCw83CwYCAEAeLB9HaxYACQfwAxwfSQwf
QwwjDAIcbzn8AqosGscAUAwKHBoM5AGgChxq-AKeCCwOCMkAIgwOywAARQEBDAAyDQ8gTAEGsgLy
BSwfKwscKQMJLTwPQywXDB8tTA4MOAGACxP8ByocejxEArEaTAoMOgwq-AcOCEgAQi4IDTxIAoYI
TA4MPgweCIwBcf0HDP0A-AjfASf8CHUAD94BAA8eAAgEnyRUATA3Li8LAfAJBgsPQxkcMiUuHDkM
HzkMLvwB_gYcmhw6-QABwAGQDyAOCA0OCL4IpgBCBA4IHrAAEwQGAQblAhcJwgHgDDIPLxwGDAYL
BgUtDCsfAvEBvyv8AKoMShwKDGoM_gP8AMsCEAT9GBBOSwF-CF4IDQQPGqUDBUAMLyoMMT7xAw8y
Dy8PLQ8qDzIMBw8vBwMHDAIAQAULBQ9oAABDFTARDFE-MgBxBBFKvxMRSggAURoMWgwK0QBBDG4M
Tp8OUE4MDgguuANIDC4IHmcQoAMHAwkDBw8qCQIJAGIJDykJBgwCAFG9-Az6AVYAkgoMuvwM-gEM
DgIAD74AAQW4ILICCQIHAh85DDscGe4DkAMJDAkNDzQPMQQAEAkZEMApDCkMGQwJ-ABqDDpDAyEM
ejUFECqKAjH8AF5rARAEfAIxbgx_OAUpLgyzAMJ-Ozw1DAscD0UsdQxZAPMGDBYMJgEWDAb8AHo8
OgwKHAosegwqBwEYALAAEjzOAQHGBAYWAAFhADgeCC5lAPQUdQ8VLD8hPA8VLC9FH0IOHDsiDCIM
EgwC-ACKLDo8CixaHGqyAAHjBQNPAAJZAAHeAiENLjwCDb8A8xE-IRwfQg9FLDUcPz4cdVwfOPwI
OhwqLDocOhx6XBr8CP4AAkoAFRwFAAStACZcHtwC4C9KGR9FDDe-KU0JDQxbMBswBgxGWAFB_gcM
WrkBEkqfADIeCA5XAQ_9AQFBHggNLh0AApw9BeMBBrMAQLI-KXy3AL89-BD6AHw6HBr8EEkABBN8
sAAv-BC_R_lw--------MQ==
:: music/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTA0IDE5OjI5OjEzIixtb2RpZmllZD0iMjAyNS0w
OC0xMyAwMToyOTo0NCJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA2LTE4IDEyOjEzOjQ0Iixtb2RpZmllZD0iMjAyNS0w
OC0xMyAwMToyNzozMiIscmV2aXNpb249MjE3OV1dbHo0APQAAAA9CgAA-zBweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDQA8PkAQFBgdADJAICQoLQAyQDwwPDQ8ODEAM8P8BAOvxBKoB
EAYPIBABIAEPGBAB8AACEAIPAPUqDyEgATAPMpAPEQ8SIA8gUAEgAeABCCAPUCAPQhAC8IsNDyfw
xw-4Cg--D4AP9w8NAXAPcA9PD1DQUAASIE4AFQ5NAJhA8MMPKA--8MY3AG-wCQEQBg4wAAMCfQAQ
DnwAr-CoDzEP-w8o8MV0AAQfDnMAGQ8wAP------MR--AQCsv8gPQAANQP--sPD-AQD-6lD-----
KQ==
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA2LTE4IDE1OjQxOjM5Iixtb2RpZmllZD0iMjAyNS0w
OC0xMyAwMToyOTo0NCJdXQ==
:: bead.lua
--[[pod_format="raw",created="2025-06-18 13:37:09",modified="2025-06-27 14:29:25",revision=1842]]
beadid=0

function new_bead(offset,position)
	return{
		id=-1,
		color=0,
		sprites={},
		death_anim={},
		death_anim_countdown=16,	
	
		offset=offset,
		position=position:clone(),
		
		visual_position=position:clone(),	
		sub_position=new_point(0,0),
		matched=false,	
		init=function(self)
			self.death_anim_countdown=16
			self.id=beadid
			beadid+=1
		end,
		update=function(self)
			if(	self.matched ) then
				self.death_anim_countdown-=1
				return self.death_anim_countdown>0
			else
		 		if(self.visual_position:equals(self.position)==false) then
		 			self.visual_position.x+=sign(self.position.x-self.visual_position.x)/tileSize
		 			self.visual_position.y+=sign(self.position.y-self.visual_position.y)/tileSize
			 		return true
		 		end
		 		return false
		 	end
			pq("wtf?")
		end,
		draw=function(self)
			if(self.visual_position.y>3) then
				if(	self.matched) then
					local sprite=self.death_anim[ceil( (16-self.death_anim_countdown)/4)]
					spr(sprite,
					self.offset.x+(self.visual_position.x-1)*tileSize,
					self.offset.y+(self.visual_position.y-1)*tileSize)
				else
					local sprite=get_frame(self.sprites,10)

					spr(sprite,
					self.offset.x+(self.visual_position.x-1)*tileSize,
					self.offset.y+(self.visual_position.y-1)*tileSize)
				
				end
--				if(self.matched) then
--					spr(16,
--						self.offset.x+(self.visual_position.x-1)*tileSize,
--						self.offset.y+(self.visual_position.y-1)*tileSize+self.sub_position.y)
--				end
--				print(self.id,	self.offset.x+(self.visual_position.x-1)*tileSize+3,
--				self.offset.y+(self.visual_position.y-1)*tileSize+5+self.sub_position.y,0)
			end
		end,	
--		draw=function(self)
--
--			spr(self.sprites[1],
--			self.offset.x+(self.position.x-1)*tileSize,
--			self.offset.y+(self.position.y-1)*tileSize)
--			if(self.matched) then
--			spr(16,
--				self.offset.x+(self.position.x-1)*tileSize,
--				self.offset.y+(self.position.y-1)*tileSize)
--			end
--			print(self.id,	self.offset.x+(self.position.x-1)*tileSize+3,
--			self.offset.y+(self.position.y-1)*tileSize+5,0)
--		end,	
		
	}
end

function new_red_bead(offset,position)
	local ret= new_bead(offset,position)
	ret.color=1
	ret.sprites={1,9,17,25,17,9,1}
	ret.death_anim={33,41,49,57}
	return ret
end
function new_green_bead(offset,position)
	local ret= new_bead(offset,position)
	ret.color=2
	ret.sprites={2,10,18,26,18,10,2}
	ret.death_anim={34,42,50,58}	
	return ret
end
function new_blue_bead(offset,position)
	local ret= new_bead(offset,position)
	ret.color=3
	ret.sprites={3,11,19,27,19,11,3}
	ret.death_anim={35,43,51,69}
	return ret
end
function new_purple_bead(offset,position)
	local ret= new_bead(offset,position)
	ret.color=4
	ret.sprites={4,12,20,28,20,12,4}
	ret.death_anim={36,44,52,70}
	return ret
end
function new_yellow_bead(offset,position)
	local ret= new_bead(offset,position)
	ret.color=5
	ret.sprites={5,13,21,29}
	ret.death_anim={37,45,53,71}	
	return ret
end
bead_bank={new_red_bead,
new_green_bead,new_blue_bead,
new_purple_bead,new_yellow_bead
}
:: camera.lua
--[[pod_format="raw",created="2025-06-18 13:01:48",modified="2025-06-18 20:03:06",revision=392]]
camera_helper={
camera_point =new_point(0,0),
camera_desired_point =new_point(0,0),
camera_shake =new_point(0,0),
shake_intensity=0,
shake_timer=0,
shake_time=0,
camera_shake =new_point(0,0),
-- Function to set the camera position and update the variables
set_camera=function(self,point,instant)
		self.camera_desired_point=point
	if(instant) then
		self.camera_point=point
	end

end,
get_camera=function(self)
    return self.camera_point
end,	
update_camera=function(self)
	self.camera_point=self.camera_point:lerp(self.camera_desired_point,0.5)
	 self:calculate_shake()
	local c=self.camera_point+self.camera_shake
	 camera(c.x, c.y)
end,

shake_camera= function(self,intensity, t )
	self.shake_intensity=intensity
	self.shake_timer=t
	self.shake_time=t
end,
calculate_shake = function(self)
	if(self.shake_timer>0) then		
		local strength=self.shake_intensity*self.shake_timer/self.shake_time
		local point=new_point(random(-1)*strength,random(-1)*strength)
		self.camera_shake=self.camera_shake:lerp(point,0.5)
		self.shake_timer-=1
	else
		self.camera_shake =new_point(0,0)
	end
end
}
:: cursor.lua
--[[pod_format="raw",created="2025-06-19 02:43:31",modified="2025-06-23 17:21:40",revision=774]]
function new_cursor(offset,position)
	return{
		sprites={8,16},
		offset=offset,
		position=position,
		init=function(self)			
		end,		
		update=function(self)
			local old_pos=self.position:clone()
			if input:button_press(input_lookup.lpad.left) then 
				self.position.x=mid(1, self.position.x-1,6)
			elseif input:button_press(input_lookup.lpad.right) then 
				self.position.x=mid(1, self.position.x+1,6)			
			elseif input:button_press(input_lookup.lpad.up) then 
				self.position.y=mid(6, self.position.y-1,10)
			elseif input:button_press(input_lookup.lpad.down) then 
				self.position.y=mid(6, self.position.y+1,10)
			end
			if(self.position:equals(old_pos)==false) then
				if(game.state==1) then
					game.field:swap(old_pos,self.position)
				end
			end

		end,
		draw=function(self)
			if(game.state==1) then
				spr(self.sprites[2],
						self.offset.x+(self.position.x-1)*tileSize,
						self.offset.y+(self.position.y-1)*tileSize)	
			else			
				spr(self.sprites[1],
						self.offset.x+(self.position.x-1)*tileSize,
						self.offset.y+(self.position.y-1)*tileSize)
			end
		end,	
	}
end
:: error_explorer.lua
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNS0wNi0xOCAxMjo0OTowMiIsbW9k
aWZpZWQ9IjIwMjUtMDYtMTggMjA6MjQ6NTIiLHJldmlzaW9uPTQ0OF1dCi0tICMgcGljb3Ryb24g
ZXJyb3IgZXhwbG9yZXIKLS0KLS0gYnkga2lyYQotLQotLSB2ZXJzaW9uIDAuMC42Ci0tCi0tIGFu
IGludGVyYWN0aXZlIGVycm9yIHNjcmVlbiBmb3IgcGljb3Ryb24uCi0tIG9uIGVycm9yLCBzaG93
cyB0aGUgc3RhY2ssIGxvY2FsIHZhcmlhYmxlcywKLS0gYW5kIHRoZSBzb3VyY2UgY29kZSB3aGVu
IGF2YWlsYWJsZS4KLS0KLS0gIyMgdXNhZ2UKLS0KLS0gYGluY2x1ZGVgIG9yIGByZXF1aXJlYCBg
ZXJyb3JfZXhwbG9yZXIubHVhYAotLSBpbiB5b3VyIHByb2dyYW0gX2FmdGVyXyBkZWZpbmluZyB5
b3VyIGBfaW5pdGAsCi0tIGBfdXBkYXRlYCwgYW5kIGBfZHJhd2AgZnVuY3Rpb25zLgotLQotLSBw
cmVzcyBgdXBgIGFuZCBgZG93bmAgdG8gbW92ZSB1cCBhbmQgZG93biBvbgotLSB0aGUgc3RhY2ss
IHByZXNzIGB4YCBvciBgc3BhY2VgIHRvIHRvZ2dsZSBmb250Ci0tIHNpemUuIGNsaWNrIG9uIHRh
YmxlcyBpbiB0aGUgdmFyaWFibGUgdmlldyB0bwotLSBleHBhbmQgdGhlbS4KLS0KLS0gIyMgaG93
IGl0IHdvcmtzCi0tCi0tIGluIG9yZGVyIHRvIGNhdGNoIGVycm9ycyBhbmQgaW5zcGVjdCBydW50
aW1lCi0tIHN0YXRlLCB0aGlzIHNjcmlwdCByZXBsYWNlcyBgX2luaXRgLCBgX3VwZGF0ZWAKLS0g
YW5kIGBfZHJhd2AgZnVuY3Rpb25zIHdpdGggb25lcyB0aGF0IGNhbGwgdGhlCi0tIG9yaWdpbmFs
IG9uZXMgaW5zaWRlIGEgY29yb3V0aW5lLgotLQotLSB3aGVuIHRoZXJlJ3MgYW4gZXJyb3IsIGl0
IHVzZXMgbHVhJ3MgZGVidWcKLS0gbGlicmFyeSB0byBpbnNwZWN0IHRoZSBjb3JvdXRpbmUuIGEg
Y29weQotLSBvZiB0aGUgZXJyb3IgaXMgYWxzbyBwcmludGVkIHRvIHRoZSBjb25zb2xlCi0tIHdp
dGggcHJpbnRoIGlmIHlvdSdyZSBydW5uaW5nIHBpY290cm9uIGZyb20KLS0gdGhlIGNvbW1hbmQg
bGluZS4KLS0KLS0gdGhlIGZvbGxvd2luZyBkZWJ1ZyBhcGlzIGFyZSB1c2VkOgotLQotLSAtIGBk
ZWJ1Zy5nZXRpbmZvYAotLSAtIGBkZWJ1Zy5nZXRsb2NhbGAKLS0gLSBgZGVidWcuZ2V0dXB2YWx1
ZWAKLS0gLSBgZGVidWcudHJhY2ViYWNrYAotLQotLSAjIyB2ZXJzaW9uIGhpc3RvcnkgCi0tCi0t
IHZlcnNpb24gMC4wLjYKLS0gLSBvbiBlcnJvcjoKLS0gICAtIHNob3cgY3Vyc29yCi0tICAgLSBt
YWtlIHdpbmRvdyByZXNpemFibGUKLS0gLSBhdXRvbWF0aWNhbGx5IGFkanVzdCBsYXlvdXQgdG8g
d2luZG93IHNpemUKLS0gLSBzdXBwb3J0IHlpZWxkaW5nIChzaW5jZSBmZXRjaCBzb21ldGltZXMg
eWllbGRzKQotLQotLSB2ZXJzaW9uIDAuMC41Ci0tCi0tIC0gZnV0dXJlIHByb29maW5nOiBncmFj
ZWZ1bGx5IGhhbmRsZSB3aGVuCi0tICAgdmFyaW91cyBwYXJ0cyBvZiB0aGUgYGRlYnVnYCBtb2R1
bGUgYXJlbid0Ci0tICAgYXZhaWxhYmxlCi0tCi0tIHZlcnNpb24gMC4wLjQKLS0KLS0gLSBhbHNv
IGNhdGNoIGVycm9ycyBpbiBgX2luaXRgCi0tCi0tIHZlcnNpb24gMC4wLjMKLS0KLS0gLSBhdXRv
bWF0aWNhbGx5IGNob29zZSB0aGUgcmlnaHQgc3RhY2sgZnJhbWUKLS0gICBiYXNlZCBvbiB0aGUg
ZXJyb3IgbWVzc2FnZQotLSAtIG1vcmUgdGhvcm91Z2hseSBwcm90ZWN0IGZyb20gZXJyb3JzIGlu
IGVycm9yCi0tICAgZXhwbG9yZXIgaXRzZWxmCi0tCi0tIHZlcnNpb24gMC4wLjIKLS0KLS0gLSBk
b24ndCByZWdlbmVyYXRlIHN0YWNrIGluZm8gZXZlcnkgZHJhdwotLSAtIHNjcm9sbCBzdGFjayBh
bmQgdmFyaWFibGVzIGxpc3Qgd2l0aCBtb3VzZXdoZWVsCi0tIC0gY2xpY2sgb24gc3RhY2sgdG8g
c3dpdGNoIHN0YWNrIGZyYW1lcwotLSAtIGNsaWNrIG9uIHRhYmxlcyBpbiB2YXJpYWJsZXMgdmll
dyB0byBleHBhbmQgdGhlbQotLSAtIGVzY2FwZSBzdHJpbmdzIHdoZW4gcHJpbnRpbmcgdGhlbQot
LQotLSB2ZXJzaW9uIDAuMC4xCi0tCi0tIC0gYWRqdXN0IGNvbG9ycwotLSAtIGNvZGUgY2xlYW51
cAotLSAtIHVzZSBgYnRucGAgaW5zdGVhZCBvZiBga2V5cGAKLS0gLSBzbGlnaHRseSBtb3JlIHRo
b3JvdWdoIGByZXNldGAKLS0gLSBkb24ndCBzaG93IHRlbXBvcmFyaWVzCi0tCi0tIHZlcnNpb24g
MC4wLjAgKHByZXJlbGVhc2UpCi0tCi0tIC0gaW5pdGlhbCBkaXNjb3JkIGJldGEKCi0tICMjIGxp
Y2Vuc2UKLS0KLS0gQ29weXJpZ2h0IDIwMjQgS2lyYSBCb29tCi0tIAotLSBQZXJtaXNzaW9uIGlz
IGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcg
YSBjb3B5Ci0tIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBm
aWxlcyAodGhlIOKAnFNvZnR3YXJl4oCdKSwgdG8KLS0gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0
aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUKLS0gcmln
aHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3Vi
bGljZW5zZSwgYW5kL29yCi0tIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBl
cm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzCi0tIGZ1cm5pc2hlZCB0byBkbyBz
bywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6Ci0tCi0tIFRoZSBhYm92ZSBj
b3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1
ZGVkIGluCi0tIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3
YXJlLgotLSAKLS0gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIOKAnEFTIElT4oCdLCBXSVRIT1VU
IFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCi0tIE9SIElNUExJRUQsIElOQ0xVRElORyBC
VVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLAotLSBG
SVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBO
TyBFVkVOVCBTSEFMTAotLSBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFC
TEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgotLSBMSUFCSUxJVFksIFdIRVRIRVIg
SU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORwotLSBG
Uk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNF
IE9SIE9USEVSCi0tIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KCi0tLS0gdXRpbCAtLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpsb2NhbCBmdW5jdGlvbiBmaWxlbmFt
ZV9vZiAocGF0aCkKICByZXR1cm4gcGF0aDptYXRjaCAoJ1teL10qJCcpCmVuZAoKbG9jYWwgZnVu
Y3Rpb24gc2FmZV90b3N0cmluZyAodmFsdWUpCiAgaWYgdHlwZSAodmFsdWUpID09ICdzdHJpbmcn
IHRoZW4KICAgIHJldHVybiBzdHJpbmcuZm9ybWF0ICgnJXEnLCB2YWx1ZSkKICBlbHNlCiAgICBs
b2NhbCBzdWNjZXNzLCB2YWx1ZV9zdHJpbmcgPSBwY2FsbCAodG9zdHJpbmcsIHZhbHVlKQogICAg
cmV0dXJuIHN1Y2Nlc3MgYW5kIHZhbHVlX3N0cmluZwogICAgICAgICAgICAgICAgICAgb3IgKCdl
cnJvciBkdXJpbmcgdG9zdHJpbmc6ICcgLi4gdG9zdHJpbmcgKHZhbHVlX3N0cmluZykpCiAgZW5k
CmVuZAoKbG9jYWwgZnVuY3Rpb24gZ2V0X2xpbmVzICh0ZXh0KQogIGxvY2FsIGxpbmVzID0ge30K
ICBmb3IgbGluZSBpbiB0ZXh0OmdtYXRjaCAoIiguLSlccj9cbiIpIGRvCiAgICB0YWJsZS5pbnNl
cnQgKGxpbmVzLCBsaW5lKQogIGVuZAogIGxvY2FsIGxhc3RfbGluZSA9IHRleHQ6bWF0Y2ggKCco
W15cbl0qKSQnKQogIGlmIGxhc3RfbGluZSBhbmQgbGFzdF9saW5lIH49ICcnIHRoZW4KICAgIHRh
YmxlLmluc2VydCAobGluZXMsIGxhc3RfbGluZSkKICBlbmQKICByZXR1cm4gbGluZXMKZW5kCgps
b2NhbCBmdW5jdGlvbiBjb21wYXJlX2tleXMgKGEsIGIpCiAgbG9jYWwgdGEgPSB0eXBlIChhLmtl
eSkKICBsb2NhbCB0YiA9IHR5cGUgKGIua2V5KQogIGlmIHRhIH49IHRiIHRoZW4KICAgIHJldHVy
biB0YSA8IHRiCiAgZW5kCiAgaWYgdGEgPT0gJ251bWJlcicgb3IgdGEgPT0gJ3N0cmluZycgdGhl
bgogICAgcmV0dXJuIGEua2V5IDwgYi5rZXkKICBlbHNlCiAgICByZXR1cm4gc2FmZV90b3N0cmlu
ZyAoYS5rZXkpIDwgc2FmZV90b3N0cmluZyAoYi5rZXkpCiAgZW5kCmVuZAoKbG9jYWwgZnVuY3Rp
b24gc29ydCAodCwgZikKICAtLSBpbnNlcnRpb24gc29ydAogIGYgPSBmIG9yIGZ1bmN0aW9uIChh
LCBiKSByZXR1cm4gYSA8IGIgZW5kCiAgZm9yIGkgPSAxLCAjdC0xIGRvCiAgICBsb2NhbCB2YWwg
PSB0W2krMV0KICAgIGxvY2FsIGogPSBpCiAgICB3aGlsZSBqID49IDEgYW5kIG5vdCBmKHRbal0s
IHZhbCkgZG8KICAgICAgdFtqKzFdID0gdFtqXQogICAgICBqID0gaiAtIDEKICAgIGVuZAogICAg
dFtqKzFdID0gdmFsCiAgZW5kCmVuZAoKbG9jYWwgZnVuY3Rpb24gYXBwcm9hY2ggKGZyb20sIHRv
KQogIHJldHVybiBmcm9tICsgKHRvIC0gZnJvbSkgKiAwLjI1CmVuZAoKbG9jYWwgZnVuY3Rpb24g
cm91bmQgKHZhbHVlKQogIHJldHVybiBtYXRoLmZsb29yICh2YWx1ZSArIDAuNSkKZW5kCgpsb2Nh
bCBmdW5jdGlvbiBwYXJzZV9tZXNzYWdlX2Zvcl9sb2NhdGlvbiAobXNnKQogIGxvY2FsIHBhdGgs
IGxpbmUsIGVyciA9IG1zZzptYXRjaCAoJ14oW146XSspOiglZCspOiguKikkJykKICByZXR1cm4g
cGF0aCwgdG9udW1iZXIgKGxpbmUpLCBlcnIKZW5kCgotLS0tIHN0YXRlIC0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKbG9jYWwgX0cgPSBfRwpsb2NhbCBlcnJvcl9tZXNz
YWdlCmxvY2FsIGVycm9yX3RocmVhZApsb2NhbCBlcnJvcl90cmFjZWJhY2sKbG9jYWwgaW5pdF9k
b25lID0gZmFsc2UKbG9jYWwgdXNlX3NtYWxsX2ZvbnQgPSBmYWxzZQpsb2NhbCBtb3VzZV93YXNf
Y2xpY2tlZCA9IGZhbHNlCgotLSBzdGFjayB2aWV3CmxvY2FsIHN0YWNrX2ZyYW1lcyA9IHt9Cmxv
Y2FsIGN1cnJlbnRfc3RhY2tfaW5kZXggPSAxCmxvY2FsIGhvdmVyZWRfc3RhY2tfaW5kZXggPSBm
YWxzZQpsb2NhbCBtb3VzZV9vdmVyX3N0YWNrID0gZmFsc2UKbG9jYWwgc3RhY2tfbWF4X3Njcm9s
bCA9IDAKbG9jYWwgc3RhY2tfc2Nyb2xsID0gMApsb2NhbCBzdGFja19zY3JvbGxfc21vb3RoID0g
MAoKLS0gdmFyaWFibGVzIHZpZXcKbG9jYWwgdmFyaWFibGVzID0ge30KbG9jYWwgaG92ZXJlZF92
YXJpYWJsZSA9IGZhbHNlCmxvY2FsIHZhcmlhYmxlc19tYXhfc2Nyb2xsID0gMApsb2NhbCB2YXJp
YWJsZXNfc2Nyb2xsID0gMApsb2NhbCB2YXJpYWJsZXNfc2Nyb2xsX3Ntb290aCA9IDAKbG9jYWwg
bW91c2Vfb3Zlcl92YXJpYWJsZXMgPSBmYWxzZQoKLS0gc291cmNlIHZpZXcKbG9jYWwgc291cmNl
X2xpbmVzID0ge30KCgotLS0tIG1haW4gZXZlbnRzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLQoKbG9jYWwgZnVuY3Rpb24gcmVidWlsZCAoKQogIC0tIHJlYnVpbGQgc3RhY2sgZnJh
bWUgaW5mbwogIHN0YWNrX2ZyYW1lcyA9IHt9CiAgdmFyaWFibGVzID0ge30KICBzb3VyY2VfbGlu
ZXMgPSB7fQogIHZhcmlhYmxlc19zY3JvbGwgPSAwCiAgdmFyaWFibGVzX3Njcm9sbF9zbW9vdGgg
PSAwCgogIGZvciBpID0gMCwgMjAgZG8KICAgIGxvY2FsIGluZm8gPSBkZWJ1Zy5nZXRpbmZvIChl
cnJvcl90aHJlYWQsIGkpCiAgICBpZiBub3QgaW5mbyB0aGVuCiAgICAgIGJyZWFrCiAgICBlbmQK
CiAgICBpZiBpbmZvLnNob3J0X3NyYyB0aGVuCiAgICAgIHRhYmxlLmluc2VydCAoc3RhY2tfZnJh
bWVzLCB7CiAgICAgICAgZmlsZW5hbWUgPSBmaWxlbmFtZV9vZiAoaW5mby5zaG9ydF9zcmMpLAog
ICAgICAgIHBhdGggPSBpbmZvLnNob3J0X3NyYywKICAgICAgICBsaW5lID0gaW5mby5jdXJyZW50
bGluZSwKICAgICAgICBkZXB0aCA9IGksCiAgICAgICAgZm5fbmFtZSA9IChpbmZvLm5hbWUgb3Ig
KGZpbGVuYW1lX29mIChpbmZvLnNob3J0X3NyYykgLi4gJzonIC4uIHRvc3RyaW5nIChpbmZvLmxp
bmVkZWZpbmVkKSkpLAogICAgICAgIHNvdXJjZSA9IGluZm8uc291cmNlLAogICAgICB9KQogICAg
ZW5kCiAgZW5kCgogIGxvY2FsIGZyYW1lID0gc3RhY2tfZnJhbWVzIFtjdXJyZW50X3N0YWNrX2lu
ZGV4XQoKICBpZiBub3QgZnJhbWUgdGhlbgogICAgcmV0dXJuCiAgZW5kCgogIC0tIHJlYnVpbGQg
dmFyaWFibGVzCiAgZG8KICAgIGlmIGRlYnVnLmdldGxvY2FsIHRoZW4KICAgICAgbG9jYWwgbG9j
YWxfaW5kZXggPSAxCiAgICAgIHJlcGVhdAogICAgICAgIGxvY2FsIG5hbWUsIHZhbHVlID0gZGVi
dWcuZ2V0bG9jYWwgKGVycm9yX3RocmVhZCwgZnJhbWUuZGVwdGgsIGxvY2FsX2luZGV4KQogICAg
ICAgIGlmIG5hbWUgdGhlbgogICAgICAgICAgaWYgbmFtZSB_PSAnKHRlbXBvcmFyeSknIHRoZW4K
ICAgICAgICAgICAgdGFibGUuaW5zZXJ0ICh2YXJpYWJsZXMsIHsKICAgICAgICAgICAgICBrZXkg
PSBuYW1lLAogICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUsCiAgICAgICAgICAgIH0pCiAgICAg
ICAgICBlbmQKICAgICAgICAgIGxvY2FsX2luZGV4ID0gbG9jYWxfaW5kZXggKyAxCiAgICAgICAg
ZW5kCiAgICAgIHVudGlsIG5vdCBuYW1lCiAgICBlbHNlCiAgICAgIHRhYmxlLmluc2VydCAodmFy
aWFibGVzLCB7CiAgICAgICAgZXJyb3IgPSAnbm8gZGVidWcuZ2V0bG9jYWwsIGNhblwndCBzaG93
IGxvY2FscycKICAgICAgfSkKICAgIGVuZAoKICAgIGlmIGRlYnVnLmdldHVwdmFsdWUgdGhlbgog
ICAgICBsb2NhbCBpbmZvID0gZGVidWcuZ2V0aW5mbyAoZXJyb3JfdGhyZWFkLCBmcmFtZS5kZXB0
aCkKICAgICAgaWYgaW5mbyBhbmQgaW5mby5mdW5jIHRoZW4KICAgICAgICBsb2NhbCB1cHZhbHVl
X2luZGV4ID0gMQogICAgICAgIHJlcGVhdAogICAgICAgICAgbG9jYWwgbmFtZSwgdmFsdWUgPSBk
ZWJ1Zy5nZXR1cHZhbHVlIChpbmZvLmZ1bmMsIHVwdmFsdWVfaW5kZXgpCiAgICAgICAgICBpZiBu
YW1lIHRoZW4KICAgICAgICAgICAgdGFibGUuaW5zZXJ0ICh2YXJpYWJsZXMsIHsKICAgICAgICAg
ICAgICBrZXkgPSBuYW1lLAogICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUsCiAgICAgICAgICAg
IH0pCiAgICAgICAgICAgIHVwdmFsdWVfaW5kZXggPSB1cHZhbHVlX2luZGV4ICsgMQogICAgICAg
ICAgZW5kCiAgICAgICAgdW50aWwgbm90IG5hbWUKICAgICAgZW5kCiAgICBlbHNlCiAgICAgIHRh
YmxlLmluc2VydCAodmFyaWFibGVzLCB7CiAgICAgICAgZXJyb3IgPSAnbm8gZGVidWcuZ2V0dXB2
YWx1ZSwgY2FuXCd0IHNob3cgdXB2YWx1ZXMnCiAgICAgIH0pCiAgICBlbmQKICBlbmQKCiAgLS0g
cmVidWlsZCBzb3VyY2UgbGluZXMKICBsb2NhbCBzb3VyY2UgPSBmcmFtZS5zb3VyY2UKICBpZiBz
b3VyY2UgdGhlbgogICAgaWYgc3RyaW5nLnN1YiAoc291cmNlLCAxLCAxKSA9PSAnQCcgdGhlbgog
ICAgICBsb2NhbCBmaWxlbmFtZSA9IHN0cmluZy5zdWIgKHNvdXJjZSwgMiwgI3NvdXJjZSkKICAg
ICAgc291cmNlID0gZmV0Y2ggKGZpbGVuYW1lKQogICAgZW5kCiAgICBpZiBzb3VyY2UgYW5kIHR5
cGUgKHNvdXJjZSkgPT0gJ3N0cmluZycgdGhlbgogICAgICBzb3VyY2VfbGluZXMgPSBnZXRfbGlu
ZXMgKHNvdXJjZSkKICAgIGVuZAogIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIGVycm9yX3VwZGF0
ZSAoKQogIGxvY2FsIGxhc3RfaW5kZXggPSBjdXJyZW50X3N0YWNrX2luZGV4CiAgaWYgYnRucCAo
NSkgb3Iga2V5cCAnc3BhY2UnIHRoZW4KICAgIHVzZV9zbWFsbF9mb250ID0gbm90IHVzZV9zbWFs
bF9mb250CiAgZW5kCiAgaWYgYnRucCAoMikgdGhlbgogICAgY3VycmVudF9zdGFja19pbmRleCA9
IG1hdGgubWF4ICgxLCBjdXJyZW50X3N0YWNrX2luZGV4IC0gMSkKICAgIHN0YWNrX3Njcm9sbCA9
IG1hdGgubWluIChjdXJyZW50X3N0YWNrX2luZGV4LTEsIHN0YWNrX3Njcm9sbCkKICBlbmQKICBp
ZiBidG5wICgzKSB0aGVuCiAgICBjdXJyZW50X3N0YWNrX2luZGV4ID0gbWF0aC5taW4gKCNzdGFj
a19mcmFtZXMsIGN1cnJlbnRfc3RhY2tfaW5kZXggKyAxKQogICAgc3RhY2tfc2Nyb2xsID0gbWF0
aC5tYXggKChjdXJyZW50X3N0YWNrX2luZGV4KSAtICgjc3RhY2tfZnJhbWVzIC0gc3RhY2tfbWF4
X3Njcm9sbCksIHN0YWNrX3Njcm9sbCkKICBlbmQKCiAgbG9jYWwgXywgXywgY2xpY2ssIF8sIHdo
ZWVsID0gbW91c2UgKCkKICBpZiBtb3VzZV9vdmVyX3N0YWNrIHRoZW4KICAgIHN0YWNrX3Njcm9s
bCA9IG1hdGgubWF4ICgwLCBtYXRoLm1pbiAoc3RhY2tfc2Nyb2xsIC0gd2hlZWwgKiAyLCBzdGFj
a19tYXhfc2Nyb2xsKSkKICBlbmQKICBzdGFja19zY3JvbGxfc21vb3RoID0gYXBwcm9hY2ggKHN0
YWNrX3Njcm9sbF9zbW9vdGgsIHN0YWNrX3Njcm9sbCkKICBpZiBtb3VzZV9vdmVyX3ZhcmlhYmxl
cyB0aGVuCiAgICB2YXJpYWJsZXNfc2Nyb2xsID0gbWF0aC5tYXggKDAsIG1hdGgubWluICh2YXJp
YWJsZXNfc2Nyb2xsIC0gd2hlZWwgKiAyLCB2YXJpYWJsZXNfbWF4X3Njcm9sbCkpCiAgZW5kCiAg
dmFyaWFibGVzX3Njcm9sbF9zbW9vdGggPSBhcHByb2FjaCAodmFyaWFibGVzX3Njcm9sbF9zbW9v
dGgsIHZhcmlhYmxlc19zY3JvbGwpCgogIGNsaWNrID0gY2xpY2sgfj0gMAogIGlmIGNsaWNrIGFu
ZCBub3QgbW91c2Vfd2FzX2NsaWNrZWQgdGhlbgogICAgaWYgaG92ZXJlZF9zdGFja19pbmRleCB0
aGVuCiAgICAgIGN1cnJlbnRfc3RhY2tfaW5kZXggPSBob3ZlcmVkX3N0YWNrX2luZGV4CiAgICBl
bmQKICAgIGlmIGhvdmVyZWRfdmFyaWFibGUgYW5kIHR5cGUgKGhvdmVyZWRfdmFyaWFibGUudmFs
dWUpID09ICd0YWJsZScgdGhlbgogICAgICBpZiBob3ZlcmVkX3ZhcmlhYmxlLmNvbnRlbnRzIHRo
ZW4KICAgICAgICBob3ZlcmVkX3ZhcmlhYmxlLmNvbnRlbnRzID0gbmlsCiAgICAgIGVsc2UKICAg
ICAgICBsb2NhbCBjb250ZW50cyA9IHt9CiAgICAgICAgaG92ZXJlZF92YXJpYWJsZS5jb250ZW50
cyA9IGNvbnRlbnRzCiAgICAgICAgZm9yIGssdiBpbiBwYWlycyAoaG92ZXJlZF92YXJpYWJsZS52
YWx1ZSkgZG8KICAgICAgICAgIHRhYmxlLmluc2VydCAoY29udGVudHMsIHsKICAgICAgICAgICAg
a2V5ID0gaywKICAgICAgICAgICAgdmFsdWUgPSB2LAogICAgICAgICAgfSkKICAgICAgICBlbmQK
ICAgICAgICBzb3J0IChjb250ZW50cywgY29tcGFyZV9rZXlzKQogICAgICBlbmQKICAgIGVuZAog
IGVuZAogIG1vdXNlX3dhc19jbGlja2VkID0gY2xpY2sKCiAgaWYgY3VycmVudF9zdGFja19pbmRl
eCB_PSBsYXN0X2luZGV4IHRoZW4KICAgIHJlYnVpbGQoKQogIGVuZAplbmQKCmxvY2FsIGZ1bmN0
aW9uIGVycm9yX2RyYXcgKCkKICBsb2NhbCBXID0gZ2V0X2Rpc3BsYXkoKTp3aWR0aCgpCiAgbG9j
YWwgSCA9IGdldF9kaXNwbGF5KCk6aGVpZ2h0KCkKCiAgbG9jYWwgcHJlZml4ID0gdXNlX3NtYWxs
X2ZvbnQgYW5kICdcMDE0JyBvciAnJwogIGxvY2FsIGZvbnRfaGVpZ2h0ID0gKHVzZV9zbWFsbF9m
b250IGFuZCA2IG9yIDExKQogIGxvY2FsIG14LCBteSA9IG1vdXNlKCkKICBsb2NhbCBvdmVyX3Nl
Y3Rpb24gPSBmYWxzZQogIGxvY2FsIHgwLCB5MCwgeCwgeQoKICBsb2NhbCBmdW5jdGlvbiBnb190
byAobmV3X3gsIG5ld195KQogICAgeDAsIHkwID0gbmV3X3gsIG5ld195CiAgICB4LCB5ID0geDAs
IHkwCiAgZW5kCgogIGxvY2FsIGZ1bmN0aW9uIHNlY3Rpb24gKHN4LCBzeSwgc3csIHNoKQogICAg
b3Zlcl9zZWN0aW9uID0KICAgICAgbXggPj0gc3ggYW5kIG14IDwgc3ggKyBzdyBhbmQKICAgICAg
bXkgPj0gc3kgYW5kIG15IDwgc3kgKyBzaAogICAgY2xpcCAoc3gsIHN5LCBzdywgc2gpCiAgICBn
b190byhzeCsyLCBzeSsyKQogIGVuZAoKICBsb2NhbCBmdW5jdGlvbiBwcmludF9ob3Jpem9udGFs
ICh0ZXh0LCBjb2xvcikKICAgIGxvY2FsIG5ld194LCBfbmV3X3kgPSBwcmludCAocHJlZml4IC4u
IHRleHQsIHgsIHksIGNvbG9yKQogICAgeCA9IG5ld194CiAgZW5kCgogIGxvY2FsIGZ1bmN0aW9u
IHByaW50X2xpbmUgKHRleHQsIGNvbG9yKQogICAgbG9jYWwgX25ld194LCBuZXdfeSA9IHByaW50
IChwcmVmaXggLi4gdGV4dCwgeCwgeSwgY29sb3IpCiAgICB4ID0geDAKICAgIHkgPSBuZXdfeQog
IGVuZAoKICAtLSBkcmF3IHNldHVwCiAgY2xzICgwKQogIC0tIGxpZ2h0ZXIgZGFyayBncmF5IGZv
ciByZWFkYWJpbGl0eQogIHBhbCAoNSwgMHhmZjcwNzA3MCwgMikKICBjb2xvciAoNSkKCiAgLS0g
ZXJyb3IgbWVzc2FnZQogIHNlY3Rpb24gKDAsIDAsIFcsIEgvMikKICBtb3VzZV9vdmVyX3N0YWNr
ID0gb3Zlcl9zZWN0aW9uCgogIGxvY2FsIGxvY19wYXRoLCBsb2NfbGluZSwgZXJyID0gcGFyc2Vf
bWVzc2FnZV9mb3JfbG9jYXRpb24gKGVycm9yX21lc3NhZ2UpCiAgaWYgbG9jX3BhdGggdGhlbgog
ICAgcHJpbnRfbGluZSAoJ2Vycm9yIGF0ICcgLi4gbG9jX3BhdGggLi4gJzonIC4uIGxvY19saW5l
IC4uICc6JywgNikKICAgIHByaW50X2xpbmUgKCcgICcgLi4gZXJyLCA4KQogIGVsc2UKICAgIHBy
aW50X2xpbmUgKCdlcnJvcjonLCA2KQogICAgcHJpbnRfbGluZSAoJyAgJyAuLiBlcnJvcl9tZXNz
YWdlLCA4KQogIGVuZAoKICAtLSBzdGFjayBmcmFtZXMKICBwcmludF9saW5lICgnc3RhY2s6Jywg
NikKICBzZWN0aW9uICgwLCB5LCBXLCBILzIteSkKICBsb2NhbCBzdGFja190b3BfeSA9IHkKICB5
ID0geSAtIHJvdW5kIChzdGFja19zY3JvbGxfc21vb3RoICogZm9udF9oZWlnaHQpCiAgbG9jYWwg
bGFzdF9ob3ZlcmVkX3N0YWNrX2luZGV4ID0gaG92ZXJlZF9zdGFja19pbmRleAogIGhvdmVyZWRf
c3RhY2tfaW5kZXggPSBmYWxzZQogIGZvciBpLCBmcmFtZSBpbiBpcGFpcnMgKHN0YWNrX2ZyYW1l
cykgZG8KICAgIGNvbG9yIChsYXN0X2hvdmVyZWRfc3RhY2tfaW5kZXggPT0gaSBhbmQgNyBvcgog
ICAgICAgICAgIGN1cnJlbnRfc3RhY2tfaW5kZXggPT0gaSBhbmQgNiBvciA1KQoKICAgbG9jYWwg
eV9iZWZvcmUgPSB5CiAgICBwcmludF9saW5lIChzdHJpbmcuZm9ybWF0ICgnICAlczolZCBpbiBm
dW5jdGlvbiAlcycsCiAgICAgIGZyYW1lLmZpbGVuYW1lLCBmcmFtZS5saW5lLCBmcmFtZS5mbl9u
YW1lICkpCiAgICBpZiBvdmVyX3NlY3Rpb24gdGhlbgogICAgICBpZiBteSA_PSB5X2JlZm9yZSBh
bmQgbXkgPCB5IHRoZW4KICAgICAgICBob3ZlcmVkX3N0YWNrX2luZGV4ID0gaQogICAgICBlbmQK
ICAgIGVuZAogIGVuZAogIHN0YWNrX21heF9zY3JvbGwgPSAjc3RhY2tfZnJhbWVzIC0gKEgvMiAt
IHN0YWNrX3RvcF95KSAvIGZvbnRfaGVpZ2h0CgogIGxvY2FsIGZyYW1lID0gc3RhY2tfZnJhbWVz
IFtjdXJyZW50X3N0YWNrX2luZGV4XQogIGlmIG5vdCBmcmFtZSB0aGVuCiAgICByZXR1cm4KICBl
bmQKCiAgLS0gdmFyaWFibGVzCiAgc2VjdGlvbiAoMCwgSC8yLCBXLzIsIEgvMikKICBtb3VzZV9v
dmVyX3ZhcmlhYmxlcyA9IG92ZXJfc2VjdGlvbgogIHByaW50X2xpbmUgKCd2YXJpYWJsZXM6Jywg
NikKICBzZWN0aW9uICgwLCB5LCBXLzIsIEgteSkKICBsb2NhbCB2YXJpYWJsZXNfdG9wX3kgPSB5
CiAgeSA9IHkgLSByb3VuZCAodmFyaWFibGVzX3Njcm9sbF9zbW9vdGggKiBmb250X2hlaWdodCkK
ICBsb2NhbCBsYXN0X2hvdmVyZWRfdmFyaWFibGUgPSBob3ZlcmVkX3ZhcmlhYmxlCiAgaG92ZXJl
ZF92YXJpYWJsZSA9IGZhbHNlCiAgbG9jYWwgdmFyaWFibGVfY291bnQgPSAwCiAgbG9jYWwgZnVu
Y3Rpb24gZHJhd192YXJpYWJsZSAodmFyaWFibGUsIGluZGVudCkKICAgIHZhcmlhYmxlX2NvdW50
ID0gdmFyaWFibGVfY291bnQgKyAxCiAgICBsb2NhbCBob3ZlcmVkID0gdmFyaWFibGUgPT0gbGFz
dF9ob3ZlcmVkX3ZhcmlhYmxlCiAgICBsb2NhbCB5X2JlZm9yZSA9IHkKICAgIGlmIHZhcmlhYmxl
LmVycm9yIHRoZW4KICAgICAgcHJpbnRfbGluZSAoJyAgJyAuLiB2YXJpYWJsZS5lcnJvciwgOCkK
ICAgIGVsc2UKICAgICAgcHJpbnRfaG9yaXpvbnRhbCAoaW5kZW50IC4uIHZhcmlhYmxlLmtleSwg
aG92ZXJlZCBhbmQgNyBvciA2KQogICAgICBwcmludF9ob3Jpem9udGFsICgnOiAnLCB2YXJpYWJs
ZSA9PSBsYXN0X2hvdmVyZWRfdmFyaWFibGUgYW5kIDcgb3IgNSkKICAgICAgcHJpbnRfbGluZSAo
c2FmZV90b3N0cmluZyh2YXJpYWJsZS52YWx1ZSkpCiAgICBlbmQKCiAgICBpZiBvdmVyX3NlY3Rp
b24gYW5kIHR5cGUgKHZhcmlhYmxlLnZhbHVlKSA9PSAndGFibGUnIHRoZW4KICAgICAgaWYgbXgg
Pj0gMCBhbmQgbXggPCBXLzIgYW5kIG15ID49IHlfYmVmb3JlIGFuZCBteSA8IHkgdGhlbgogICAg
ICAgIGhvdmVyZWRfdmFyaWFibGUgPSB2YXJpYWJsZQogICAgICBlbmQKICAgIGVuZAoKICAgIGlm
IHZhcmlhYmxlLmNvbnRlbnRzIHRoZW4KICAgICAgZm9yIF8sIHYgaW4gaXBhaXJzICh2YXJpYWJs
ZS5jb250ZW50cykgZG8KICAgICAgICBkcmF3X3ZhcmlhYmxlICh2LCBpbmRlbnQgLi4gJyAgJykK
ICAgICAgZW5kCiAgICBlbmQKICBlbmQKICBmb3IgXywgdmFyaWFibGUgaW4gaXBhaXJzICh2YXJp
YWJsZXMpIGRvCiAgICBkcmF3X3ZhcmlhYmxlICh2YXJpYWJsZSwgJyAgJykKICBlbmQKICB2YXJp
YWJsZXNfbWF4X3Njcm9sbCA9IHZhcmlhYmxlX2NvdW50IC0gKEggLSB2YXJpYWJsZXNfdG9wX3kp
IC8gZm9udF9oZWlnaHQKCiAgLS0gc291cmNlCiAgc2VjdGlvbiAoVy8yLCBILzIsIFcvMiwgSC8y
KQogIHByaW50X2xpbmUgKCdzb3VyY2Ugb2YgJyAuLiBmcmFtZS5wYXRoIC4uICc6JywgNikKICBs
b2NhbCBjb250ZXh0ID0gdXNlX3NtYWxsX2ZvbnQgYW5kIDEwIG9yIDUKICBsb2NhbCBpX21pbiA9
IG1hdGgubWF4ICgxLCBmcmFtZS5saW5lIC0gY29udGV4dCkKICBsb2NhbCBpX21heCA9IG1hdGgu
bWluICgjc291cmNlX2xpbmVzLCBmcmFtZS5saW5lICsgY29udGV4dCkKICBmb3IgaSA9IGlfbWlu
LCBpX21heCBkbwogICAgY29sb3IgKGkgPT0gZnJhbWUubGluZSBhbmQgNiBvciA1KQogICAgcHJp
bnRfaG9yaXpvbnRhbCAoc3RyaW5nLmZvcm1hdCAoJyU0ZCAnLCBpKSkKICAgIHByaW50X2xpbmUg
KHNvdXJjZV9saW5lcyBbaV0pCiAgZW5kCgogIGNsaXAgKCkKZW5kCgotLS0tIHRha2luZyBvdmVy
IGR1cmluZyBlcnJvcnMgLS0tLS0tLS0tLS0tLS0tLS0tLQoKbG9jYWwgZnVuY3Rpb24gcmVzZXQg
KCkKICAtLSBiYXNlZCBvbiByZXNldCgpIGZyb20gL3N5c3RlbS9saWIvaGVhZC5sdWEKICAtLSBz
ZWUgdGhhdCBmbiBmb3IgaW5mbwogIHdpbmRvdyB7CiAgICBjdXJzb3IgPSAxLAogICAgcmVzaXph
YmxlID0gdHJ1ZSwKICB9CiAgbm90ZSAoKQogIC0tIHBpY290cm9uIHNlZ2ZhdWx0cyBpZiB3ZSBj
YWxsIGNsaXAoKSBkdXJpbmcgaW5pdAogIGlmIGluaXRfZG9uZSB0aGVuCiAgICBjbGlwICgpCiAg
ZW5kCiAgY2FtZXJhICgpCiAgcGFsICgpCiAgcGFsdCAoKQogIG1lbXNldCAoMHg1NTFmLCAwLCA5
KQogIHBva2UgKDB4NTUwOCwgMHgzZikKICBwb2tlICgweDU1MDksIDB4M2YpCiAgcG9rZSAoMHg1
NTBhLCAweDNmKQogIHBva2UgKDB4NTUwYiwgMHgwMCkKICBjb2xvciAoNikKICBmaWxscCAoKQog
IHBva2UgKDB4NWY1NiwgMHg0MCkKICBwb2tlICgweDVmNTcsIDB4NTYpCiAgcG9rZSAoMHg0MDAw
LCBnZXQgKGZldGNoIi9zeXN0ZW0vZm9udHMvbGlsLmZvbnQiKSkKICBwb2tlICgweDU2MDAsIGdl
dCAoZmV0Y2giL3N5c3RlbS9mb250cy9wOC5mb250IikpCiAgcG9rZSAoMHg1NjA2LCBwZWVrICgw
eDU2MDApICogNCkKICBwb2tlICgweDU2MDUsIDB4MikKICBwb2tlICgweDVmMjgsIDY0KQogIHBv
a2UgKDB4NWYyOSwgNjQpCmVuZAoKbG9jYWwgZnVuY3Rpb24gb25fZXJyb3IgKHRocmVhZCwgbWVz
c2FnZSkKICAtLSBkbyB0aGlzIGZpcnN0IGluIGNhc2Ugd2UgaGl0IGFub3RoZXIgZXJyb3IKICBl
cnJvcl90cmFjZWJhY2sgPSBkZWJ1Zy50cmFjZWJhY2sgKHRocmVhZCwgbWVzc2FnZSkKICBwcmlu
dGggKGVycm9yX3RyYWNlYmFjaykKCiAgZXJyb3JfdGhyZWFkID0gdGhyZWFkCiAgZXJyb3JfbWVz
c2FnZSA9IHRvc3RyaW5nIChtZXNzYWdlKQogIHJlc2V0ICgpCiAgcmVidWlsZCAoKQogIC0tIGp1
bXAgdG8gdGhlIHByb3BlciBzdGFjayBmcmFtZSBpZiB3ZSBjYW4KICBsb2NhbCBsb2NfcGF0aCwg
bG9jX2xpbmUgPSBwYXJzZV9tZXNzYWdlX2Zvcl9sb2NhdGlvbiAoZXJyb3JfbWVzc2FnZSkKICBm
b3IgaSwgZnJhbWUgaW4gaXBhaXJzIChzdGFja19mcmFtZXMpIGRvCiAgICBpZiBmcmFtZS5wYXRo
ID09IGxvY19wYXRoIGFuZCBmcmFtZS5saW5lID09IGxvY19saW5lIHRoZW4KICAgICAgY3VycmVu
dF9zdGFja19pbmRleCA9IGkKICAgICAgcmVidWlsZCAoKQogICAgICBicmVhawogICAgZW5kCiAg
ZW5kCmVuZAoKLS0tLSBpbnN0YWxsIG1haW4gZXZlbnRzIHRoYXQgY2F0Y2ggZXJyb3JzIC0tLS0t
LS0KCmxvY2FsIHVzZXJfaW5pdCA9IHJhd2dldCAoX0csICdfaW5pdCcpCmxvY2FsIHVzZXJfdXBk
YXRlID0gcmF3Z2V0IChfRywgJ191cGRhdGUnKQpsb2NhbCB1c2VyX2RyYXcgPSByYXdnZXQgKF9H
LCAnX2RyYXcnKQoKYXNzZXJ0ICh1c2VyX2RyYXcgYW5kIHVzZXJfdXBkYXRlLAogICdwbGVhc2Ug
aW5jbHVkZSBlcnJvcl9leHBsb3JlciBhZnRlciBkZWZpbmluZyBib3RoIF91cGRhdGUgYW5kIF9k
cmF3JykKCmlmIG5vdCByYXdnZXQgKF9HLCAnZGVidWcnKSBvciBub3QgZGVidWcudHJhY2ViYWNr
IG9yIG5vdCBkZWJ1Zy5nZXRpbmZvIHRoZW4KICBwcmludGggJ2Vycm9yIGV4cGxvcmVyOiBkZWJ1
ZyBtb2R1bGUgbm90IGF2YWlsYWJsZSwgZXJyb3IgZXhwbG9yZXIgd2lsbCBiZSBkaXNhYmxlZCcK
ICByZXR1cm4KZW5kCgpsb2NhbCBmdW5jdGlvbiBjYWxsX2Vycm9yX2V2ZW50IChmbiwgLi4uKQog
IC0tIGlmIHRoZXJlJ3MgYW4gZXJyb3IgaW4gb3VyIHVwZGF0ZSBvciBkcmF3LCB0aHJvdyB0aGUK
ICAtLSBvcmlnaW5hbCBlcnJvciBhcyB3ZWxsIGFzIHRoZSBuZXcgZXJyb3IKICBsb2NhbCBzdWNj
ZXNzLCBlcnIgPSBwY2FsbCAoZm4sIC4uLikKICBpZiBub3Qgc3VjY2VzcyB0aGVuCiAgICBlcnJv
ciAoZXJyb3JfdHJhY2ViYWNrIC4uICdcblxuZXJyb3IgZHVyaW5nIGVycm9yIGhhbmRsaW5nOiAn
IC4uIHRvc3RyaW5nIChlcnIpKQogIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIGNhbGxfcHJvdGVj
dGVkIChmbikKICAtLSBuZWVkIHRvIHVzZSBjb3Jlc3VtZSBldGMuIGFuZCBub3QgY29yb3V0aW5l
LnJlc3VtZSBldGMuCiAgLS0gZm9yIHBpY290cm9uIGNvbXBhdGliaWxpdHkKICBsb2NhbCB0aHJl
YWQgPSBjb2NyZWF0ZSAoZm4pCiAgbG9jYWwgc3VjY2VzcywgbWVzc2FnZSA9IGNvcmVzdW1lKHRo
cmVhZCkKICB3aGlsZSBjb3N0YXR1cyAodGhyZWFkKSB_PSAnZGVhZCcgZG8KICAgIHlpZWxkICgp
CiAgICBzdWNjZXNzLCBtZXNzYWdlID0gY29yZXN1bWUgKHRocmVhZCkKICBlbmQKICBpZiBub3Qg
c3VjY2VzcyB0aGVuCiAgICBjYWxsX2Vycm9yX2V2ZW50IChvbl9lcnJvciwgdGhyZWFkLCBtZXNz
YWdlKQogIGVuZAplbmQKCmlmIHVzZXJfaW5pdCB0aGVuCiAgZnVuY3Rpb24gX2luaXQgKCkKICAg
IGNhbGxfcHJvdGVjdGVkICh1c2VyX2luaXQpCiAgICBpbml0X2RvbmUgPSB0cnVlCiAgZW5kCmVs
c2UKICBpbml0X2RvbmUgPSB0cnVlCmVuZAoKZnVuY3Rpb24gX3VwZGF0ZSAoKQogIGlmIGVycm9y
X3RocmVhZCB0aGVuCiAgICBjYWxsX2Vycm9yX2V2ZW50IChlcnJvcl91cGRhdGUpCiAgZWxzZQog
ICAgY2FsbF9wcm90ZWN0ZWQgKHVzZXJfdXBkYXRlKQogIGVuZAplbmQKCmZ1bmN0aW9uIF9kcmF3
ICgpCiAgaWYgZXJyb3JfdGhyZWFkIHRoZW4KICAgIGNhbGxfZXJyb3JfZXZlbnQgKGVycm9yX2Ry
YXcpCiAgZWxzZQogICAgY2FsbF9wcm90ZWN0ZWQgKHVzZXJfZHJhdykKICBlbmQKZW5k
:: field.lua
--[[pod_format="raw",created="2025-06-18 13:14:24",modified="2025-07-07 01:11:23",revision=1938]]
function new_field()
	return {
		position = new_point(200, 100),
		width = 6,
		total_height = 10,   -- full cup height
		visible_rows = 5,    -- number of visible matchable rows
		preview_rows = 1,    -- preview row count
		cup = {},

		init = function(self)
			for i = 1, self.width do
				local col = {}
				for j = 1, self.total_height do
					local b = pick_random(bead_bank)(self.position, new_point(i, j))
					b:init()
					add(col, b)
				end
				add(self.cup, col)
			end
		end,

		visible_start = function(self)
			return self.total_height - self.visible_rows - self.preview_rows + 1
		end,

		match_start = function(self)
			return self.total_height - self.visible_rows + 1
		end,

		update = function(self)
			local ret=false
			for i = 1, self.width do
				for j = 1, self.total_height do
					local bead=self.cup[i][j]
					if(bead!=nil) then
						if(bead:update()) then 
							ret=true
						end							
					end
				end
			end
			return ret
		end,

		draw = function(self)
			local y0 = self:visible_start()
			local y1 = self.total_height
			for i = 1, self.width do
				for j = y0, y1 do
					local bead=self.cup[i][j]
					if(bead!=nil) then
						bead:draw()
					end
				end
			end

			local width = 5
			local color = 19
			local px = self.position.x
			local py = self.position.y + (y0 - 1) * tileSize
			local gw = self.width * tileSize
			local gh = (y1 - y0 + 1) * tileSize

			rectfill(px - width, py - width, px, py + gh, color)               -- left wall
			rectfill(px + gw, py - width, px + gw + width, py + gh, color)     -- right wall
			rectfill(px - width, py + gh, px + gw + width, py + gh + width, color) -- bottom wall
			rectfill(px - width, py - width-tileSize, px + gw + width, py+halfTileSize, color)       -- top wall
		end,
		swap = function(self, pos1, pos2)
			-- Get beads
			local bead1 = self.cup[pos1.x][pos1.y]
			local bead2 = self.cup[pos2.x][pos2.y]
		
			-- Swap them in the grid
			self.cup[pos1.x][pos1.y] = bead2
			self.cup[pos2.x][pos2.y] = bead1
		
			-- Update their internal position fields
			if bead1 then
				bead1.position.x = pos2.x
				bead1.position.y = pos2.y
				
				--bead1.visual_position=bead1.position:clone()
				
			end
		
			if bead2 then
				bead2.position.x = pos1.x
				bead2.position.y = pos1.y
				--bead2.visual_position=bead2.position:clone()
			end
		end,
		find_matches = function(self)
			local matches={}
			local y_start = self:match_start()
			local y_end = self.total_height
			-- horizontal
			if(game.stats.match_horizontal) then
				for y = y_start, y_end do
					local run_type = self.cup[1][y].color
					local run_start = 1
					local run_len = 1
	
					for x = 2, self.width + 1 do
						local next_type = (x <= self.width) and self.cup[x][y].color or nil
						if next_type == run_type then
							run_len += 1
						else
							if run_len >= 3 then
								for i = run_start, run_start + run_len - 1 do
									add(matches,self.cup[i][y])
									self.cup[i][y].matched = true
								end
							end
							run_type = next_type
							run_start = x
							run_len = 1
						end
					end
				end
			end
			-- vertical
			if(game.stats.match_vertical) then
				for x = 1, self.width do
					local run_type = self.cup[x][self:match_start()].color
					local run_start = self:match_start()
					local run_len = 1
	
					for y = self:match_start() + 1, self.total_height + 1 do
						local next_type = (y <= self.total_height) and self.cup[x][y].color or nil
						if next_type == run_type then
							run_len += 1
						else
							if run_len >= 3 then
								for i = run_start, run_start + run_len - 1 do
									add(matches,self.cup[x][i])
									self.cup[x][i].matched = true
								end
							end
							run_type = next_type
							run_start = y
							run_len = 1
						end
					end
				end
			end
			--square
			if(game.stats.match_square) then
				for x = 1, self.width - 1 do
					for y = self:match_start(), self.total_height - 1 do
						local a = self.cup[x][y]
						local b = self.cup[x + 1][y]
						local c = self.cup[x][y + 1]
						local d = self.cup[x + 1][y + 1]
				
						if a and b and c and d and
						   a.color == b.color and
						   a.color == c.color and
						   a.color == d.color then
				
							local square = {a, b, c, d}
							for _, bead in ipairs(square) do
								if not bead.matched then
									add(matches, bead)
									bead.matched = true
								end
							end
						end
					end
				end
			end
			return matches
		end,

		remove_matched = function(self)
			for x = 1, self.width do
				local write_y = self.total_height

				for y = self.total_height, 1, -1 do
					local bead = self.cup[x][y]
					if bead and not bead.matched then
						if write_y ~= y then
							self.cup[x][write_y] = bead
							self.cup[x][y] = nil
							bead.position.x = x
							bead.position.y = write_y
						end
						write_y -= 1
					else
						self.cup[x][y] = nil
					end
				end

				for y = write_y, 1, -1 do
					local b = pick_random(bead_bank)(self.position, new_point(x, y))
					b:init()
					b.visual_position.y = y-- - self.total_height
					self.cup[x][y] = b
				end
			end
		end
	}
end

:: game.lua
--[[pod_format="raw",created="2025-06-18 12:49:39",modified="2025-08-13 01:27:32",revision=2787]]

function new_game()
	return{
		field=nil,
		state=0, 
		cursor=nil,
		god_cursor=nil, 
		points=0,
		points_hint="",
		multiplier=1,
		moves=0,		
		movetimer=0,
		stats=nil,
		shop=nil,
		current_trial=nil,	
		month=get_month(),	
		init=function(self)
			
	
			self.field=new_field()
			self.field:init()
			self.stats=new_stats()
			self.stats:init()
			
			self.shop=new_shop(self.stats)
			
			play_music("karg_elert_piano_pieces_5")
			self:next_level()
			--add(self.stats.gods,malvex_god(self.stats))

--			for i=1,#god_ctors do
--				local god=god_ctors[i](self.stats) 
--				god:init()
--				add(self.stats.gods,god)
--			end
			
			self.stats:update_stats()
			self.cursor=new_cursor(self.field.position,new_point(3,7))
			self.cursor:init()
			self.god_cursor=new_god_cursor(self.stats)
			self.god_cursor:init()

		end,
		update=function(self)
			if(self.state!=5) then
				self.cursor:update()
			else
				self.god_cursor:update()
			end				
			--0=free 1=moving 2=check 3=remove 4=drop 5=menu
			if(self.state==0 and self.stats.points>=self.current_trial.point_goal) then
				self.stats:add_message(self.current_trial.end_message,colors.yellow )
				self.state=6
				self.shop:init()
				self.stats:add_message("This trial grants "..self.current_trial.reward.." boons",colors.yellow )
				self.stats.coins+=self.current_trial.reward
				local remaining_moves=self.stats.moves_max-self.moves
				if(remaining_moves>0)then
					self.stats.coins+=remaining_moves
					self.stats:add_message("Remaining time grants "..remaining_moves.." boons",colors.yellow )
				end			
				self.moves=0
				
				local extra=flr(self.stats.points/self.current_trial.point_goal)-1
				if(extra>0)then
					self.stats.coins+=extra
					self.stats:add_message("Your zeal adds "..extra.." boons",colors.yellow )
				end		
			elseif(self.state==0 and self.moves>=self.stats.moves_max) then --out of turns

				self.stats.lives-=1
				if(self.stats.lives>0) then
					self.stats:add_message("You have been granted another chance",colors.yellow )
					self.moves=0
					self.stats:reset_trial()
				else
					self.stats:add_message("You have failed. Your soul is lost",colors.red )
					self.state=999
				end
			elseif(self.state==0 ) then --wait for player to make a move
				if(input:button_press(input_lookup.buttons.o)) then
					self.state=1
					self.moves+=1
					self.movetimer=self.stats.movetimer_max
				elseif(#self.stats.gods>1 and  input:button_press(input_lookup.buttons.x)) then
					self.state=5
					self.stats.selected_god=2
				end		
			elseif (self.state==1) then --wait for player to finish a move
				if(input:button_press(input_lookup.buttons.o)or self.movetimer<=0) then
					self.state=2
					self.movetimer=0
				else
					self.field:update()
					self.movetimer-=1
				end
			elseif (self.state==2) then --do matches
				if(self.field:update()==false) then
					local matches=self.field:find_matches()
					if(#matches>0) then
						self.state=3
						self.stats:score_matches(matches)
					else
						self.stats:score_matches(matches)
						self.state=0
						self.stats:reset_chain()
						
					end
				end
			elseif (self.state==3) then --clean up matches
				if(self.field:update()==false) then
					self.state=4
					self.field:remove_matched()
				end	
			elseif (self.state==4) then --if more matches, keep going
				if(self.field:update()==false) then
					self.state=2
				end
			elseif(self.state==5) then --god viewer is open
				if(input:button_press(input_lookup.buttons.x) or input:button_press(input_lookup.buttons.o)) then
					self.state=0
					self.stats.selected_god=0
				end
			elseif(self.state==6) then --open the shop
				self.shop:update()		
			end	
			
		end,
		draw=function(self)
			cls(5)
			self.field:draw()
			self.cursor:draw()
			--print_centered("points:"..self.stats.points,10,7)
			for i=#self.stats.messages,1,-1 do
				local message=self.stats.messages[i]
				print_centered(message.text,20+(8*(#self.stats.messages-i)),message.color)				
			end
			
			--print_centered("moves left:"..self.moves,130,7)
			print(self.movetimer.."/"..self.stats.movetimer_max,200,145,7)	
			draw_fill_bar_h(new_point(200, 155),
								new_point(95,10),self.movetimer,self.stats.movetimer_max,7,7)
			print(self.stats.moves_max-self.moves.."/"..self.stats.moves_max,175,156)					
			draw_fill_bar_v(new_point(180, 166),
					new_point(10,95),self.stats.moves_max-self.moves,self.stats.moves_max,7,7)
			print(self.stats.points.."/"..self.current_trial.point_goal,306,156)
			draw_fill_bar_v(new_point(306, 166),
					new_point(10,95),self.stats.points,self.current_trial.point_goal,7,7)
			--day of week	
			spr(self.current_trial.day_sprite,170,2)
			
			spr(self.current_trial.week_sprite,352,2)
			self.stats:draw()
			self.god_cursor:draw()
			
			spr(24,140,2)
			print(self.stats.coins, 140+16,8,7)
		
			if(self.state==6) then --open the shop
				self.shop:draw()		
			end
		end,	
		next_level=function(self)
			self.current_trial=self.month:get_next_trial()
			self.stats:reset_trial()
			self.state=0
			self.stats:add_message(self.current_trial.start_message,colors.yellow )
--				self.current_trial+=1
--				local next_trial=self.week.trials[self.current_trial]
--				if(next_trial!=nil) then
--					self:setup_trial(next_trial)
--					self.stats:reset_trial()
--					self.state=0
--				else
--					self.stats:add_message("You completed the week",colors.yellow )
--					self.current_trial=1
--				end
		end
	}
end

:: god.lua
--[[pod_format="raw",created="2025-06-21 17:03:03",modified="2025-06-21 17:38:34",revision=37]]
new_god=function(stats)
	return {
		name,
		title,
		sprite,
		description,
		stats=stats,
		update_color_values=function(self) end,
		update_combo_values=function(self) end,
		update_chain_values=function(self) end,
		reset_chain=function(self) end,
		score_matches=function(self,matches) end,
		update=function(self)
			self:update_color_values()
			self:update_combo_values()
			self:update_chain_values()
		end
	}
end

new_base_god=function(stats)
	ret= new_god(stats)
	ret.chait_total=0
	ret.score_matches=function(self,matches)
		local combo_value=self.stats.combo_values[#matches-2]
		--get average value	
		local tile_value_sum=0
		for _,color in  ipairs(matches) do			
			tile_value_sum+=self.stats.color_values[color]
		end	
		local average=tile_value_sum/#matches
		local points=flr(average*combo_value+.5)--round to nearest point
		local chain_mult=self.stats.chain_values[self.stats.chain_counter]	
		local chain_points= points*chain_mult
		self.stats.points+=chain_points
		self.stats.chain_counter+=1 
		self.stats:add_message("you:"average.."x"..combo_value.."x"..chain_mult.."="..chain_points)
		self.chait_total+=chain_points
	end
	ret.reset_chain=function(self)
		self.stats.chain_counter=1
		self.stats:add_message("chain total:"..self.chait_total,colors.white)
		self.chait_total=0
	end
	ret.update_color_values= function(self) --set values of all colors to 1
		for i = 1,5 do
			add(self.stats.color_values,1)
		end
	end
	ret.update_combo_values= function(self) --set values of all combos to n
		for i = 1,27 do --the first combo is 3
			add(self.stats.combo_values,i)
		end
	end
	ret.update_chain_values= function(self) --set values of all combos to n
		for i = 1,20 do 
			add(self.stats.chain_values,i)
		end
	end
	return ret
end

:: god_cursor.lua
--[[pod_format="raw",created="2025-06-23 12:58:19",modified="2025-07-01 18:04:12",revision=324]]
function new_god_cursor(stats)
	return{
		stats=stats,
		init=function(self)			
		end,
		update=function(self)
			if(self.stats.selected_god!=0) then
				local id =self.stats.selected_god-2
				if input:button_press(input_lookup.lpad.left) then 
					id-=1				
				elseif input:button_press(input_lookup.lpad.right) then 
					id+=1
				elseif input:button_press(input_lookup.lpad.up) then 
					id-=3
				elseif input:button_press(input_lookup.lpad.down) then 
					id+=3
				end
				if((id+1)>0 and (id+1)<#self.stats.gods) then
					self.stats.selected_god=id+2
				end
			end
			
		end,
		draw=function(self)
			if(self.stats.selected_god!=0) then
				local id =self.stats.selected_god-2
				local i = flr(id/3)
				local j = id%3
				local offset=new_point(2+(j)*46,(i)*52+2)
				rect(offset.x,offset.y,offset.x+42,offset.y+48,7)				
			end
		end
	}
end
:: helpers.lua
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNS0wNi0xOCAxMjo1NTozNyIsbW9k
aWZpZWQ9IjIwMjUtMDYtMjcgMTQ6Mjk6MjUiLHJldmlzaW9uPTE2NjBdXQpmdW5jdGlvbiBzbShh
KQoJcmV0dXJuIHNldG1ldGF0YWJsZShhLGEpCmVuZApmdW5jdGlvbiByYW5kb20obikKCWlmKG4_
MCkgdGhlbiAKCQlyZXR1cm4gcm5kKCkqbgoJZWxzZQoJCXJldHVybiAtbitybmQoKSpuKjIgCgll
bmQKZW5kCmZ1bmN0aW9uIHBpY2tfcmFuZG9tKGFycikKCWlmIGFycj09bmlsbCB0aGVuIHJldHVy
biBuaWwgZW5kCglpZiAjYXJyID09IDAgdGhlbiByZXR1cm4gbmlsIGVuZAoJcmV0dXJuIGFycltm
bHIocm5kKCNhcnIpKSArIDFdCmVuZApmdW5jdGlvbiBibG9ja19jb2xsaXNpb24ocG9pbnRBLCBz
aXplQSwgcG9pbnRCLCBzaXplQikKCWxvY2FsIGF4MSwgYXkxID0gcG9pbnRBLngsIHBvaW50QS55
Cglsb2NhbCBheDIsIGF5MiA9IGF4MSArIHNpemVBLngsIGF5MSArIHNpemVBLnkKCglsb2NhbCBi
eDEsIGJ5MSA9IHBvaW50Qi54LCBwb2ludEIueQoJbG9jYWwgYngyLCBieTIgPSBieDEgKyBzaXpl
Qi54LCBieTEgKyBzaXplQi55CgoJaWYgYXgxIDwgYngyIGFuZCBheDIgPiBieDEgYW5kIGF5MSA8
IGJ5MiBhbmQgYXkyID4gYnkxIHRoZW4KCQlyZXR1cm4gcG9pbnRBLXBvaW50QgoJZW5kCgoJcmV0
dXJuIG5pbAplbmQKZnVuY3Rpb24gY2FyZGluYWxfZGlyZWN0aW9uKHYsIHRocmVzaG9sZCkKCXRo
cmVzaG9sZCA9IHRocmVzaG9sZCBvciAxICAtLSBtaW5pbXVtIGRpZmZlcmVuY2UgYmV0d2VlbiBh
eGVzCgoJbG9jYWwgYWJzX3ggPSBhYnModi54KQoJbG9jYWwgYWJzX3kgPSBhYnModi55KQoJaWYg
YWJzX3ggPiBhYnNfeSArIHRocmVzaG9sZCB0aGVuCgkJcmV0dXJuIG5ld19wb2ludChzaWduKHYu
eCksIDApCgllbHNlaWYgYWJzX3kgPiBhYnNfeCArIHRocmVzaG9sZCB0aGVuCgkJcmV0dXJuIG5l
d19wb2ludCgwLCBzaWduKHYueSkpCgllbHNlCgkJcmV0dXJuIG5pbCAgLS0gdG9vIGRpYWdvbmFs
LCBkb24ndCBhdHRhY2gKCWVuZAplbmQKZnVuY3Rpb24gc2lnbihuKQoJaWYgbiA_IDAgdGhlbiBy
ZXR1cm4gMQoJZWxzZWlmIG4gPCAwIHRoZW4gcmV0dXJuIC0xCgllbHNlIHJldHVybiAwCgllbmQK
ZW5kCmZ1bmN0aW9uIGdldF9zdHJpbmdfd2lkdGgocykKCWxvY2FsIHdpZHRoPXByaW50KHMsLTEw
MDAsMCkKCXByaW50KCIiLDAsMCkKCXJldHVybiB3aWR0aCsxMDAwCmVuZApmdW5jdGlvbiBwcmlu
dF9jZW50ZXJlZCh0ZXh0LCB5LCBjb2wpCgljb2wgPSBjb2wgb3IgY29sb3JzLndoaXRlCglsb2Nh
bCB0ZXh0X3dpZHRoID1nZXRfc3RyaW5nX3dpZHRoKHRleHQpCglsb2NhbCB4ID0gKHNjcmVlbldp
ZHRoIC0gdGV4dF93aWR0aCkgXCAyCglwcmludCh0ZXh0LHgrY2FtZXJhX2hlbHBlcjpnZXRfY2Ft
ZXJhKCkueCwgeStjYW1lcmFfaGVscGVyOmdldF9jYW1lcmEoKS55LCBjb2wpCmVuZApmdW5jdGlv
biBwcmludF9yaWdodCh0ZXh0LCB5LCBjb2wpCgljb2wgPSBjb2wgb3IgIGNvbG9ycy53aGl0ZQoJ
bG9jYWwgdGV4dF93aWR0aCA9Z2V0X3N0cmluZ193aWR0aCh0ZXh0KQoJbG9jYWwgeCA9IHNjcmVl
bldpZHRoIC0gdGV4dF93aWR0aAoJcHJpbnQodGV4dCwgeCtjYW1lcmFfaGVscGVyOmdldF9jYW1l
cmEoKS54LCB5LCBjb2wpCmVuZApmdW5jdGlvbiBwcmludF93cmFwcGVkKHRleHQsIHBvc2l0aW9u
LCB3aWR0aCwgY29sb3IpCglsb2NhbCB3b3JkcyA9IHt9Cglmb3Igd29yZCBpbiBhbGwoc3BsaXQo
dGV4dCwgIiAiLCBmYWxzZSkpIGRvCgkJYWRkKHdvcmRzLCB0b3N0cmluZyh3b3JkKSkKCWVuZAoK
CWxvY2FsIHggPSBwb3NpdGlvbi54Cglsb2NhbCB5ID0gcG9zaXRpb24ueQoJbG9jYWwgbGluZSA9
ICIiCglsb2NhbCBsaW5lX2hlaWdodCA9IDggIC0tIGZvbnQgbGluZSBoZWlnaHQKCglmb3IgaSwg
d29yZCBpbiBpcGFpcnMod29yZHMpIGRvCgkJbG9jYWwgdGVzdF9saW5lID0gKCNsaW5lID4gMCkg
YW5kIChsaW5lIC4uICIgIiAuLiB3b3JkKSBvciB3b3JkCgkJaWYgZ2V0X3N0cmluZ193aWR0aCh0
ZXN0X2xpbmUpID4gd2lkdGggdGhlbgoJCQlwcmludChsaW5lLCB4LCB5LCBjb2xvcikKCQkJeSAr
PSBsaW5lX2hlaWdodAoJCQlsaW5lID0gd29yZAoJCWVsc2UKCQkJbGluZSA9IHRlc3RfbGluZQoJ
CWVuZAoJZW5kCgoJaWYgI2xpbmUgPiAwIHRoZW4KCQlwcmludChsaW5lLCB4LCB5LCBjb2xvcikK
CQl5ICs9IGxpbmVfaGVpZ2h0CgllbmQKCglyZXR1cm4geSAtIHBvc2l0aW9uLnkKZW5kCmZ1bmN0
aW9uIHBhZF9udW1iZXIobiwgd2lkdGgsY2hhcikKCWNoYXI9Y2hhciBvciAiICIKCWxvY2FsIHMg
PSB0b3N0cmluZyhuKQoJd2hpbGUgI3MgPCB3aWR0aCBkbwoJCXMgPSBjaGFyIC4uIHMKCWVuZAoJ
cmV0dXJuIHMKZW5kCmZ1bmN0aW9uIGlzX3BvaW50X29uX3NjcmVlbihwb2ludCkKCQoJbG9jYWwg
Y2FtZXJhX3Bvcz1jYW1lcmFfaGVscGVyOmdldF9jYW1lcmEoKQoJCglyZXR1cm4gKAoJCXBvaW50
LnggPj0gY2FtZXJhX3Bvcy54IC0gdGlsZVNpemUgYW5kIHBvaW50LnggPCBjYW1lcmFfcG9zLngg
KyBzY3JlZW5XaWR0aCBhbmQKCQlwb2ludC55ID49IGNhbWVyYV9wb3MueSAtIHRpbGVTaXplIGFu
ZCBwb2ludC55IDwgY2FtZXJhX3Bvcy55ICsgc2NyZWVuSGVpZ2h0CgkpCmVuZApjb2xvcnMgPSB7
CglibGFjayAgICAgICAgPSAwLAoJZGFya19ibHVlICAgID0gMSwKCWRhcmtfcHVycGxlICA9IDIs
CglkYXJrX2dyZWVuICAgPSAzLAoJYnJvd24gICAgICAgID0gNCwKCWRhcmtfZ3JheSAgICA9IDUs
CglsaWdodF9ncmF5ICAgPSA2LAoJd2hpdGUgICAgICAgID0gNywKCXJlZCAgICAgICAgICA9IDgs
CglvcmFuZ2UgICAgICAgPSA5LAoJeWVsbG93ICAgICAgID0gMTAsCglncmVlbiAgICAgICAgPSAx
MSwKCWJsdWUgICAgICAgICA9IDEyLAoJaW5kaWdvICAgICAgID0gMTMsCglwaW5rICAgICAgICAg
PSAxNCwKCXBlYWNoICAgICAgICA9IDE1LAoKCS0tIEV4dGVuZGVkIGNvbG9ycyAoMTbigJM2Mykg
bWF5IHZhcnkgYnkgcGFsZXR0ZSBzZXR1cCwgYnV0IGhlcmUncyBhIHVzZWZ1bCBkZWZhdWx0IHNl
dDoKCXJvc2UgICAgICAgICA9IDE2LAoJc2FsbW9uICAgICAgID0gMTcsCgliZWlnZSAgICAgICAg
PSAxOCwKCWxpZ2h0X3llbGxvdyA9IDE5LAoJbGlnaHRfZ3JlZW4gID0gMjAsCglzZWFmb2FtICAg
ICAgPSAyMSwKCXNreV9ibHVlICAgICA9IDIyLAoJcGVyaXdpbmtsZSAgID0gMjMsCglsYXZlbmRl
ciAgICAgPSAyNCwKCWxpZ2h0X3BpbmsgICA9IDI1LAoJZGFya19icm93biA9MjgsCglwdXJwbGU9
MzAKCS0tIC4uLnlvdSBjYW4gY29udGludWUgYWRkaW5nIGFzIG5lZWRlZAp9Cm5ld190aW1lcj1m
dW5jdGlvbihzcGF3bl9yYXRlLHN0YXJ0LGFjdGlvbikKCXJldHVybnsKCXNwYXduX3JhdGU9c3Bh
d25fcmF0ZSwKCXRpbWVyPXN0YXJ0LAoJYWN0aW9uPWFjdGlvbiwKCXVwZGF0ZT1mdW5jdGlvbihz
ZWxmLG90aGVyKQoJCWlmKAlzZWxmLmFjdGlvbj09bmlsKSB0aGVuCgkJCXJldHVybgoJCWVuZAoK
CQlpZihzZWxmLnNwYXduX3JhdGU9PTApIHRoZW4KCQkJcmV0dXJuCgkJZWxzZWlmKHNlbGYuc3Bh
d25fcmF0ZT4xKQl0aGVuCQoJCQlpZihzZWxmLnRpbWVyPnNlbGYuc3Bhd25fcmF0ZSkgdGhlbgoJ
CQkJc2VsZi5hY3Rpb24ob3RoZXIpCgkJCQlzZWxmLnRpbWVyPTAKCQkJZWxzZQoJCQkJc2VsZi50
aW1lcis9MQoJCQllbmQKCQllbHNlCgkJCWZvciBpPTEsMS9zZWxmLnNwYXduX3JhdGUsMSBkbwoJ
CQkJc2VsZi5hY3Rpb24ob3RoZXIpCgkJCWVuZAoJCWVuZAoJZW5kCgl9CmVuZAoKZnVuY3Rpb24g
cmFuZG9tX29mZnNjcmVlbl9wb2ludCgpCglsb2NhbCBzaWRlID0gZmxyKHJuZCg0KSkgIC0tIHBp
Y2sgYSByYW5kb20gc2lkZTogMD10b3AsIDE9Ym90dG9tLCAyPWxlZnQsIDM9cmlnaHQKCWlmIHNp
ZGUgPT0gMCB0aGVuCgkJLS0gVG9wOiB5ID0gLXRpbGVTaXplCgkJcmV0dXJuIG5ld19wb2ludChm
bHIocm5kKHNjcmVlbldpZHRoIC8gdGlsZVNpemUpKSAqIHRpbGVTaXplLCAtdGlsZVNpemUpCgll
bHNlaWYgc2lkZSA9PSAxIHRoZW4KCQktLSBCb3R0b206IHkgPSBzY3JlZW5IZWlnaHQKCQlyZXR1
cm4gbmV3X3BvaW50KGZscihybmQoc2NyZWVuV2lkdGggLyB0aWxlU2l6ZSkpICogdGlsZVNpemUs
IHNjcmVlbkhlaWdodCkKCWVsc2VpZiBzaWRlID09IDIgdGhlbgoJCS0tIExlZnQ6IHggPSAtdGls
ZVNpemUKCQlyZXR1cm4gbmV3X3BvaW50KC10aWxlU2l6ZSwgZmxyKHJuZChzY3JlZW5IZWlnaHQg
LyB0aWxlU2l6ZSkpICogdGlsZVNpemUpCgllbHNlCgkJLS0gUmlnaHQ6IHggPSBzY3JlZW5XaWR0
aAoJCXJldHVybiBuZXdfcG9pbnQoc2NyZWVuV2lkdGgsIGZscihybmQoc2NyZWVuSGVpZ2h0IC8g
dGlsZVNpemUpKSAqIHRpbGVTaXplKQoJZW5kCmVuZApmdW5jdGlvbiByYW5kb21fb25zY3JlZW5f
cG9pbnQoKQoJbG9jYWwgeCA9IGZscihybmQoc2NyZWVuV2lkdGgpKSAKCWxvY2FsIHkgPSBmbHIo
cm5kKHNjcmVlbkhlaWdodCkpCglyZXR1cm4gbmV3X3BvaW50KHgsIHkpCmVuZAoKZnVuY3Rpb24g
Z2V0X2ZyYW1lKGFycixzcGVlZCkJCglyZXR1cm4gYXJyWyhmbHIodCgpKjYwLyhzcGVlZCBvciAx
KSklI2FycisxKV0KZW5kCgpmdW5jdGlvbiBkcmF3X2ZpbGxfYmFyX2godXBwZXJfbGVmdCxzaXpl
LGZpbGwsbWF4LGJvcmRlcl9jb2xvcixmaWxsX2NvbG9yKQoJbG9jYWwgbG93ZXJfcmlnaHQ9dXBw
ZXJfbGVmdCtzaXplCglyZWN0ZmlsbCh1cHBlcl9sZWZ0LngsdXBwZXJfbGVmdC55LAoJCXVwcGVy
X2xlZnQueCtzaXplLngqIG1pbiggKGZpbGwgLyBtYXgpLDEpLAlsb3dlcl9yaWdodC55CgkJLGZp
bGxfY29sb3IpCglyZWN0KHVwcGVyX2xlZnQueCx1cHBlcl9sZWZ0LnksbG93ZXJfcmlnaHQueCxs
b3dlcl9yaWdodC55LGJvcmRlcl9jb2xvcikKZW5kCgpmdW5jdGlvbiBkcmF3X2ZpbGxfYmFyX3Yo
dXBwZXJfbGVmdCwgc2l6ZSwgZmlsbCwgbWF4LCBib3JkZXJfY29sb3IsIGZpbGxfY29sb3IpCgls
b2NhbCBsb3dlcl9yaWdodCA9IHVwcGVyX2xlZnQgKyBzaXplCglsb2NhbCBmaWxsX2hlaWdodCA9
IHNpemUueSAqIG1pbiggKGZpbGwgLyBtYXgpLDEpCQoJLS0gRHJhdyBmaWxsZWQgcG9ydGlvbiBm
cm9tIHRvcCBkb3dud2FyZAoJcmVjdGZpbGwoCgkJdXBwZXJfbGVmdC54LAoJCWxvd2VyX3JpZ2h0
LnkgLSBmaWxsX2hlaWdodCwKCQlsb3dlcl9yaWdodC54LAoJCWxvd2VyX3JpZ2h0LnksCgkJZmls
bF9jb2xvcgoJKQoKCS0tIERyYXcgYm9yZGVyCglyZWN0KAoJCXVwcGVyX2xlZnQueCwKCQl1cHBl
cl9sZWZ0LnksCgkJbG93ZXJfcmlnaHQueCwKCQlsb3dlcl9yaWdodC55LAoJCWJvcmRlcl9jb2xv
cgoJKQplbmQ=
:: include.lua
--[[pod_format="raw",created="2025-06-18 12:41:36",modified="2025-08-12 18:06:26",revision=2092]]
include "lib.lua"
include "helpers.lua"
include "point.lua"
include "sfx.lua"
include "ui.lua"
include "particle_system.lua"
include "camera.lua"
include "input.lua"
include "screen.lua"
include "game.lua"

include "stats.lua"
include "field.lua"
include "bead.lua"
include "cursor.lua"
include "god_cursor.lua"
include "stats.lua"
include "level.lua"

include "shop.lua"
include "shop_cursor.lua"

include "gods/god.lua"
include "gods/red_gods.lua"
include "gods/green_gods.lua"
include "gods/blue_gods.lua"
include "gods/purple_gods.lua"
include "gods/yellow_gods.lua"
:: input.lua
--[[pod_format="raw",created="2025-06-19 02:47:43",modified="2025-08-12 18:32:35",revision=829]]
input_lookup = {
	-- Define logical mappings for clarity
	lpad = {
		left = 0,
		right = 1,
		up = 2,
		down = 3
	},
	rpad = {
		left = 8,
		right = 9,
		up = 10,
		down = 11
	},
	buttons = {
		o = 4,
		x = 5,
		menu=6,
		a = 12,
		b = 13
	}
}
function new_input(player)
	return {
	player=player or 0,
	_button_down_frame = {},
button=function(self, b, hold)
	local now = t()
	if type(b) ~= "table" then
		b = {b}
	end
	local key = join_with_dashes(b)

	if all_buttons_pressed(b, self.player) then
		local start = self._button_down_frame[key]
		if not start then
			self._button_down_frame[key] = now
			return 1  -- just pressed
		end

		local held = now - start 

		if hold then
			if held >= hold then
				if held >= hold + 0.1 then  -- small extra time past charge (you can adjust)
					return 4  -- overheld
				else
					return 3  -- finished charging
				end
			else
				return 2  -- still holding
			end
		else
			return held  -- legacy: how long held (seconds)
		end
	else
		self._button_down_frame[key] = nil
		return nil
	end
end,
		button_press=function(self,b)
			return btnp(b,self.player)
		end
	}
end
function join_with_dashes(arr)
	local result = ""
	for i = 1, #arr do
		result ..= arr[i]
		if i < #arr then
			result ..= "-"
		end
	end
	return result
end
function all_buttons_pressed(buttons, player)
	player = player or 0  -- default to player 0 if not specified
	for i = 1, #buttons do
		if not btn(buttons[i], player) then
			return false
		end
	end
	return true
end
:: level.lua
--[[pod_format="raw",created="2025-06-25 20:26:34",modified="2025-08-13 01:27:32",revision=356]]
function get_month()
	return {
		weeks={
			get_week1(),
			get_week2()
		},
		current_week=1,
		current_trial=0,
		get_next_trial=function(self)
			if(self.current_trial<#self.weeks[self.current_week].trials) then
				self.current_trial+=1
			else
				self.current_week+=1
				self.current_trial=1
			end
			return self.weeks[self.current_week].trials[self.current_trial]
		end
	}
end

function get_week1()
	local ret= new_week()
	--add(ret.trials,new_trial(128,20,2))
	add(ret.trials,new_trial(128,129,10,2))
	add(ret.trials,new_trial(160,130,20,4))
	return ret
end
function get_week2()
	local ret= new_week()
	--add(ret.trials,new_trial(128,20,2))
	add(ret.trials,new_trial(128,137,10,2))
	add(ret.trials,new_trial(136,137,20,2))
	add(ret.trials,new_trial(144,137,50,2))
	add(ret.trials,new_trial(152,137,100,2))
	add(ret.trials,new_trial(168,137,200,3))
	add(ret.trials,new_trial(160,138,300,4))
	return ret
end

new_week=function()
	return{
		sprite=0,
		trials={}
	}
end

new_trial=function(day_sprite,week_sprite,point_goal,reward,start_message,end_message)
	return{
		day_sprite=day_sprite or 0,
		week_sprite=week_sprite or 0,
		point_goal= point_goal or 0,
		reward=reward or 0,
		start_message=start_message or "A new trial begins",
		end_message=end_message or "You live this day"
	}
end
:: lib.lua
--[[pod_format="raw",created="2025-06-18 12:48:35",modified="2025-06-18 20:24:52",revision=450]]
--lib

-- pq-debugging, by pancelor

-- quotes all args and prints to host console
-- usage:
--   pq("handles nils", many_vars, {tables=1, work=11, too=111})
function pq(...)
  printh(qq(...))
  return ...
end

-- quotes all arguments into a string
-- usage:
--   ?qq("p.x=",x,"p.y=",y)
function qq(...)
  local args=pack(...)
  local s=""
  for i=1,args.n do
    s..=quote(args[i]).." "
  end
  return s
end

-- quote a single thing
-- like tostr() but for tables
-- don't call this directly; call pq or qq instead
function quote(t, depth)
  depth=depth or 4 --avoid inf loop
  if type(t)~="table" or depth<=0 then return tostr(t) end

  local s="{"
  for k,v in pairs(t) do
    s..=tostr(k).."="..quote(v,depth-1)..","
  end
  return s.."}"
end

-- like sprintf (from c)
-- usage:
--   ?qf("%/% is %%",3,8,3/8*100,"%")
function qf(fmt,...)
  local parts,args=split(fmt,"%"),pack(...)
  local str=deli(parts,1)
  for ix,pt in ipairs(parts) do
    str..=quote(args[ix])..pt
  end
  if args.n~=#parts then
    -- uh oh! mismatched arg count
    str..="(extraqf:"..(args.n-#parts)..")"
  end
  return str
end
function pqf(...) printh(qf(...)) end
:: main.lua
--[[pod_format="raw",created="2025-06-18 12:13:44",modified="2025-08-12 18:32:35",revision=1989]]
include "include.lua"
tileSize=16
halfTileSize=tileSize/2
screenWidth=480 --30 tiles
screenHeight=270 --16+ tiles
screenHeightTileAdjusted=256 
input=new_input(0)
mode=0
modes={new_start(),0}
game=nil

--include "test.lua"
--run_test()

mode_keys={
	start=1,
	--help=2,
	--level_start=3,
	game=2,
	--level_end=5,
	--game_over=6,
	win=3,
}

function	restart()
	pq("----------------restart-----------------")
	mode=mode_keys.game
	game=new_game()
	game:init()
	modes[mode] = game
end
function _init()	
	pq("----------------start-----------------")
	god_ctors={malvex_god,
				flarim_god,
				dravak_god,
				skaza_god,
				velcrith_god,
				vireth_god,
				egru_god,
				myru_god,
				beloth_god,
				grask_god,
				velith_god,
				asul_god,
				noen_god,
				kyreth_god,
				caela_god,
				zuruth_god,
				meraxi_god,
				ilmeth_god,
				dreluun_god,
				soruun_god,
				yonvek_god,
				thimel_god,
				vollun_god,
				nethir_god,
				ezeleth_god
				}
		next_screen()
end

function _update()
	modes[mode]:update()
end
function _draw()

	modes[mode]:draw()
end
function next_screen()
	mode+=1
	
	modes[mode]:init()
end

include "error_explorer.lua"
:: particle_system.lua
--[[pod_format="raw",created="2025-06-18 12:58:29",modified="2025-06-18 20:03:06",revision=397]]
function new_particle_system()
	return{
		sprites =game.sprites1,
		particles={},
		age=0,
		lifetime=60,
		spawn_rate=0.25; 
		particle_animation={},
		particle_flipx_r=false,
		particle_flipy_r=false,
		particle_lifetime=60,
		particle_halflife=1,
		position=new_point(0,0),
		particle_radial=false,
		particle_position_r=new_point(0,0),
		particle_speed=new_point(0,0),
		particle_speed_r=new_point(0,0),
		particle_acceleration=new_point(0,0),
		particle_acceleration_r=new_point(0,0),
		particle_update=nil, --leave nil for default behavior
		init=function(self)
			
		end,
		update=function(self)
			foreach(self.particles, function(particle)
    			particle:update()
 	 		end)
 	 		if( self.age>self.lifetime) then
 	 			if(#self.particles==0) then
 	 		 		self:die(game.particle_systems)
 	 		 	end
 	 		 	return
 	 		end
			if(self.spawn_rate>1) then
				for i=1,self.spawn_rate,1 do
					self:spawn()
				end
			else
				local inverse=1/self.spawn_rate
				if(self.age%inverse==0) then
					self:spawn()
				end
			end	
			self.age+=1
		end,
		draw=function(self)
			foreach(self.particles, function(particle)
    			particle:draw()
 	 		end)
		end,
		die=function(self,particle_system_container)
			del(particle_system_container,self)
		end,
		spawn=function(self)
			local particle=new_particle()
			particle.animation=self.particle_animation
			particle.lifetime=self.particle_lifetime
			particle.halflife=self.particle_halflife
			particle.position=self.position:randomize(self.particle_position_r)
			local speed=self.particle_speed:randomize(self.particle_speed_r)
			if(self.particle_radial) then
				speed=speed:square_to_circle()
			end
			particle.speed=	speed
			local acceleration=self.particle_acceleration:randomize(self.particle_acceleration_r)
			if(self.particle_radial) then
				acceleration=acceleration:square_to_circle()
			end	
			particle.acceleration=acceleration
		
			particle.particle_container=self.particles
			if(self.particle_flipx_r) then
				particle.flipx=rnd()>0.5
			end
			if(self.particle_flipy_r) then
				particle.flipy=rnd()>0.5
			end				
			particle.update=self.particle_update or particle.update
			add(self.particles,particle)
		end
	}
end
function new_particle()
	return{
		sprites =game.sprites1,
		particle_container,
		animation={},
		age=0,
		lifetime=60,
		halflife=1,
		position=new_point(0,0),
		speed=new_point(0,0),
		acceleration=new_point(0,0),
		flipx=false,
		flipy=false,
		init=function(self)
			
		end,
		update=function(self)
			self.position+=self.speed
			self.speed+=self.acceleration
			self.age+=1
		 		if(self.lifetime>=0 and self.age>self.lifetime) then
		 			self:die(self.particle_container)
		 		end
		 		if(rnd()>self.halflife) then
			 		self:die(self.particle_container)
		 		end
		end,
		draw=function(self)			
			spr(self.sprites[self.animation[self.age%#self.animation+1 ]].bmp,self.position.x,self.position.y,self.flipx,self.flipy)
		end,
		die=function(self,sprites)
			del(sprites,self)
		end
	}
end
	

:: point.lua
--[[pod_format="raw",created="2025-06-18 12:59:13",modified="2025-06-21 13:26:04",revision=560]]
function new_point(x,y)
	return sm({
		x=x,
		y=y,
		unitVector=function(self,b)
			return self.normalize(b-self)
		end,
		randomize=function(self,p)
			return new_point(self.x+random(p.x),	self.y+random(p.y))
		end,
		absPoint=function(p)
			return new_point(abs(p.x),abs(p.y))
		end,
		round=function(p,n)
			return new_point(flr(p.x/n+.5)*n,flr(p.y/n+.5)*n)
		end,
		clone=function(p)
			return new_point(p.x,p.y)
		end,
		length=function(p)
			return sqrt(p.x^2+p.y^2)
		end,
		square_to_circle=function (p)
	    local a = math.max( math.abs(p.x), math.abs(p.y)) -- max(|x|, |y|)
	    local mag = math.sqrt(p.x * p.x + p.y * p.y)
	
	    if mag == 0 then
	        return 0, 0 -- Origin stays at origin
	    end
	
	    local scale = a / mag
	    return new_point(p.x * scale, p.y * scale)
		end,
		__add=function(a,b)
			return new_point(a.x+b.x,a.y+b.y)
		end,
		__mul=function(a,b)
			return new_point(a.x*b,a.y*b)
		end,
		__sub=function(a,b)
			return new_point(a.x-b.x,a.y-b.y)
		end,
		equals=function(self,b)
			if(b == nil) then
				return false
			end
			return self.x==b.x and self.y==b.y
		end,
		__tostring=function()
			return "point"
		end,
		lerp=function(self, a, t)
		-- a and b are points, t is a number between 0 and 1
			local math=self + (a - self) * t
			--pq(self.x,a.x,t,math.x)
			return math
		end,
		box=function(self,left, top, right, bottom)
			self.x=mid(left,self.x,right)
			self.y=mid(top,self.y,bottom)
		end,
		normalize=function(p)
			local len = sqrt(p.x^2 + p.y^2)
			if len == 0 then return new_point(0, 0) end
			return new_point(p.x / len, p.y / len)
		end
	})
end

:: screen.lua
--[[pod_format="raw",created="2025-07-07 01:10:54",modified="2025-08-12 18:16:16",revision=167]]
function new_screen()
	return{
	sprites,
	image,
	text={},
	start_time=nil,
	wait_time=0.1,
	init=function(self)
		camera_helper:set_camera(new_point(0,0),true)
		stop_sfx()
		music(-1)
		self.sprites=fetch("./gfx/0.gfx")	
		self.start_time=time()
	
	end,
	update=function(self)

		camera_helper:update_camera()
		if(self.start_time+self.wait_time<time()) then
			--if(btnp()>0) then
			if(input:button_press(input_lookup.buttons.o)) then --any button not working
				pq("start", time())
			  self.next_screen_action()
			end
		end

	end,
	next_screen_action=function()
		 next_screen()
	end,
	draw=function(self)
		cls()
		spr(self.sprites[self.image].bmp,(480-200)/2,5)
		for i=1,#self.text do
			local t=self.text[i]
			print_centered(t,205+i*10,9)
		end
	end}
	
end
function new_start()
	local ret=new_screen()
	ret.image=192
	ret.text={
		"Press Z to start"
	}

	ret.next_screen_action=function()
		 restart()
	end
	return ret	
end

:: sfx.lua
--[[pod_format="raw",created="2025-06-18 12:57:03",modified="2025-07-07 01:11:23",revision=498]]
channels={
	ship=5,
	enemy=6
}

sfx_channels = {}
function play_sfx(sfx_id, channel,loop,restart)
	data = sfx_channels[channel]
	if data and (restart or false) and data.sfx_id == sfx_id then
		return
	end
	
		sfx(sfx_id, channel, loop)
		sfx_channels[channel] = {
			sfx_id = sfx_id,
			loop = loop,
			start_time = t()  -- use time() if preferred
		}

end

-- Stop SFX only if the given sfx is currently playing on the channel
function stop_sfx(sfx_id, channel)
	if channel then
		-- Stopping on a specific channel
		local data = sfx_channels[channel]
		if data and (sfx_id == nil or data.sfx_id == sfx_id) then
			sfx(-1, channel)
			sfx_channels[channel] = nil
		end
	elseif sfx_id == nil then
		-- No channel and no sfx_id: stop everything
		for ch, data in pairs(sfx_channels) do
			sfx(-1, ch)
			sfx_channels[ch] = nil
		end
		sfx(-1,channels.engine)

	end
end
function play_music(name)
	fetch("music/"..name..".sfx"):poke(0x80000) -- load 256k into 0x80000..0xbffff
	music(0, nil, nil, 0x80000)
end
:: shop.lua
--[[pod_format="raw",created="2025-06-27 23:43:15",modified="2025-08-13 01:27:32",revision=713]]

new_shop=function(stats)
	return {
		gods={},
		selected_god=0,
		stats=stats,
		god_cursor=nil,
		mode=0, --0=ready, 1=buy?, 2=quit?
		selected_yes=false,
		init=function(self)
			self.mode=0
			self.god_cursor=new_shop_cursor(self)
			self.selected_god=1
			self.gods={}
			for i=1,3 do
				local god=nil
				while god==nil do
					local god_ctor=pick_random(god_ctors) 
					god=god_ctor(self.stats)
					for i=1,#self.stats.gods do
						if(god.name==self.stats.gods[i].name) then
							god=nil
							break
						end
					end
					if(god!=nil) then
						for i=1,#self.gods do
							if(god.name==self.gods[i].name) then
								god=nil
								break
							end
						end
					end
				end
				add(self.gods,god)
			end
		end,
		update=function(self)
			if(self.mode==0) then --ready
				self.selected_yes=false
				if input:button_press(input_lookup.buttons.o) 
					and self.gods[self.selected_god]:get_cost()<=self.stats.coins then 
					self.mode=1
				elseif(input:button_press(input_lookup.buttons.x)) then
					if(self:can_afford()) then
						self.mode=2 --ask to quit
						return
					else
						game:next_level() --quit imideate
					end	
				end
				self.god_cursor:update()
			elseif(self.mode==1) then --buy
				if(input:button_press(input_lookup.buttons.o)) then
					if(self.selected_yes ) then
						self.mode=0
						self:buy_selected_god()
						if(self:can_afford()) then
							self.mode=0
						else
							game:next_level()
						end

					else
						self.mode=0
					end
				elseif input:button_press(input_lookup.buttons.x) then 
					self.mode=0
				end
				if input:button_press(input_lookup.lpad.left) or input:button_press(input_lookup.lpad.right) then 
					self.selected_yes=not self.selected_yes
				end
			elseif(self.mode==2) then --quit
				if input:button_press(input_lookup.buttons.o) then
					if(self.selected_yes) then
						game:next_level()
					else
						self.mode=0
					end
				elseif(input:button_press(input_lookup.buttons.x)) then
					self.mode=0
					--game:next_level()
				end
				if input:button_press(input_lookup.lpad.left) or input:button_press(input_lookup.lpad.right) then 
					self.selected_yes=not self.selected_yes
				end
			end
			
			
		end,
		draw=function(self)
			--draw the god icons
			local offset=new_point(170,209)	
			rectfill(offset.x,offset.y,offset.x+(52)*3+10,offset.y+52+5,19)
			for i=1,3 do
				local god=self.gods[i]
				if(god!=nil) then 
					god:draw(offset+new_point((i-1)*52+10,4))
				end
			end
			--draw the selected god
			if(	self.gods[self.selected_god]!=nil) then
				self.gods[self.selected_god]:draw_modal()			
				self.god_cursor:draw()
			end

			if(self.mode==1) then
				local god=self.gods[self.selected_god]
				rectfill(128,62,128+254,62+105,0)
				print("Pledge yourself to "..god.name,171,91,7)
				
				draw_button(new_point(191,128),"Yes",self.selected_yes)
				draw_button(new_point(275,128),"No",not self.selected_yes)
			end	
			if(self.mode==2) then
				local god=self.gods[self.selected_god]
				rectfill(128,62,128+254,62+105,0)
				print("Pass up the opportunity?" ,171,91,7)
				
				draw_button(new_point(191,128),"Yes",self.selected_yes)
				draw_button(new_point(275,128),"No",not self.selected_yes)
			end
		end,
		can_afford=function(self)
			for i=1, #self.gods do
				if(self.gods[i]:get_cost()<=self.stats.coins) then
					return true
				end
			end
			return false
		end,
		buy_selected_god=function(self)			
			local god=self.gods[self.selected_god]
			game.stats.coins-=god:get_cost()
			god:init()
			add(game.stats.gods,god)
			game.stats:update_stats()
			del(self.gods,god)
			self.selected_god=1
		end
	}
end
:: shop_cursor.lua
--[[pod_format="raw",created="2025-06-29 03:54:41",modified="2025-08-12 18:32:35",revision=310]]
function new_shop_cursor(shop)
	return{
		shop=shop,
		init=function(self)			
		end,
		update=function(self)		
			if input:button_press(input_lookup.lpad.left) then 
				self.shop.selected_god =
					((self.shop.selected_god - 2) % #self.shop.gods) + 1
			elseif input:button_press(input_lookup.lpad.right) then 
				self.shop.selected_god =
					(self.shop.selected_god % #self.shop.gods) + 1
			end
		end,
		draw=function(self)
			
			local base_offset=new_point(170+10,209+4)	
			local offset=new_point((self.shop.selected_god-1)*(52),0)+base_offset
			rect(offset.x,offset.y,offset.x+42,offset.y+48,7)				

		end
	}
end
:: stats.lua
--[[pod_format="raw",created="2025-06-20 02:42:37",modified="2025-08-13 01:27:32",revision=1728]]
new_stats=function()
	return {
		points=0,
		messages={},
		chain_counter=1,
		color_values={},
		combo_values={},
		chain_values={},
		gods={},
		selected_god=0,
		moves_max=0,
		movetimer_max=0,
		
		match_vertical=false,
		match_horizontal=false,
		match_square=false,
		lives=1,
		coins=0,
		init=function(self)
			self.points=0
			self.chain_counter=1--chain_multiplier
			add(self.gods,new_base_god(self)) --add the initial stats in the base joker
		end,
		reset_trial=function(self)
			self.points=0
			self.chain_counter=1
			for _, god in ipairs(self.gods) do
				god:reset_trial()
			end
		end,
		match_length=function(self,matches)
			local n=0
			for _, god in ipairs(self.gods) do
				n=god:match_length(n,matches)
			end
			return n
		end,
		score_matches=function(self,matches)
			for _, god in ipairs(self.gods) do
				god:score_matches(matches)
			end
			self:update_stats()			
		end,		
		reset_chain=function(self)
			for _, god in ipairs(self.gods) do
				god:reset_chain()
			end
		end,
		update_stats=function(self)
			for _, god in ipairs(self.gods) do
				god:update()
			end
		end,
		draw=function(self)
			--colors
			for i=1,#self.color_values do
				spr(i,416,182+(i-1)*(tileSize+1))
				print(self.color_values[i],416+tileSize+2,182+((i-1)*tileSize+1)+6,7)
			end
			--combos
			print("combos",410,2,colors.green)
			for i=1,15 do
				print(pad_number((i+2),2).."=>"..self.combo_values[i] ,410,10+((i-1)*8),colors.green)
			end
			--chains
			print("chains",446,2,colors.periwinkle)
			for i=1,15 do
				print(pad_number((i),2).."=>x"..self.chain_values[i] ,442,10+((i-1)*8),colors.periwinkle)
			end			
			--gods
			for i=1,5 do
				for j=1,3 do
					local offset=new_point(2+(j-1)*46,(i-1)*52+2)
					rectfill(offset.x,offset.y,offset.x+42,offset.y+48,19)
					local god=self.gods[(i-1)*3+j+1]
					if(god!=nil) then 
						god:draw(offset)
					end
				end
			end
			if(self.selected_god!=0) then
				self.gods[self.selected_god]:draw_modal()
			end
		end,
		add_message=function(self,message,color)
			color = color or colors.light_gray
			add(self.messages,{text=message,color=color})
			if(#self.messages>10) then
				del(self.messages,self.messages[1])
			end
		end
	}
end

:: test.lua
--[[pod_format="raw",created="2025-06-23 22:39:03",modified="2025-06-25 20:21:36",revision=384]]
		

function run_test()
	local gods={malvex_god,
		flarim_god,
		dravak_god,
		skarn_god,		
		green1_god,
		green2_god,
		green3_god}
	pq("----------------starting tests-----------------")
	for i=1,#gods do
		local ctor=gods[i]
		test_god(ctor)
	end
	pq("----------------ending tests-----------------")
	stop()
end
function test_god(god_ctor)
	local stats=new_stats()
	stats:init()
	local god=god_ctor(stats)
	add(stats.gods,god)
	stats:update_stats()
	stats:score_matches(test_get_matches({0,0,0,0,3}))
	stats:score_matches(test_get_matches({0,0,0,3,3}))
	stats:score_matches(test_get_matches({0,0,0,4,5}))
	stats:score_matches(test_get_matches({0,0,0,4,5}))
	stats:reset_chain()
	stats:score_matches(test_get_matches({0,0,0,0,3}))
	stats:score_matches(test_get_matches({0,0,0,3,3}))
	stats:score_matches(test_get_matches({0,0,0,4,5}))
	stats:score_matches(test_get_matches({0,0,0,4,5}))
	stats:reset_chain()
	stats:score_matches(test_get_matches({4,4,0,0,0}))
	stats:score_matches(test_get_matches({5,0,0,0,0}))
	stats:score_matches(test_get_matches({4,0,4,0,0}))
	stats:score_matches(test_get_matches({5,3,0,0,0}))
	stats:reset_chain()
	stats:score_matches(test_get_matches({4,4,0,0,0}))
	stats:score_matches(test_get_matches({5,0,0,0,0}))
	stats:score_matches(test_get_matches({4,0,4,0,0}))
	stats:score_matches(test_get_matches({3,5,0,0,0}))
	pq(god.name..":"..stats.points)
end

function test_get_matches(colors)
	ret={}
	for i=1,#colors do
		for j=1,colors[i] do
			local bead=new_bead(nil,new_point(1,j))
			bead.color=i
			add(ret,bead)
		end
	end
	return ret
end
:: ui.lua
--[[pod_format="raw",created="2025-06-29 23:44:00",modified="2025-07-01 18:04:12",revision=132]]
draw_button=function(top_left,text,selected,size,border_color,fill_color,text_color )
	selected=selected or false
	border_color=border_color or  25
	fill_color=fill_color or 6
	text_color=text_color or 24
	size=size or new_point(61,19)
	local bottom_right=top_left+size
	rectfill(top_left.x,top_left.y,bottom_right.x,bottom_right.y,fill_color)
	if(selected) then
		rect(top_left.x,top_left.y,bottom_right.x,bottom_right.y,border_color)
	end
	local text_x=size.x/2-2*#text
	local text_y=size.y/2-3
	print(text,top_left.x+text_x,top_left.y+text_y,text_color)	

end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA2LTE4IDEzOjA5OjI5Iixtb2RpZmllZD0iMjAyNS0w
OC0xMyAwMToyOTo0NCIscnVudGltZT0xOCx3b3Jrc3BhY2VzPXt7bG9jYXRpb249ImdvZHMvZ29k
Lmx1YSMxIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJnYW1lLmx1YSM1MiIsd29ya3Nw
YWNlX2luZGV4PTF9LHtsb2NhdGlvbj0ic2hvcC5sdWEjMSIsd29ya3NwYWNlX2luZGV4PTF9LHts
b2NhdGlvbj0ic3RhdHMubHVhIzEiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImxldmVs
Lmx1YSM1NCIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0iZ2Z4LzAuZ2Z4Iix3b3Jrc3Bh
Y2VfaW5kZXg9Mn0se2xvY2F0aW9uPSJtYXAvMC5tYXAiLHdvcmtzcGFjZV9pbmRleD0zfSx7bG9j
YXRpb249InNmeC8wLnNmeCIsd29ya3NwYWNlX2luZGV4PTR9LHtsb2NhdGlvbj0ibXVzaWMva2Fy
Z19lbGVydF9waWFub19waWVjZXNfNS5zZngiLHdvcmtzcGFjZV9pbmRleD00fX1dXQ==
:: [eoc]
