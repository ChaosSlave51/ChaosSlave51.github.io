picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAzLTIxIDE5OjEyOjE3Iixtb2RpZmllZD0iMjAyNS0w
NS0wMyAxODo0OToyMyIscmV2aXNpb249MjY0M11dbHo0AIIIAADPOgAA8yF7WzBdPXtibXA9cHh1
AEMgEBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIAMt5PTAsem9vbT04fSw_AP8Evgvg
C1AbIAsgCxAbEAswCyALAEMAHf8GlTuwS7AkwCRwCyA0MBsAKwBUEBsQRQAd8QwiS7AbAAtAC1A7
ICtgOwA7gBQAK5AkC7AEAAQFAP8EwDTABAAUsAQQBKAUABSQFCAEQGMAHW-gTjAeEC42AB3ftw7A
LtAPD5AeIB0wHtcAHh-wMQAc8AgPGRkWKRYZFgkuGR4ZHhkOGa4J-gcZ3g0A-xspngkOGX4Zjgk_
GT4pDhlOCS45-ggpHjkuBo4ZPgYPFs4WXTYtRg1WLSalAE3v_wMPHwsOGx4LHhsOKw4KAAMgCy4K
ACJLThAA9AcbfgsOG74LDhs_Fn4LrhYeGw4WLgYuCADzAQYuCy4WnhuOBj4b3gu_Bh6PAB8zjwBJ
ge4Lbhb_BBZOiAABBgCPBm4W-gUG-hGAAB-wCgBfHys_DxZeFh4dDj0_Ng49Dh0_Ng4NDj0SAPAY
Hg0ODY4d3g3_ARbONr42XhZOFl42vjZODxUODC4MDhYeDB5MDhxOBgAPeAAcwQvfHxtuDxY_DQ4b
LnsAIRsefAAhGx59AAIWAAB-APEBG24dThtuDV4bjhYuG342HgQAEB72AEEbDjaOBABvHhaeG94L
_QAdwQIPHwseCw4PFg4LHm4BjxYOCx0bDQsNigARJwuODwHAvg8VFj4MHgwODB4cBgAQDgwAHhyQ
AA-JAhQPMQB28AEb3x8bHgauGx4WPhY_G34W4gIR7gIAsR42XgYeCw42XhYeEABwfgZeC142TgwA
D-cAHP8A-x8IDxY-Hw8WXx8WHh8WgwIWPs4W-vIBDzEBbfEY-xUVHxTPFS8UzxUfFE8VHxTfFR8U
-xUmHxQ-FQ8UjxUvFC8VHxR-CABxLxRvFR8UXyEAHyOZAB4PMQB_QQvvHwvQAyIeC9ADIg4LRwMi
DgtIAyQeC0gD8AYOC24dXgtuDW4PFe4M7gzuHN4c3iw4A69eTA4cDiwu7A4sRQI9IQ4GRgLxABau
Bg0mrgYOJu4G-iYPFXQAMRwOHHYAXywOHA58egAeQPsB7x8UBqALLi8WPiYeCy4tBgDwAz4tfgte
LV4Lfg0eHR4LLiYuTQYBAAYAMC4WniUD-wEvFH4cLiwOnA5sDhwODA48PQVBIg4GtARwFi4bXgYN
JgYA9wAOJi4fFZ4GLhzeLM48vjx0AR9c-AAiQd8fG94YBPANHhZeBi4bPgYuJi4bHiY_HxYuGx4t
Th0eGx49PgYAsA0GLT4NHhseJi0eDwD_ASZeDR4bLgZeHR4bjj0OG96_BQ-RAhcPMQB3n9EHgAcw
J1A3IDkAHV-VbxZwjjYAHn-FJ8BHkFdQCAEeDzEA4PEPbxYPFU8WDxU2DxYmfjYOBgcGDjYOFh4W
HhYOFgcGEABRBg4WThYKACAPFQYAIDYuBgAQDQUAwAYXBg4WDhYODSYeJiIAYh4GDS4WHjcAcxYN
LgYHFh4LAHA2LhYOFg0OCgQwBh4NOAACJgA0Jg4NRQAADwAgDSZUAIMeBicGTTYdRswAHzHMABRA
HxYPFdAAcC8WNg4mfnZTAADLACAXJmgAAckAQBcWDhcLAEAeNh4XaQBBLgYnDqMAsD4mBw4GbhYe
Jg5mfwAA4gBxF0YeRgcGJ0MAACMAUAcWDgYurABgFwYXDiYeCgAQRrQAFR6zAD9ONh6zAB2w-xYj
Fn4GPgYXBl6GAEAXBh4WTgAwTgYefgHzBxaeFwbOFwZuJj4GbgYXFl4GPgYHFl4OAK__Jj4gLhBe
sC4AdAAcUAAPFhYH4QBBNg4AHgoAQScWHhDjAPAMBgcmHiAeBgcmBxYuMA5GBzYOQJZQDiYHJi4w
SAF0LjAuBgdGHgYAABgAkSAuJgcWBy4QPs8BURcGHiAuCgCBBwYuIB4WDiYIAG8GHiYHFh6oAB3B
9ggHVhBGBwYHRiAmnABARiAWFwgAMRYHFgoAALwAAwoAMRcWMAgAYCcWICYnFokAMDAWJxIAYAYw
FgcWEDYA-gcGQDYAJhcGYAYQJgcABpAWAAfABvAGlAAPkQMUDzEAdvADHxUGPxaGDxUGDxYmPgYu
Fg8VmAMBxgNVDQYeBgfIA0AdFg4X9wIFvQMoBxYOAAFbASEOFg4AMh4mB84DEB7CAwAEA2ENHicW
HhcJACIXJgkAZw4GBz4GF88DHxfOAwcvDT4cAx-xFfYDB9Y3ticmJxYXhicWFyYndgc2JwYXlgd2
B9YXFhcGFxYHNggA-ge2B0YXNhdGFwYnBgd2F4YHdhc2J-YBbgAPqQEUDzEA-woPbQICJAcGbgIG
NQYVDTUGHw00Bg4lHR40BiUdHjQGIR0eNAYfHTMGTEEGPqYOywBwBwYuVg4WHpEAoBcWPgYeBh4W
FwZ8AFEOFgcmLqkAEA7cEACsBRIm7wJAFi5WDnUCAbYFAFYGMwcGLskAQA4mDhbPBTgGHge6ABgH
ugAVB7oAL08VuwAf8wQAHxYQPiA_AO4A7gAeFn4GHgAORwY0DgAeSQYzDgAuSwZiHgBuFwZOBQBx
HiYuBl4AHmkGES4IAFA_Jh4APs8DfxYOAJ4mHkBZBiKA-xYVBk4GPgApASEOEAYAoCAOJg4QHiYw
HhYHACVADgcAYCAeFlAWMAUAIEAOBQCvHgZQFmAGUAbwKwcBHfAL1hA2AIYQdgBGEAYAtiAGF5Yg
FlcGFxYQFjciBAEIACAnBgQG8AI3BhdWADY3RgcGADYXJhcGFwgA-gIWRxYQJgcmNyYQFldWENYQ
1vUAD3QDFQ8xAP------------------------------------------------8XUG09OH19
:: gfx/1.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAzLTIzIDE5OjA1OjU1Iixtb2RpZmllZD0iMjAyNS0w
NS0wMyAxODo0OToyMyIscmV2aXNpb249MzM1MV1dbHo0AB4IAADuVwAA9yV7WzBdPXtibXA9cHh1
AEMgEBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3g9Mi4yAQARMxYAOXk9MBYAuzIyLHpv
b209OX0sWwDwBBVRgA8QUQ5gHgEOEQ4BDlAeEQ4CAHFAHgEOIRgBCACVAQ4BHgEeMA4RCgAiAR4K
ACAgIRUAsAUOEQ4gAS4BHhE1BwAQLh4AkCABAB4BAA4AAQMAICABAgC-EAEwARARIBEQARDCAEJB
DiEOAcIAAbIAAMQAArIAAMYABbIABLwAIhEOCgAQBQUAECDzACAeBQoAVBEeAS4BxwBgESABDgAO
CgARAMIAA8YATxEAESDEADvRUDWgFQYlgBUHRXAVBgQA-yCAVZAENQSQFBkUkA8ZSZBZkARJkAQf
FRkEkC4ZBJAPHg4fGRmQHRANCYAvIBAsMI0AOvECBRsFoBUbFYAVDh8ZDhVwFQ4GAHE5FYAZFRmQ
BADwEB0ZkA0JHQkNkA05DZAEDSkEkAQdGQSQBA0QCQSQHRCaAB8ZmQBA8gIvGQWgLgUGBYAuBQcl
cC4FBgUA8RaAHjWAFA4lkCQOCaAkDhkQDxVgJA4JDhkdHx4wFAAOCQAOCR0cCgAV0AMAPz8gQJsA
Of8J8EUPHrAOIA7wDQ6gXpBe0A7ADvASDvAKZAA6kVUPHvAODhAOcGIAYBAO8AsO4AcAHwmLAkcg
gAWLAvAKcA8ZAAQ1BAAJUB4UGRQJDlAuSR5gLhkugJ8CIAQO-wH-Ah4ZBJA_GYAeMA4JYC8gMC0g
HwNZYIAuGR4JYJwAQA4JUB6RAEAeUA4AlACRAA5wPhmQHhAOKAMfLY8CVfUOcCQOJYAkHgmQJB4Z
gCQeGR5gJB4pcBQAHgmQFBCEAk8OHyBQIANdwQQuGRAeUD45DlAeFBoDIGAOGQNioBQeGbAuKgFf
kC8gEB25A1YmBACaAJCATgkBGR4wLgS1AzgBGWCaAI8BMBmAHyAwHVkCWWQ5DpAOOQ7iAvADDxUJ
BJAEDh0JBJAeHRmQHh8e5ARPHx4vIC0BOv8E8FYFAAXQBQAVsBXABQAFsAXwSl8AOn9nCvAACvBn
VAA6H-BOADrwFTMKgApAGmAaQComGCpgNggWcAYYDxEfECZgGAYOAA4GCAZgJggA-wcYcBYeDxEW
kAg2oA8XIA2gDSANkB0guwI7L-BDjQACIQAPjgBCLgYIBoUA-wdgHxcACDYAHTANEB0gHRANEB2g
HfAAFwFWGC4VASgOABYBXx0AHfAF7gGHQWAfHtACAPACkA4gHgAOsB7APsAeEA5QDiDbBn8ADvAK
DvA6cQBC8gIwDkAOIB6wXrAeoA4QHkAOYFMHT0AO8EQdA4gPTgA6PwHw750AOv8JkpRQlFAfGRRu
MM4QPhleCR4PIBcOmQ4dZQA6r4MIQAhwBCgQKARtAFAYBrsGQAUPFQW5BiINFQYAX4AeBQ0V7AcN
ER7pBw9uCjvyFhQvGbAuFZA_BgWQDhQFBhWADgQOJaAeFZAkDiUABWAkHgkQBWCQABAVkABQBRkA
BVCTAK8gBVAUEA4ECdAZfAg8IPAkkwDxBwWgDgQOFaAOFAUXkA4EDgUHBaAeBQbfB0EkHgkFmwAR
FQYAAScB-wgZDhAPIEAUAB4FBCkNBTAUEA4VKQ0FIJgAPxAHmABQBwWgJCeXABAGlwAVB5cAA7kB
YgkecCQeFJIAUBUOJBkNBwBvBRQFCQ0wDwSI-xsTBDAEEASgBNAEEAagBDAEYAQgBvAABKAUUAYQ
BGAGAASwBPAPBDAE8CV3ADrwARUUUAQwBhAEQAagBPACBHB2ABACBQD-AAcEoAaABPAKBqAEYATw
FDoBOw9OAP-B-zQFPxAgDoAeHQAuUC49LkA_PR5ADh0uHT4wPV4dMD1OPTAdXj0wjh0OIC4dbjAe
PV4wDgA9Ph1QDh0eED2ADhA9wB0QkAA9-0AdAA5ADjAOPR4wDh0AHj0uID0uHR4ADiA9Dh1OMA4d
Dj0eHSBOPQ49MD4dHj0wHW4dDiA9bh0gPR4dHj0QDh0ePQ49IC4APR4dMB4gHfAGywE7D04A--8Q
-wmoDxjQDggOcA4gDhgOcAgOGA4YHlAOeA6BCDv-AWYPGAjAHggOsA4IDsAe8EldADrwIRg-GJAu
GA6QDigeIA5QDigOAD5AHigOAA4YDjAeOC4IHiAeSA4oDjAOWA4YHiAeKOQAWA4wDigeCAAAGACe
KA4IDjAOeB5AAAEPowAxYR8ODpAOLaQAES2kABMtpAARPaQAEU2kABFdpAAxLQ4dnAAoLR4IAAAY
ABEtpAB-fR5ADn0OQEcBUyEfDkgBEQ1IAREtSAETHUgBEx1AAQYIAAJIAR8NSAFeER1IARENSAER
LUgBEx1IARMdQAEGCAACSAEfDUgBRB-wTgD--6zyETIPG5AOIA4ADnAOAA4ACyB_IAswDlsOcA4L
AxsDCw5wDACfPgsOgB4QHvA1fAA6HyJ8AAVMAxsDG3sAH0V7ADofEnsAAT8DOwP5AAUfVfkAU08b
AxsD_QBLcAAL0AsADxuNGp_QDkAOcA5gfnD5AAYfGn4APR8QfgAbT6A58CaAAGufoF8ZoD3AHxhg
hwA6-wFHGsA5oFmQXxmgPsAfGPBHXQA6T2ca0BrAFzxfZwoJ0AkVGD1-ZwkPGdAOCVYAPU8fGNAe
VAA8H-BOAP------------------------------------------------------------------
-----5hQbT05fX0=
:: gfx/2.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTI0IDE4OjIyOjE3Iixtb2RpZmllZD0iMjAyNS0w
NS0wMyAxODo0OToyMyIscmV2aXNpb249MTExM11dbHo0ACkTAADESAAA8yF7WzBdPXtibXA9cHh1
AEMgEBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIAMd5PTAsem9vbT04fSw_APEAq50E
8P----_vDxYPFfCZBgDwX-8tBQ7wEI7wAa7wEK7wA84QrrAfFvAQCWoPGTAEClkKDxQQDZoJIA6J
Cg8ZQA4KaSAEmg5QDgpZMMoADaoO8BwMCmkKBBAECnkKDQANCpkMEA4KqQ4QDQqJEAQKiQoNMA6J
DhC5CgAOCokKDvAbKADyBwQADQqJCgkeCpkKBBCpCgwADRp5CgkVALUNIA0KaQoNEAkKmTQAEQk0
AEAMCpkKMwBQCRDJAAQeABANQAADLwAQuQ8AAS0AsQwKCQoEIAQaBAAECgDxBA4pCh4KGQoOIAQK
GQwQKQoNPjkaAKEMIA45AA0KKQ0uMgAREBQAYBAOKQoNQBEAcQxADQop8CMcACQgDU4AFDBNABIN
TQAgDjBEADEJCgwIAEUZCjAETABhBCApCgRACgAISwAcPpcAB0oAHwRKAAcdDUoAH3DfAAQoIA5J
AE8pPQwZRwADPU7wHkgAAl0BBtEAPyk6KT0AA31KDfABAfALQQB3iRoOEKkKCYEATokKDCBBAF5p
Cg3wHX8AaA4QDqkKDj4AEAzZACwpLH0ADjwAMCkqGdMBRokKCSA-AJh5Cg0wBAopCkk-ADM8CQ5A
ADggLhBCAFAkDBkKCacAFoBCACEpDlQBAcoCDs0BHQxmAkEQBAopzwEYgM0Bjw4QCQoZCg0QRwAE
HARfAiAQDosAFBCLABUERwAAGAAJqwIHTABwCQoZDCQZCksAKyk0XgIASAAjKTRGAAKQAQ-XAQGR
ZA7wCw8WDtAMTwEBSgAfOkoAAR86SgAOh2oO8AsFDuAJHAQTDkcAIQkKSAAQkBYAAOwBCkgAEQw3
AwKCAxEE0gPGHA4JCkkKDDAJegQQdgDSCRAaCQoNoA0aCUoOEEUAJAwqQwAqCSpDAPIXHm5QfjA_
QD4QPsB_MD4wPjAuMD5gLmCu8P91PvAnrvAWHhC_8B6hAFAJCgkKDs0AEQChAAFYAzAADQqYAsqq
BNAECmkwqQoQqgwvAAAGAAIxACEJDoQAEwkzAPADmQoEwAQJCnkQDgqZChAKiQoEOQBEKQ4gOWQA
FIn5AAYyABCw_AQxDRCpMQAFagAFMgARmQYACjIAX7kKDgCpYQADAIcCBQoAElAGAPEBKQoN8AMp
Cg0wKQoOADkOcGIALvAlOQAARgEIOwBmBEAOKQoOPAAvKQo9AAgEFgEPPQAHEIA8ACvwJuEADrIA
tARADjkETRAOfQ4QPQC6OQ1OIA4KKQ1O8CB6ADqZCgQ6AGZJShAEegk5AJ9aDhAOCila8CCJAQQE
OAB1mRANClkKBDkAEImBAywKiTgAEHnCAwg4AHt5CgkQBHoMOABLOUrwIOgAAGUDGg08AHyJDBAN
DFQMdQBEOSwJDHgAAxsBQSkdBClTBAleAQ-XAQFAHAsOYAoAQyAOOQ16AAAlAyQaGQsADp0BDj8A
ECksAFY5CgQADkIALw0pQgATVCUOCvkClgEuMAQWAok5ZA2wCikMNDYAnyYECmkaaQoEDjgAB3BJ
WgSwDTk6FAUFNwCvJwxJCgkdBApZIDcABgCVA0UMmRAONADxKgAGBfAWSgkOIAw6CTAEKgkwCSoE
AAQqCVAMKglADqoE0Al6DhAOOg5wDjoO8AAO8BcOPVA9DjAOLQQAUAAOLQ5QBAChrQ7QDn0wLQSQ
PWUJ8I9QDvALjvB2CwXwCgEFUQUBDvASDgvwaQEVASARIAEFAfARDgvwXAGgDgXRBfCJAQUBEMEF
8EQGDvAxAQURGwEAcSARDvBCDvAyDhULHw8BAGFABQ7whBEACwcIBYFAEQ7wgwURBQ8NBRBhYAEO
8IIRFQ4BAIFgEQ4wXQ7wdgURFaFwAQUgDkwJDA7wdQUBABEAgYABDhANCXwN8HQF0QwA8CAOZA0u
8BkB8EkFwZABDnBe8HMFEKGQAQ6AXvAjAfA_BRCRoAEOkA0_8A8B8AEBABMAQAEgYbA6ACBgTiMA
8eY-BQEgMcARIB4gDiANLvAjEfAQDgXwHAUB8AQPEw4QXg0OID7wITHwDwUL8BwR8AMREA4NDg0E
DQQNDiAuDQ7wIGHwOxHwAQEFAQAeAA08HQ4QTvAECw7wBwEQQRAB8DwR0AEFEB4ADlwEMC7wBQsF
8AaBEBEgAfA4IZABFRAODRBsBA0OED7wGvEB8DcEDQABFZEFARAODQAOfAkEID7wFgEQERCxEAHw
NgQMEB6FATANDgAOCWwEDTAu8BUBEAEQAQCxABHwNQ0EDvAALgAOBHwNHiAu8BcREPEBEAHwMgwE
AA4NAA0_PQ4AHg0OEAQJBA1MBCMA8BYW8QrwMRQADQwNjA0OHQ4gBAwdDCQMDS4wDg0O8BHxDRAB
8C4EbgBADAQ9fhUA8QcNCQwNHgQNHkA_8BAREBEQ8QUQMfArIwDwKQkMDbAOMA4sFE5ADg0e8AoB
EBEgMQDxDfApDRwNEA0MBB1wHQ4gDmwuYC7wDhEQ8Q4QERAB8CYc-ADwBwksBA0ATRwgDQwJPAQN
LiAOMA0O8AvbAPAt8Q8QIfAnBBwNDg0QBDwEAFwNEA4UDQQcDT4wDjAe8AwhEPEUIBHwIQ4JHC4g
BCwEAA08BA4QDh0ODQQMSQAgDR5LAPAECfEfAAHwIA0UDT4QDgQsDgAELLMAoAQcBA4NHA0eMC4l
AJAI8R8QMfAhThAYABAAHAAAcgAxLS5AQwDQBxEQQSDxGzAB8BchgF4AIQAM9wDxBEwJBE5QHiAe
8AEBUBEAYQDxGhCTAfAN8BQxkA4EDAAOIA5cHT6wDQ7wBAEQ8SAQMRARAB8A8AASIQUxgA4NIA4N
FDwNXqBAAPELMPEhAB4QUQAhMBHwDQEOQcANDAkMBA0EDAQhAOADERDxIAAOHxgggRABAMkC8A4O
QcAMBCwEDgQNbvAQ8SMADTMOEMEQAfAKARUxQKID8A0EHA0EHAR_cC7wABEQAQDxIwAOEwwjIPEA
8AgBOgLwIzARFREgPB0EHgBOQC7wBiEAERDxHxATDDMg8QLwA1FQAQUxIEwNDg0eAD6AHvADARAx
IABQAxxDINHHAPAH0A4vEhARQAEFIUAEPA0_AA4NDqA_sK4CIPEkagAiHx_SAAHyAPAIkAFPElAB
BUFADiwdEA0OcE4wHsDxKhAmAIEEQw4Q8QAQAdcA8AQRMB8SAQ4BEiBRUD4MBB4QDmAuJQfwmXAB
MPEpEA0DBAwfHwxTDhDxAhAhECEQEiABEg4AIQABcA0OAAQNDg0OcI4NHgAOgAEQ8SoADQMEHCpj
DhDxBhAxAA8CEgEQARIgEYAeAB0ecA4NrgAOQAEg8S0ADRMcKnMg8QoAATIPDQIAARIgAWAeEA0u
cA4NHj1eUDEA8SwADRMsChgEcyDxCQASAQIPFwcPDQEAAQIB0B6QDR4NPA1OMAEA8SAg0SkA8BcI
BwgMAw1DDgMg8QcAARIPAgsXDw0CAQACAWAB8AEeDQwELA1OMGwBIDCxpADwJiwKOARTLQ4Q8QQQ
ASIPDhcGEhACAUAB8AIeDUwEXjAhAPEfQKEAEwQ8KAcKAw0DDQ4NAw0TLwAAWwBxDxcHCRsCATYC
8hQDBGwEPjDxJHBxDiMaDAo4BAMNAy0zDRDxAQABIgYJBwkfAioA8BcgHtANbAQNHg0OIPEeQBGQ
MRATBEw4BHMNDh0A4RABIgsXCQIRECkA8GwOHQ6wDgwEHQ4NHC5A8Q4wcaABwBEAEyocCjgKAw0z
HQ4AHQDRABESBQsIGSIgETARID4NsA59PiDxDGBx8AkBEBMEKgwGSAQzDS4NAw0QsRAyDw0ZBgUS
IUAxAA4dTqAeBDwgLiDxCqAh8A8TDQ4NKggGGA8HCgMdAz7qAPEdEJEQIgEPDQ8HGSIBAKEADRwE
TmABIARcBB5A8QnwHg0DDgANEwQ4BwoNAF4wALCBAAEyCQcJCw8NEjEA8gwOPAQ_UDEABGxOEPEE
8CQDHgMNDgMMCggKBAMyADBQMRAZAhACNADwBxLhAA5MDXBBAARcDU4g0fAKNA3wCgNuAZAOAxwK
BCMNTgAMABBgRwLwHQUCGQYLEgEQwRANBA8JDA1OIFEAHQQIBA4NPiAOEKHwCA4EDQQcCAwNHvAI
sQFxHgMsAw0TDaUAEHAvAXAXBgUiENEQSQZRHg0eIGEKAPBSPjANDhBh8AsOTB0eHQ7gHmAODQMd
AxwEMw1ODRMNDnAyDw0HDw8LBRLxAhAeMA5gQSAOgB4wMfAMDgRMPR4dwA4TDQ5ALiMcAw0jDQA_
DSMOUA4yBgoJCyIOMGEwMeBRoNkF8gIUBHwdDgAO4BQTDUAODTMMQ10A8B9AHQESCxkLEgUOkAGg
DTwNDuANPA1e8AsODQ5ABEwUDS7wAQ8fCgMNE0ANMwxzzgHyWB4wDQMQAg8NCQoGEg7wCT3wAk0_
DQ7QDQw0QAQMDWAEPAQuDfADAx8fDSMNIA0zHEMNPh0uIBMNEAIJBwsFAgHwCj7wAw0eDT4NDsAN
TA0OID1wDSwdLvADDQwKCw0jDQMADkMMQw0JAgCjAEAADgkG2QHxH-AMHR7wAk6AFA0EDQAOEA0E
PQ4NDoAUDA0QHg0OHVAe0AMPHwcEDTMNAA0zBEN6AjEuDSNAAPACAgES8BAODaAEDQ5AEZANDB9j
BfMODkA_cA4sBA0OMB5AHg0OwA4PCAwKBwstExANIwy7AvASAA5DDQ4QIg7wCj0OIA5gDRQcDQ5Q
ARAuYB0UHWAOgA4UNwcQQGABsAANHA8fChsDDR4QigHxIxMNLh0eDSMNLhAi8AUOMA0sBB0OgA0k
DlAObQ6QPQ7wAh7wDwMsBwoDDgAOECMEDFMe1QLwARQNAB4QEjAOAw0OIB4QDjC7BxA8pgfxGvAE
PA0uDQ6ALhAeUA4sBPAVDhMMBAgEThAjDAMNMx4dAA0DHQoELhACpwhwAw0OUAQPCYIHwA0gHBQN
PvAEPAQNHkcA8AEkDARNMA0MBAwEUA0MDR6QOQdBEx0DDEoA8RUeI04NAwQaDwUALhANMxQOEJwE
DjBN8AcNLA0OLT7wAz4NLmD5ArAeQA4tDmAUDA0gDXYCEE75BSADHcsDgB4NAw0ECAQ_uwHwAxQN
HhAsDS4dDvADDgAeoI0OwNgG0R7QDQQNEA7wBA0UDUA-AEI_ECMU4wQABAHwBgwDPhANAx0LCAwO
IA49JA1QHoA_PW0HcAoNLB0ekA6EAeDwBg5QDhAdEw0TPgAOE3AB8BcuDSMEDS4QDgMNAwQKCA0e
EA0eBEwNVD0eMC4dDjAOHQwNLvAGBNQE8ActkA4ELQAOUA0EDeAeTRAODRMNAw0_kwVQDDMuEy26
ADAEDQuJAWAuDSQNBGz9AJANRA0eIA4NDAU4AiANQEoDEMBRAeAuEC7wAQ4EDA2wDQ4EPMEAEhA6
BLMNHhATDQQDLT4QDpYA8AINED6QDRRcFA4dBEwNDgAePMYCMCAOII8IMTAuLUYCwDAOTeAewA0c
NAwEUAQC8CkDDjANEwQDDS5ATiANbqAOLQQMBAw9DgQMBA4NDA0OBEwNHlANHB0uIA4dPA0uoBwE
Hh0OgC7wBdMLcB4wHRANAwyUAPADIAQFDRAeQE6QDUwEEA4NHgQ8vgYwBC1gigAQMPgE8AxwLA0Q
HjA_8BAOJA5ADiwOEA0DHhAkLQ5AHYAsCfANAA4dcA0cBC0eDQ6wDhwEHWAELARdDhAOEAQcBFUH
EFCdASEUHR4BkCAEHAQdDhAeEG8JMB0gDVMJ8AAOMA4NBBwdDjAuAA4gDQ7KAuBQLlAdDnAOFC0e
UC4ADtgBYBAO8A8OTRADEA0gCvABAB5ABAUMBB0eMA4UDQ5wDs8KQB4wLnDCCwB1AYDADgAOgB7w
HMkBYA4ADkAOINAM8H_ADvBIHvAVDnAOoD3wVR7wGh5wDQ6QFA7QDg8FgAYLcA4gJjAWMBYOYDsQ
KwYbDhArIAYrBvBQBhoeKg4gCwpQBhoADisKBgAOGwoLEAsaCA5ABgorEAoLGgsKDgAOCwoLBhAa
CwoLDvBOBgsGAAsKJhsQDgYLQAYKCwALChAGCgAKCxAKDgAKDgALCkAKfw7wCiAGCiAKCwAKBhAO
Cg7wTQsKEBsgDgYgDgpbAAFTACIKCwcAATcAYBtADjswBjYAQA4QCgZPABMGNwBRCwogBgs4AKML
CiAWCwoQDgsGNABAUDYLBigAwxAGSgYACyoL8E8OG1sAxAYQBgsGUAsKQAYKQJkAEpBWAEEQBgor
YwAgDhYyAJAKIAsGCzALCmBbALAKCwoGEAsaCxAGKnAAMysGDjIABMwAkAcO8GMOBhAOJlEBQA5Q
RjDUANsGIAYOAAYOEA4G8P993hdTLTUuMjXiFyIyNeMXOzF9LCEYH-AUGAwPMQD-------------
--------------------------------------------------_HUG09OH19
:: gfx/BlueBoy.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAzLTI3IDE3OjQ1OjU3Iixtb2RpZmllZD0iMjAyNS0w
My0yNyAxNzo0NzozNiIscmV2aXNpb249M11dbHo0AH4AAAASMQAA8yF7WzBdPXtibXA9cHh1AEMg
EBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIAMt5PTAsem9vbT04fSw_AB-wMQD-----
-----------------------------------------------------------XUG09OH19
:: gfx/tiles.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAzLTIxIDE5OjM1OjEzIixtb2RpZmllZD0iMjAyNS0w
My0yMSAxOTo0NTo0MiIscmV2aXNpb249MThdXWx6NADGAAAAZjEAAPMhe1swXT17Ym1wPXB4dQBD
IBAQBPBWBxAHwBfQF8AHEAfwVixmbGFncz0wLHBhbl94CADKeT0wLHpvb209OH0sPgDl_wAPHxsO
Cw4bHgseGx4KACkuCwoAIAsuCgAiK04QAH8bfgvuC-5xagAcwf8fFBbONr42zhb_JAkAUl4WThZe
EQAfC0wAHC-w8DEA------------------------------------------------------------
----dVBtPTh9fQ==
:: gfx/wip.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAzLTMwIDAyOjM2OjI2Iixtb2RpZmllZD0iMjAyNS0w
My0zMSAwMjozNTo0MCIscmV2aXNpb249MTM4XV1sejQA_QAAAMkxAADzIXtbMF09e2JtcD1weHUA
QyAQEATwVgcQB8AX0BfABxAH8FYsZmxhZ3M9MCxwYW5feAgAy3k9MCx6b29tPTl9LD4A8BUzCoAK
QBpgGkAqJxgqYDcIF3AHGA8RHxAnYBgHDgAOBwgHYCcIAP8JGHAXHg8RF5AIN6APFyANoA0gDZAd
IB0wcAAdH0NwAA4CaQD-B2AfFwAINwAdMA0QHSAdEA0QHaAd8ADeADknLgfcACgOAN0AXx0AHfAF
bAAdH-AxAP---------------------------------------------------------------0RQ
bT05fX0=
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAzLTIxIDIwOjQwOjA5Iixtb2RpZmllZD0iMjAyNS0w
NS0wMyAxODo1MDowMiJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAzLTIxIDE5OjEyOjE3Iixtb2RpZmllZD0iMjAyNS0w
My0yMSAyMTozNDozMiIscmV2aXNpb249MTMzXV1sejQAcgAAAGEQAADwCHt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDMyAwAvIjABAP--------------------vxCyIpLGhpZGRlbj1mYWxzZSxwYW5feD0y
Ny41CwDyAnk9LTYzLjUsdGlsZV9oPTE2CgAQdwoAoHpvb209MC41fX0=
:: map/level0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTI5IDAyOjEyOjQ0Iixtb2RpZmllZD0iMjAyNS0w
NS0wMyAxODo0OToyMyIscmV2aXNpb249NDQ4XV1sejQABQMAAMPCAQD-D3t7Ym1wPXVzZXJkYXRh
KCJpMTYiLDMwMCw0OCwiMAEA------------------8QKjEyBAAPAQApPzMyMAEA-----2APsAT-
----pyoxMgQAD2AJ------------MioxMgQAD5AEDQ_UBAcOHAAPsAT-----SQQBAA6wBA8BAAEP
sAT-----cwgEAA_wBP----_RD3gEBQgEAA8BABUvMzIEAAcMAQAOFAAPAQD-----Ky8zMjgASyYz
MgQADwEA-----zUvMzIEAAMPAQALDyQAGwwIAA8BAP----9lD3wEEw_oBP----9zCIQEBAQAJjAw
DAAuMzKgBAwQAA8BAP------------------------------HC8zMgQAGw8BAP--------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
--------------7xDCIpLGhpZGRlbj1mYWxzZSxwYW5feD0tMjE0MQwA8gF5PS0xNzMsdGlsZV9o
PTE2CgAQdwoAr3pvb209MC41fSxh4f-----uTzE0MTABAP----9xPjEzMQwADwEA------------
WT4xMDF0CQ8BAP-----------------------5YOpBIPJA7------------------xAPvBf-----
-------------------------70PUBf-----------8mDwEA----------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
-------gD2HhLVAwLjV9fQ==
:: map/level1.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAzLTIxIDE5OjM4OjEyIixtb2RpZmllZD0iMjAyNS0w
NS0wMyAxODo0OToyMyIscmV2aXNpb249MzU5MF1dbHo0AJoEAADxwgEA-w97e2JtcD11c2VyZGF0
YSgiaTE2IiwzMDAsNDgsIjABAP------------------RCYzMgQADwEA-----20PhAQVLjMyLAAP
AQD-----YSoxMgQADAEAKjMyDAAEBAAPAQD-----ZS8xMgQAAw8BAP----_FLzEyBAALDwEA----
-30vMTIEABcEAQATMxAAGzMEAB8xBAA0DwEA-----w0PIAQlAKAED0wAHS8xMiQAEw8BAP----8N
D7AE-----6UPBAAhBLAELzEyBAA-DwEA-----w0vMTI4ADcvMTI0AA0PJAASDwEA-----w4vMTI4
ADcvMTI0AA0PJAASDwEA-----w4vMTIQDicXMQQAJjAwCAAPbAANDwEABw4gAA8BAP----8BDyAE
JQTAEggMAC8xMmwADQ8kABMPAQD-----DQ_wBDEPTAAVLzEyJAATDwEA-----w0PsAT-----pQ8E
ACUmMDAMAA8EADMPsAT-----Fw84ADUvMTI0AA0PJAASDwEA-----w4vMTI4ADcvMTI0AA0PJAAS
DwEA-----w4vMTI4ACcIBAAmMDAIAA80AA0PAQAHDiAADwEA-----wEvMTI4ADcvMTI0AA0PJAAS
DwEA-----w4vMTIEAH8PAQD-----DQ8gBAUvMTJMADcIIAAPJAAQDwEA-----w4vMTI4BDcvMTIg
AA8PJAAQDwEA-----w4vMTI4BDcvMTIgAA8PJAAQDwEA-----w4vMTI4BDcvMTIgAA8PJAAQDwEA
-----w4vMTIEAH8PAQD---------------------------------------------------------
------------------------------------------------------------------909A8iKSxo
aWRkZW49ZmFsc2UscGFuX3g9LTIyMDIuODMBAAEXAIV5PS0xNjIuNgEAsjcsdGlsZV9oPTE2CgAQ
dwoAr3pvb209MC41fSx44f------------------PE8xMzEwAQD------------------------L
PDExMdQSTjQxMDH0Eg8cAAQOOAAPKBP-----------------mAiYDQ7MDQ8YAAweMRgADvQNDxwO
-----------------6gEjA0P9A0FDxAODQ8BAP-----------------------38ITCAOqBIPwBIj
BDAACFwAD9QgAQ4oAA8BAP----------------_4D9Ag------------Gg7sFg5gFw9MACAPIDgG
CAwACCwAC7RGDwEA-----------------------------9wE6BYEnCAqMTMIAA64IA8QAAAOaBcP
AQAGACwADiQACUQADwEA--------------------------------------------------------
--------------------------------------------------------------------------8n
D3jhBT8wNjR44QEvMDN44RNQMC41fX0=
:: map/level2.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAzLTI4IDE1OjAwOjE3Iixtb2RpZmllZD0iMjAyNS0w
NS0wMyAxODo0OToyMyIscmV2aXNpb249NDQ1XV1sejQA9gMAAL-CAQD-D3t7Ym1wPXVzZXJkYXRh
KCJpMTYiLDMwMCw0OCwiMAEA------------Wz8xMjCwBP----_iIjMyCAAEDAAPsAT---------
--9KBAEAD7AE-----5EvMzIEAAMmMDAMAA4EAA_wBP----9vDwEAGw_wBP-----------zQA0BIP
sAT-----kR8xBAAMD7AE-----4EIAQAfMRAAAAwEAA_wBP----_NDhgAD7AE------------KB8x
BAAADAEAD7AE-----30PnAQBCAQAJjAwCAAPsAT-----iQgMAA9wF-----_NIjAwlAQPFAAHD7AE
-----------------_AvMzIEABsPAQD-----aQ98BB8PsAT-----------8sKjEyBAAEAQAMEAAm
MzI0AA_wBP----9tDAEALjEyrAQvMDCsBP----9vD4AEEw_wBP-----------zwmMTIEAAwBAAgY
AA_wBP----95D6AEAQgEAC8wMLAE-----4sOAQAPsAT-----------------6A8EABUmMDAIAA_w
BP----9tDwEAEw_wBP-----------0guMTIEAA_wBP----_NDgEAD7AE-----3cfMQQAAA_wBP--
--_NDgEAD3AX------------------wmMTIEAA8BAAcPsAT-----fw4BAA_wBP----_HDwQADQ8B
AP----_dLzMyBAADDwEA-----5MOqAQPAQD-----------------yPEMIiksaGlkZGVuPWZhbHNl
LHBhbl94PS0yMjIyDADyAXk9LTIzNyx0aWxlX2g9MTYKABB3CgCPem9vbT0xfSxf4QoPAQD-----
-------------------------4AxMTMxBAAHAQBfNDEwMTC8Ev-----------------------6gL
rBIMEAAP0AT-----oQ6EFw-AEv-----------------oDwEA-----5wPNCr-----vgd8Fw8BAP--
---------------------5AIXBcDqBIMcBcOgBcPDA7-----------------5A4QAA8QDv----_M
TzExMTABAP-----------------2BAAODLwSBBQADiAOD3wX-----34OcCUPAQD-------------
----------_aDGwXDFwXDoQXDwEA------------------QvMTPcIP-----------zgEOAkOWBcP
AQD------------------w0PcBf-----iQ6MBA-0Df-----------0gH-A0PAQD-------------
------------------------DQ9f4StQbT0xfX0=
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAzLTIxIDIwOjQwOjA5Iixtb2RpZmllZD0iMjAyNS0w
NS0wMyAxODo1MDowMiJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAzLTIxIDE5OjEyOjE3Iixtb2RpZmllZD0iMjAyNS0w
NS0wMyAxODo0OToyMyIscmV2aXNpb249MzQ5M11dbHo0ADgDAACbDAAA-zFweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDJDgECA0ABkAQFBgdADw_QCAkKC0AMkA8MDw0PDgxADPD-AQDr9Dqq
ARAPGg8lDxMAASAPEQ8NEAHwAAIQBg8gEAEgDyUP-AQRMA9F8MQP-w8RsAGgDxvwrA-4Cg--D4AP
9w8NAXAPag9VD00PUMABNABXEQkP-QBFAPouAQ-tEAECEAQPSQ_LAQABUAEIIA4gD0IQAvCtD-8P
F7ACYAUPFQ8qDz8PXw_ED6QvuQ_kD18PNQ8lDAXwoWwAQG8PV_BoABEOaABADxIP7mkAQg8SEAJ7
APoBIQ__EAEwD3Twww8oD--wxj4AoHMPdA9vD20PcLBEABAdmwARIKgABT4A8AwVEAUPHQ-fAQQP
NJABCSAPFCAPivCvDxcPYAz8ABwQ-AD0AGMPUg9ZD1MPVA9BD0yQAfEAA1YAEg1VAPAB7wARAg82
EA9nkA8RAiANUB8AEaigAFoGDzzwr1IApmQPSQ9H0AEQBg1JAAEMAGMFD_4CEeBCAAABAQJEAPoC
wAFwDxYPSgAPGfAEAQ9a8JZPAOp0D1IPQQ9DD1QPTw9SkFcAA6AATyABMA4wAQEv8AkvAP----_H
H-8BACoQR6UFEBNuADoPDBBwAABdBYQQBAMFATABBwUHMBsAAh0AIA8WVwb6IV2gCSAPOSAPcfBv
Dx4ADxzwBQ0ADbACAw8DQA--D5QPdA9VDz8PLw8fDxUMCgXwjosFX2IPRR9MbQhuEHwWCeNADyT-
-y8A_y8N_y-wcBIAG-sRAEgw_y8BEQCnLyT7LSL7LS37LSIAJQ8DIwDxEgpADzAPLQ8sDyoPKA8n
DyUPIw8hDQ8e_yWk_yUHPwgJCnAJMgP7JT8A8AIACCD-MAD7IPUA_yAPDAoPCwUARw0PCB8MAEAP
DPsgLgDFCAAIIA8pLyoPKS8mXQBfJA8lHyZAABQ-QPuwCAATvQ8W_y8E_y8PMfsvIQAf-wEAKBbk
TAD-Gg8UQA8kDyYfKA8wDzIfNA8pDyYPKg8mDyMPHx8d_yD-PwD7IN0fHPsgcQAIGCqTAB_VDQAC
DwEA-29Q------Y=
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAzLTIxIDIwOjQwOjA5Iixtb2RpZmllZD0iMjAyNS0w
NS0wMyAxODo1MDowMiJdXQ==
:: animation.lua
--[[pod_format="raw",created="2025-03-28 13:21:36",modified="2025-04-01 14:12:20",revision=662]]
function new_animation(start_frame,frames,animation_speed,anim_function)
return{
	start_frame=start_frame,
	frame_count=frames or 1,
	animation_speed=animation_speed or 1,
	anim_function=anim_function or anim_ping,
	get_frame=function(self)
		if(frame_count==1) then
			return start_frame
		end
		local d=self.anim_function(time(),self.animation_speed)
		local ret=flr(self.start_frame+self.frame_count*d)
		return ret
	end
}
end

anim_ping=function(t,speed)
	return (t/speed)%1
end

anim_pingpong=function(t,speed)
	return min(1-abs((t*speed % 2) - 1),0.9999)
end

:: bullet.lua
--[[pod_format="raw",created="2025-05-03 17:35:43",modified="2025-05-03 18:49:23",revision=100]]
new_bullet=function()
return {
	sprites=game.sprites1,
	postion,
	speed=new_point(0,0),
	main_anim,
	flying=false,
	size=8,
	init=function(self)
		
	end,
	update=function(self)	
		if(self.flying ==false) then
			self.speed.y+=game.gravity 
		end
		if(collision(self.position.x+self.speed.x,self.position.y)) then
	   	self:die()
	   end
		self.position+=self.speed
	end,
	draw=function(self)
		spr(self.sprites[get_frame(self.main_anim)].bmp,self.position.x,self.position.y,self.speed.x<0,false)
	end,
	die=function(self)
		local particle_system= new_particle_system()
		particle_system.lifetime=10
		particle_system.position=self.position+new_point(0,4)
		particle_system.particle_animation={
			73,73,73,73,73,
			74,74,74,74,74,
			75,75,75,75,75,
			76,76,76,76,76,}
		particle_system.particle_lifetime=#particle_system.particle_animation
	
		particle_system.particle_speed_r=new_point(-0.5,-0.5)
		particle_system.particle_acceleration=new_point(0,0.001)
		particle_system.particle_flipx_r=true
		particle_system.particle_flipy_r=true
		add(game.particle_systems,particle_system)
		
		del(game.bullets,self)
		
	end
}
end
:: camera.lua
--[[pod_format="raw",created="2025-05-01 12:44:33",modified="2025-05-03 18:49:23",revision=387]]
camera_helper={
camera_point =new_point(0,0),
camera_desired_point =new_point(0,0),
camera_shake =new_point(0,0),
shake_intensity=0,
shake_timer=0,
shake_time=0,
camera_shake =new_point(0,0),
-- Function to set the camera position and update the variables
set_camera=function(self,point,instant)
		self.camera_desired_point=point
	if(instant) then
		self.camera_point=point
	end

end,
get_camera=function(self)
    return self.camera_point
end,	
update_camera=function(self)
	self.camera_point=self.camera_point:lerp(self.camera_desired_point,0.5)
	 self:calculate_shake()
	local c=self.camera_point+self.camera_shake
	 camera(c.x, c.y)
end,

shake_camera= function(self,intensity, t )
	self.shake_intensity=intensity
	self.shake_timer=t
	self.shake_time=t
end,
calculate_shake = function(self)
	if(self.shake_timer>0) then		
		local strength=self.shake_intensity*self.shake_timer/self.shake_time
		local point=new_point(random(-1)*strength,random(-1)*strength)
		self.camera_shake=self.camera_shake:lerp(point,0.5)
		self.shake_timer-=1
	else
		self.camera_shake =new_point(0,0)
	end
end
}
:: enemies_table.lua
--[[pod_format="raw",created="2025-03-30 17:45:14",modified="2025-05-03 18:49:23",revision=989]]
enemies_table={}
enemies_table[257]=function()
	local enemy= new_enemy({1,1,1,1,1,1,2,2,2,2,2,2})
	enemy.speed.x=.5
		return enemy
end
enemies_table[16641]=function()
	local enemy=new_enemy({1,1,1,1,1,1,2,2,2,2,2,2})
	enemy.speed.x=-.5
	return enemy
end
enemies_table[273]=function()
	local enemy= new_enemy()
	enemy.jump_force=new_point(0,-2)
	enemy.jump_frequency=1
	enemy.draw=function(self)
		local frame
		if (self.speed.y==0) then
			frame=17
		elseif(self.speed.y<0) then
			frame=18
		else
			frame=19
		end
		spr(self.sprites[frame].bmp,self.position.x,self.position.y,self.speed.x<0,false)
	end
	return enemy
end
enemies_table[321]=function()
	local enemy= new_enemy({65,65,65,65,
									66,66,66,66,
									67,67,67,67,
									68,68,68,68,
									68,68,68,68,
									67,67,67,67,
									66,66,66,66,
									65,65,65,65,									
									})
	enemy.attack_frequency=1
	enemy.attack_anim={69,69,69,69,69,69,
							70,70,70,70,70,70,
							71,71,71,71,71,71}
	enemy.flying=true
	return enemy
end
:: enemy.lua
--[[pod_format="raw",created="2025-03-29 00:32:22",modified="2025-05-03 18:49:23",revision=2426]]
function new_enemy(run_anim)
	return {
		sprites=game.sprites1,
		acceleration=0.5,
		position=new_point(0,0),
		speed=new_point(0,0),
		run_anim=run_anim,
		attack_anim={},
		jump_force=new_point(0,0),
		jump_frequency=0,
		
		attack_frequency=0,
		bullet_anim={},
		bullet_velocity={},
		
		last_jump=0,
		last_attack=0,
		attack_frames=0,
		flying=false,
		state="free",	
	
		init=function(self)
			
		end,
		update=function(self)
			if(is_point_on_screen(self.position)==false) then
				return false
			end
			if(	self.speed.y==0 and self.jump_frequency!=0 and self.last_jump+self.jump_frequency<time()) then
					self.speed+=self.jump_force
					self.last_jump=time()
			end
			if(	self.attack_frequency!=0 and self.last_attack+self.attack_frequency<time()) then
				self.state="attack"
				self.last_attack=time()
			end		
			if(self.state=="attack") then
				self.attack_frames+=1
				if(	self.attack_frames>#self.attack_anim) then
					self.state="free"
					self.attack_frames=0
					local bullet= new_bullet()
					bullet.main_anim={72}
					bullet.position=self.position:clone()
					add(game.bullets,bullet)
				end
			end
	
			if(self.flying ==false) then
				self.speed.y+=game.gravity 
			end
			if(collision(self.position.x,self.position.y+self.speed.y)) then
	   		self.speed.y=0
	   	end			
	   	if(collision(self.position.x+self.speed.x,self.position.y)) then
	   		self.speed.x*=-1
	   	end

	   	if(collision(self.position.x+sgn(self.speed.x)*tileSize,self.position.y+tileSize)==nil) then
	   		self.speed.x*=-1
	   	else
		  		foreach( game.enemies, function(other)
	  				if(other!=self) then	  				
		  				local colresult=object_collision(self.position,other.position)
		  				if(colresult!=nil) then
		  					self.speed.x*=-1
						  				
		  				end
	  				end
		  		end)		
	  		end
	  
	   	self.position+=self.speed
	   	return true
		end,
		draw=function(self)
			if(self.state=="attack") then
				spr(self.sprites[self.attack_anim[self.attack_frames]].bmp,self.position.x,self.position.y,self.speed.x<0,false)
			else
				spr(self.sprites[get_frame(self.run_anim)].bmp,self.position.x,self.position.y,self.speed.x<0,false)
			end
			
		end,
		die=function(self)
			local particle_system= new_particle_system()
			particle_system.lifetime=10
			particle_system.position=self.position
			--particle_system.particle_lifetime=30
			particle_system.particle_halflife=0.95
			particle_system.particle_animation={41,41,41,41,41,41,42,42,42,42,42,42}
			particle_system.particle_speed_r=new_point(-1,-1)
			particle_system.particle_acceleration=new_point(0,0.001)
			particle_system.particle_flipx_r=true
			particle_system.particle_flipy_r=true
			add(game.particle_systems,particle_system)
			         
			del(game.enemies,self)
			game:set_sleep(4)

		end
		
	}
end
:: error_explorer.lua
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNS0wNC0yMiAyMDowNjo0MiIsbW9k
aWZpZWQ9IjIwMjUtMDQtMjQgMTQ6MDE6NDIiLHJldmlzaW9uPTQ0XV0KLS0gIyBwaWNvdHJvbiBl
cnJvciBleHBsb3JlcgotLQotLSBieSBraXJhCi0tCi0tIHZlcnNpb24gMC4wLjYKLS0KLS0gYW4g
aW50ZXJhY3RpdmUgZXJyb3Igc2NyZWVuIGZvciBwaWNvdHJvbi4KLS0gb24gZXJyb3IsIHNob3dz
IHRoZSBzdGFjaywgbG9jYWwgdmFyaWFibGVzLAotLSBhbmQgdGhlIHNvdXJjZSBjb2RlIHdoZW4g
YXZhaWxhYmxlLgotLQotLSAjIyB1c2FnZQotLQotLSBgaW5jbHVkZWAgb3IgYHJlcXVpcmVgIGBl
cnJvcl9leHBsb3Jlci5sdWFgCi0tIGluIHlvdXIgcHJvZ3JhbSBfYWZ0ZXJfIGRlZmluaW5nIHlv
dXIgYF9pbml0YCwKLS0gYF91cGRhdGVgLCBhbmQgYF9kcmF3YCBmdW5jdGlvbnMuCi0tCi0tIHBy
ZXNzIGB1cGAgYW5kIGBkb3duYCB0byBtb3ZlIHVwIGFuZCBkb3duIG9uCi0tIHRoZSBzdGFjaywg
cHJlc3MgYHhgIG9yIGBzcGFjZWAgdG8gdG9nZ2xlIGZvbnQKLS0gc2l6ZS4gY2xpY2sgb24gdGFi
bGVzIGluIHRoZSB2YXJpYWJsZSB2aWV3IHRvCi0tIGV4cGFuZCB0aGVtLgotLQotLSAjIyBob3cg
aXQgd29ya3MKLS0KLS0gaW4gb3JkZXIgdG8gY2F0Y2ggZXJyb3JzIGFuZCBpbnNwZWN0IHJ1bnRp
bWUKLS0gc3RhdGUsIHRoaXMgc2NyaXB0IHJlcGxhY2VzIGBfaW5pdGAsIGBfdXBkYXRlYAotLSBh
bmQgYF9kcmF3YCBmdW5jdGlvbnMgd2l0aCBvbmVzIHRoYXQgY2FsbCB0aGUKLS0gb3JpZ2luYWwg
b25lcyBpbnNpZGUgYSBjb3JvdXRpbmUuCi0tCi0tIHdoZW4gdGhlcmUncyBhbiBlcnJvciwgaXQg
dXNlcyBsdWEncyBkZWJ1ZwotLSBsaWJyYXJ5IHRvIGluc3BlY3QgdGhlIGNvcm91dGluZS4gYSBj
b3B5Ci0tIG9mIHRoZSBlcnJvciBpcyBhbHNvIHByaW50ZWQgdG8gdGhlIGNvbnNvbGUKLS0gd2l0
aCBwcmludGggaWYgeW91J3JlIHJ1bm5pbmcgcGljb3Ryb24gZnJvbQotLSB0aGUgY29tbWFuZCBs
aW5lLgotLQotLSB0aGUgZm9sbG93aW5nIGRlYnVnIGFwaXMgYXJlIHVzZWQ6Ci0tCi0tIC0gYGRl
YnVnLmdldGluZm9gCi0tIC0gYGRlYnVnLmdldGxvY2FsYAotLSAtIGBkZWJ1Zy5nZXR1cHZhbHVl
YAotLSAtIGBkZWJ1Zy50cmFjZWJhY2tgCi0tCi0tICMjIHZlcnNpb24gaGlzdG9yeSAKLS0KLS0g
dmVyc2lvbiAwLjAuNgotLSAtIG9uIGVycm9yOgotLSAgIC0gc2hvdyBjdXJzb3IKLS0gICAtIG1h
a2Ugd2luZG93IHJlc2l6YWJsZQotLSAtIGF1dG9tYXRpY2FsbHkgYWRqdXN0IGxheW91dCB0byB3
aW5kb3cgc2l6ZQotLSAtIHN1cHBvcnQgeWllbGRpbmcgKHNpbmNlIGZldGNoIHNvbWV0aW1lcyB5
aWVsZHMpCi0tCi0tIHZlcnNpb24gMC4wLjUKLS0KLS0gLSBmdXR1cmUgcHJvb2Zpbmc6IGdyYWNl
ZnVsbHkgaGFuZGxlIHdoZW4KLS0gICB2YXJpb3VzIHBhcnRzIG9mIHRoZSBgZGVidWdgIG1vZHVs
ZSBhcmVuJ3QKLS0gICBhdmFpbGFibGUKLS0KLS0gdmVyc2lvbiAwLjAuNAotLQotLSAtIGFsc28g
Y2F0Y2ggZXJyb3JzIGluIGBfaW5pdGAKLS0KLS0gdmVyc2lvbiAwLjAuMwotLQotLSAtIGF1dG9t
YXRpY2FsbHkgY2hvb3NlIHRoZSByaWdodCBzdGFjayBmcmFtZQotLSAgIGJhc2VkIG9uIHRoZSBl
cnJvciBtZXNzYWdlCi0tIC0gbW9yZSB0aG9yb3VnaGx5IHByb3RlY3QgZnJvbSBlcnJvcnMgaW4g
ZXJyb3IKLS0gICBleHBsb3JlciBpdHNlbGYKLS0KLS0gdmVyc2lvbiAwLjAuMgotLQotLSAtIGRv
bid0IHJlZ2VuZXJhdGUgc3RhY2sgaW5mbyBldmVyeSBkcmF3Ci0tIC0gc2Nyb2xsIHN0YWNrIGFu
ZCB2YXJpYWJsZXMgbGlzdCB3aXRoIG1vdXNld2hlZWwKLS0gLSBjbGljayBvbiBzdGFjayB0byBz
d2l0Y2ggc3RhY2sgZnJhbWVzCi0tIC0gY2xpY2sgb24gdGFibGVzIGluIHZhcmlhYmxlcyB2aWV3
IHRvIGV4cGFuZCB0aGVtCi0tIC0gZXNjYXBlIHN0cmluZ3Mgd2hlbiBwcmludGluZyB0aGVtCi0t
Ci0tIHZlcnNpb24gMC4wLjEKLS0KLS0gLSBhZGp1c3QgY29sb3JzCi0tIC0gY29kZSBjbGVhbnVw
Ci0tIC0gdXNlIGBidG5wYCBpbnN0ZWFkIG9mIGBrZXlwYAotLSAtIHNsaWdodGx5IG1vcmUgdGhv
cm91Z2ggYHJlc2V0YAotLSAtIGRvbid0IHNob3cgdGVtcG9yYXJpZXMKLS0KLS0gdmVyc2lvbiAw
LjAuMCAocHJlcmVsZWFzZSkKLS0KLS0gLSBpbml0aWFsIGRpc2NvcmQgYmV0YQoKLS0gIyMgbGlj
ZW5zZQotLQotLSBDb3B5cmlnaHQgMjAyNCBLaXJhIEJvb20KLS0gCi0tIFBlcm1pc3Npb24gaXMg
aGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBh
IGNvcHkKLS0gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZp
bGVzICh0aGUg4oCcU29mdHdhcmXigJ0pLCB0bwotLSBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRo
b3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZQotLSByaWdo
dHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJs
aWNlbnNlLCBhbmQvb3IKLS0gc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVy
bWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMKLS0gZnVybmlzaGVkIHRvIGRvIHNv
LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKLS0KLS0gVGhlIGFib3ZlIGNv
cHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVk
ZWQgaW4KLS0gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdh
cmUuCi0tIAotLSBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQg4oCcQVMgSVPigJ0sIFdJVEhPVVQg
V0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKLS0gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJV
VCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCi0tIEZJ
VE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5P
IEVWRU5UIFNIQUxMCi0tIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJM
RSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCi0tIExJQUJJTElUWSwgV0hFVEhFUiBJ
TiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HCi0tIEZS
T00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0Ug
T1IgT1RIRVIKLS0gREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgoKLS0tLSB1dGlsIC0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmxvY2FsIGZ1bmN0aW9uIGZpbGVuYW1l
X29mIChwYXRoKQogIHJldHVybiBwYXRoOm1hdGNoICgnW14vXSokJykKZW5kCgpsb2NhbCBmdW5j
dGlvbiBzYWZlX3Rvc3RyaW5nICh2YWx1ZSkKICBpZiB0eXBlICh2YWx1ZSkgPT0gJ3N0cmluZycg
dGhlbgogICAgcmV0dXJuIHN0cmluZy5mb3JtYXQgKCclcScsIHZhbHVlKQogIGVsc2UKICAgIGxv
Y2FsIHN1Y2Nlc3MsIHZhbHVlX3N0cmluZyA9IHBjYWxsICh0b3N0cmluZywgdmFsdWUpCiAgICBy
ZXR1cm4gc3VjY2VzcyBhbmQgdmFsdWVfc3RyaW5nCiAgICAgICAgICAgICAgICAgICBvciAoJ2Vy
cm9yIGR1cmluZyB0b3N0cmluZzogJyAuLiB0b3N0cmluZyAodmFsdWVfc3RyaW5nKSkKICBlbmQK
ZW5kCgpsb2NhbCBmdW5jdGlvbiBnZXRfbGluZXMgKHRleHQpCiAgbG9jYWwgbGluZXMgPSB7fQog
IGZvciBsaW5lIGluIHRleHQ6Z21hdGNoICgiKC4tKVxyP1xuIikgZG8KICAgIHRhYmxlLmluc2Vy
dCAobGluZXMsIGxpbmUpCiAgZW5kCiAgbG9jYWwgbGFzdF9saW5lID0gdGV4dDptYXRjaCAoJyhb
XlxuXSopJCcpCiAgaWYgbGFzdF9saW5lIGFuZCBsYXN0X2xpbmUgfj0gJycgdGhlbgogICAgdGFi
bGUuaW5zZXJ0IChsaW5lcywgbGFzdF9saW5lKQogIGVuZAogIHJldHVybiBsaW5lcwplbmQKCmxv
Y2FsIGZ1bmN0aW9uIGNvbXBhcmVfa2V5cyAoYSwgYikKICBsb2NhbCB0YSA9IHR5cGUgKGEua2V5
KQogIGxvY2FsIHRiID0gdHlwZSAoYi5rZXkpCiAgaWYgdGEgfj0gdGIgdGhlbgogICAgcmV0dXJu
IHRhIDwgdGIKICBlbmQKICBpZiB0YSA9PSAnbnVtYmVyJyBvciB0YSA9PSAnc3RyaW5nJyB0aGVu
CiAgICByZXR1cm4gYS5rZXkgPCBiLmtleQogIGVsc2UKICAgIHJldHVybiBzYWZlX3Rvc3RyaW5n
IChhLmtleSkgPCBzYWZlX3Rvc3RyaW5nIChiLmtleSkKICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlv
biBzb3J0ICh0LCBmKQogIC0tIGluc2VydGlvbiBzb3J0CiAgZiA9IGYgb3IgZnVuY3Rpb24gKGEs
IGIpIHJldHVybiBhIDwgYiBlbmQKICBmb3IgaSA9IDEsICN0LTEgZG8KICAgIGxvY2FsIHZhbCA9
IHRbaSsxXQogICAgbG9jYWwgaiA9IGkKICAgIHdoaWxlIGogPj0gMSBhbmQgbm90IGYodFtqXSwg
dmFsKSBkbwogICAgICB0W2orMV0gPSB0W2pdCiAgICAgIGogPSBqIC0gMQogICAgZW5kCiAgICB0
W2orMV0gPSB2YWwKICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBhcHByb2FjaCAoZnJvbSwgdG8p
CiAgcmV0dXJuIGZyb20gKyAodG8gLSBmcm9tKSAqIDAuMjUKZW5kCgpsb2NhbCBmdW5jdGlvbiBy
b3VuZCAodmFsdWUpCiAgcmV0dXJuIG1hdGguZmxvb3IgKHZhbHVlICsgMC41KQplbmQKCmxvY2Fs
IGZ1bmN0aW9uIHBhcnNlX21lc3NhZ2VfZm9yX2xvY2F0aW9uIChtc2cpCiAgbG9jYWwgcGF0aCwg
bGluZSwgZXJyID0gbXNnOm1hdGNoICgnXihbXjpdKyk6KCVkKyk6KC4qKSQnKQogIHJldHVybiBw
YXRoLCB0b251bWJlciAobGluZSksIGVycgplbmQKCi0tLS0gc3RhdGUgLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpsb2NhbCBfRyA9IF9HCmxvY2FsIGVycm9yX21lc3Nh
Z2UKbG9jYWwgZXJyb3JfdGhyZWFkCmxvY2FsIGVycm9yX3RyYWNlYmFjawpsb2NhbCBpbml0X2Rv
bmUgPSBmYWxzZQpsb2NhbCB1c2Vfc21hbGxfZm9udCA9IGZhbHNlCmxvY2FsIG1vdXNlX3dhc19j
bGlja2VkID0gZmFsc2UKCi0tIHN0YWNrIHZpZXcKbG9jYWwgc3RhY2tfZnJhbWVzID0ge30KbG9j
YWwgY3VycmVudF9zdGFja19pbmRleCA9IDEKbG9jYWwgaG92ZXJlZF9zdGFja19pbmRleCA9IGZh
bHNlCmxvY2FsIG1vdXNlX292ZXJfc3RhY2sgPSBmYWxzZQpsb2NhbCBzdGFja19tYXhfc2Nyb2xs
ID0gMApsb2NhbCBzdGFja19zY3JvbGwgPSAwCmxvY2FsIHN0YWNrX3Njcm9sbF9zbW9vdGggPSAw
CgotLSB2YXJpYWJsZXMgdmlldwpsb2NhbCB2YXJpYWJsZXMgPSB7fQpsb2NhbCBob3ZlcmVkX3Zh
cmlhYmxlID0gZmFsc2UKbG9jYWwgdmFyaWFibGVzX21heF9zY3JvbGwgPSAwCmxvY2FsIHZhcmlh
Ymxlc19zY3JvbGwgPSAwCmxvY2FsIHZhcmlhYmxlc19zY3JvbGxfc21vb3RoID0gMApsb2NhbCBt
b3VzZV9vdmVyX3ZhcmlhYmxlcyA9IGZhbHNlCgotLSBzb3VyY2Ugdmlldwpsb2NhbCBzb3VyY2Vf
bGluZXMgPSB7fQoKCi0tLS0gbWFpbiBldmVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tCgpsb2NhbCBmdW5jdGlvbiByZWJ1aWxkICgpCiAgLS0gcmVidWlsZCBzdGFjayBmcmFt
ZSBpbmZvCiAgc3RhY2tfZnJhbWVzID0ge30KICB2YXJpYWJsZXMgPSB7fQogIHNvdXJjZV9saW5l
cyA9IHt9CiAgdmFyaWFibGVzX3Njcm9sbCA9IDAKICB2YXJpYWJsZXNfc2Nyb2xsX3Ntb290aCA9
IDAKCiAgZm9yIGkgPSAwLCAyMCBkbwogICAgbG9jYWwgaW5mbyA9IGRlYnVnLmdldGluZm8gKGVy
cm9yX3RocmVhZCwgaSkKICAgIGlmIG5vdCBpbmZvIHRoZW4KICAgICAgYnJlYWsKICAgIGVuZAoK
ICAgIGlmIGluZm8uc2hvcnRfc3JjIHRoZW4KICAgICAgdGFibGUuaW5zZXJ0IChzdGFja19mcmFt
ZXMsIHsKICAgICAgICBmaWxlbmFtZSA9IGZpbGVuYW1lX29mIChpbmZvLnNob3J0X3NyYyksCiAg
ICAgICAgcGF0aCA9IGluZm8uc2hvcnRfc3JjLAogICAgICAgIGxpbmUgPSBpbmZvLmN1cnJlbnRs
aW5lLAogICAgICAgIGRlcHRoID0gaSwKICAgICAgICBmbl9uYW1lID0gKGluZm8ubmFtZSBvciAo
ZmlsZW5hbWVfb2YgKGluZm8uc2hvcnRfc3JjKSAuLiAnOicgLi4gdG9zdHJpbmcgKGluZm8ubGlu
ZWRlZmluZWQpKSksCiAgICAgICAgc291cmNlID0gaW5mby5zb3VyY2UsCiAgICAgIH0pCiAgICBl
bmQKICBlbmQKCiAgbG9jYWwgZnJhbWUgPSBzdGFja19mcmFtZXMgW2N1cnJlbnRfc3RhY2tfaW5k
ZXhdCgogIGlmIG5vdCBmcmFtZSB0aGVuCiAgICByZXR1cm4KICBlbmQKCiAgLS0gcmVidWlsZCB2
YXJpYWJsZXMKICBkbwogICAgaWYgZGVidWcuZ2V0bG9jYWwgdGhlbgogICAgICBsb2NhbCBsb2Nh
bF9pbmRleCA9IDEKICAgICAgcmVwZWF0CiAgICAgICAgbG9jYWwgbmFtZSwgdmFsdWUgPSBkZWJ1
Zy5nZXRsb2NhbCAoZXJyb3JfdGhyZWFkLCBmcmFtZS5kZXB0aCwgbG9jYWxfaW5kZXgpCiAgICAg
ICAgaWYgbmFtZSB0aGVuCiAgICAgICAgICBpZiBuYW1lIH49ICcodGVtcG9yYXJ5KScgdGhlbgog
ICAgICAgICAgICB0YWJsZS5pbnNlcnQgKHZhcmlhYmxlcywgewogICAgICAgICAgICAgIGtleSA9
IG5hbWUsCiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSwKICAgICAgICAgICAgfSkKICAgICAg
ICAgIGVuZAogICAgICAgICAgbG9jYWxfaW5kZXggPSBsb2NhbF9pbmRleCArIDEKICAgICAgICBl
bmQKICAgICAgdW50aWwgbm90IG5hbWUKICAgIGVsc2UKICAgICAgdGFibGUuaW5zZXJ0ICh2YXJp
YWJsZXMsIHsKICAgICAgICBlcnJvciA9ICdubyBkZWJ1Zy5nZXRsb2NhbCwgY2FuXCd0IHNob3cg
bG9jYWxzJwogICAgICB9KQogICAgZW5kCgogICAgaWYgZGVidWcuZ2V0dXB2YWx1ZSB0aGVuCiAg
ICAgIGxvY2FsIGluZm8gPSBkZWJ1Zy5nZXRpbmZvIChlcnJvcl90aHJlYWQsIGZyYW1lLmRlcHRo
KQogICAgICBpZiBpbmZvIGFuZCBpbmZvLmZ1bmMgdGhlbgogICAgICAgIGxvY2FsIHVwdmFsdWVf
aW5kZXggPSAxCiAgICAgICAgcmVwZWF0CiAgICAgICAgICBsb2NhbCBuYW1lLCB2YWx1ZSA9IGRl
YnVnLmdldHVwdmFsdWUgKGluZm8uZnVuYywgdXB2YWx1ZV9pbmRleCkKICAgICAgICAgIGlmIG5h
bWUgdGhlbgogICAgICAgICAgICB0YWJsZS5pbnNlcnQgKHZhcmlhYmxlcywgewogICAgICAgICAg
ICAgIGtleSA9IG5hbWUsCiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSwKICAgICAgICAgICAg
fSkKICAgICAgICAgICAgdXB2YWx1ZV9pbmRleCA9IHVwdmFsdWVfaW5kZXggKyAxCiAgICAgICAg
ICBlbmQKICAgICAgICB1bnRpbCBub3QgbmFtZQogICAgICBlbmQKICAgIGVsc2UKICAgICAgdGFi
bGUuaW5zZXJ0ICh2YXJpYWJsZXMsIHsKICAgICAgICBlcnJvciA9ICdubyBkZWJ1Zy5nZXR1cHZh
bHVlLCBjYW5cJ3Qgc2hvdyB1cHZhbHVlcycKICAgICAgfSkKICAgIGVuZAogIGVuZAoKICAtLSBy
ZWJ1aWxkIHNvdXJjZSBsaW5lcwogIGxvY2FsIHNvdXJjZSA9IGZyYW1lLnNvdXJjZQogIGlmIHNv
dXJjZSB0aGVuCiAgICBpZiBzdHJpbmcuc3ViIChzb3VyY2UsIDEsIDEpID09ICdAJyB0aGVuCiAg
ICAgIGxvY2FsIGZpbGVuYW1lID0gc3RyaW5nLnN1YiAoc291cmNlLCAyLCAjc291cmNlKQogICAg
ICBzb3VyY2UgPSBmZXRjaCAoZmlsZW5hbWUpCiAgICBlbmQKICAgIGlmIHNvdXJjZSBhbmQgdHlw
ZSAoc291cmNlKSA9PSAnc3RyaW5nJyB0aGVuCiAgICAgIHNvdXJjZV9saW5lcyA9IGdldF9saW5l
cyAoc291cmNlKQogICAgZW5kCiAgZW5kCmVuZAoKbG9jYWwgZnVuY3Rpb24gZXJyb3JfdXBkYXRl
ICgpCiAgbG9jYWwgbGFzdF9pbmRleCA9IGN1cnJlbnRfc3RhY2tfaW5kZXgKICBpZiBidG5wICg1
KSBvciBrZXlwICdzcGFjZScgdGhlbgogICAgdXNlX3NtYWxsX2ZvbnQgPSBub3QgdXNlX3NtYWxs
X2ZvbnQKICBlbmQKICBpZiBidG5wICgyKSB0aGVuCiAgICBjdXJyZW50X3N0YWNrX2luZGV4ID0g
bWF0aC5tYXggKDEsIGN1cnJlbnRfc3RhY2tfaW5kZXggLSAxKQogICAgc3RhY2tfc2Nyb2xsID0g
bWF0aC5taW4gKGN1cnJlbnRfc3RhY2tfaW5kZXgtMSwgc3RhY2tfc2Nyb2xsKQogIGVuZAogIGlm
IGJ0bnAgKDMpIHRoZW4KICAgIGN1cnJlbnRfc3RhY2tfaW5kZXggPSBtYXRoLm1pbiAoI3N0YWNr
X2ZyYW1lcywgY3VycmVudF9zdGFja19pbmRleCArIDEpCiAgICBzdGFja19zY3JvbGwgPSBtYXRo
Lm1heCAoKGN1cnJlbnRfc3RhY2tfaW5kZXgpIC0gKCNzdGFja19mcmFtZXMgLSBzdGFja19tYXhf
c2Nyb2xsKSwgc3RhY2tfc2Nyb2xsKQogIGVuZAoKICBsb2NhbCBfLCBfLCBjbGljaywgXywgd2hl
ZWwgPSBtb3VzZSAoKQogIGlmIG1vdXNlX292ZXJfc3RhY2sgdGhlbgogICAgc3RhY2tfc2Nyb2xs
ID0gbWF0aC5tYXggKDAsIG1hdGgubWluIChzdGFja19zY3JvbGwgLSB3aGVlbCAqIDIsIHN0YWNr
X21heF9zY3JvbGwpKQogIGVuZAogIHN0YWNrX3Njcm9sbF9zbW9vdGggPSBhcHByb2FjaCAoc3Rh
Y2tfc2Nyb2xsX3Ntb290aCwgc3RhY2tfc2Nyb2xsKQogIGlmIG1vdXNlX292ZXJfdmFyaWFibGVz
IHRoZW4KICAgIHZhcmlhYmxlc19zY3JvbGwgPSBtYXRoLm1heCAoMCwgbWF0aC5taW4gKHZhcmlh
Ymxlc19zY3JvbGwgLSB3aGVlbCAqIDIsIHZhcmlhYmxlc19tYXhfc2Nyb2xsKSkKICBlbmQKICB2
YXJpYWJsZXNfc2Nyb2xsX3Ntb290aCA9IGFwcHJvYWNoICh2YXJpYWJsZXNfc2Nyb2xsX3Ntb290
aCwgdmFyaWFibGVzX3Njcm9sbCkKCiAgY2xpY2sgPSBjbGljayB_PSAwCiAgaWYgY2xpY2sgYW5k
IG5vdCBtb3VzZV93YXNfY2xpY2tlZCB0aGVuCiAgICBpZiBob3ZlcmVkX3N0YWNrX2luZGV4IHRo
ZW4KICAgICAgY3VycmVudF9zdGFja19pbmRleCA9IGhvdmVyZWRfc3RhY2tfaW5kZXgKICAgIGVu
ZAogICAgaWYgaG92ZXJlZF92YXJpYWJsZSBhbmQgdHlwZSAoaG92ZXJlZF92YXJpYWJsZS52YWx1
ZSkgPT0gJ3RhYmxlJyB0aGVuCiAgICAgIGlmIGhvdmVyZWRfdmFyaWFibGUuY29udGVudHMgdGhl
bgogICAgICAgIGhvdmVyZWRfdmFyaWFibGUuY29udGVudHMgPSBuaWwKICAgICAgZWxzZQogICAg
ICAgIGxvY2FsIGNvbnRlbnRzID0ge30KICAgICAgICBob3ZlcmVkX3ZhcmlhYmxlLmNvbnRlbnRz
ID0gY29udGVudHMKICAgICAgICBmb3Igayx2IGluIHBhaXJzIChob3ZlcmVkX3ZhcmlhYmxlLnZh
bHVlKSBkbwogICAgICAgICAgdGFibGUuaW5zZXJ0IChjb250ZW50cywgewogICAgICAgICAgICBr
ZXkgPSBrLAogICAgICAgICAgICB2YWx1ZSA9IHYsCiAgICAgICAgICB9KQogICAgICAgIGVuZAog
ICAgICAgIHNvcnQgKGNvbnRlbnRzLCBjb21wYXJlX2tleXMpCiAgICAgIGVuZAogICAgZW5kCiAg
ZW5kCiAgbW91c2Vfd2FzX2NsaWNrZWQgPSBjbGljawoKICBpZiBjdXJyZW50X3N0YWNrX2luZGV4
IH49IGxhc3RfaW5kZXggdGhlbgogICAgcmVidWlsZCgpCiAgZW5kCmVuZAoKbG9jYWwgZnVuY3Rp
b24gZXJyb3JfZHJhdyAoKQogIGxvY2FsIFcgPSBnZXRfZGlzcGxheSgpOndpZHRoKCkKICBsb2Nh
bCBIID0gZ2V0X2Rpc3BsYXkoKTpoZWlnaHQoKQoKICBsb2NhbCBwcmVmaXggPSB1c2Vfc21hbGxf
Zm9udCBhbmQgJ1wwMTQnIG9yICcnCiAgbG9jYWwgZm9udF9oZWlnaHQgPSAodXNlX3NtYWxsX2Zv
bnQgYW5kIDYgb3IgMTEpCiAgbG9jYWwgbXgsIG15ID0gbW91c2UoKQogIGxvY2FsIG92ZXJfc2Vj
dGlvbiA9IGZhbHNlCiAgbG9jYWwgeDAsIHkwLCB4LCB5CgogIGxvY2FsIGZ1bmN0aW9uIGdvX3Rv
IChuZXdfeCwgbmV3X3kpCiAgICB4MCwgeTAgPSBuZXdfeCwgbmV3X3kKICAgIHgsIHkgPSB4MCwg
eTAKICBlbmQKCiAgbG9jYWwgZnVuY3Rpb24gc2VjdGlvbiAoc3gsIHN5LCBzdywgc2gpCiAgICBv
dmVyX3NlY3Rpb24gPQogICAgICBteCA_PSBzeCBhbmQgbXggPCBzeCArIHN3IGFuZAogICAgICBt
eSA_PSBzeSBhbmQgbXkgPCBzeSArIHNoCiAgICBjbGlwIChzeCwgc3ksIHN3LCBzaCkKICAgIGdv
X3RvKHN4KzIsIHN5KzIpCiAgZW5kCgogIGxvY2FsIGZ1bmN0aW9uIHByaW50X2hvcml6b250YWwg
KHRleHQsIGNvbG9yKQogICAgbG9jYWwgbmV3X3gsIF9uZXdfeSA9IHByaW50IChwcmVmaXggLi4g
dGV4dCwgeCwgeSwgY29sb3IpCiAgICB4ID0gbmV3X3gKICBlbmQKCiAgbG9jYWwgZnVuY3Rpb24g
cHJpbnRfbGluZSAodGV4dCwgY29sb3IpCiAgICBsb2NhbCBfbmV3X3gsIG5ld195ID0gcHJpbnQg
KHByZWZpeCAuLiB0ZXh0LCB4LCB5LCBjb2xvcikKICAgIHggPSB4MAogICAgeSA9IG5ld195CiAg
ZW5kCgogIC0tIGRyYXcgc2V0dXAKICBjbHMgKDApCiAgLS0gbGlnaHRlciBkYXJrIGdyYXkgZm9y
IHJlYWRhYmlsaXR5CiAgcGFsICg1LCAweGZmNzA3MDcwLCAyKQogIGNvbG9yICg1KQoKICAtLSBl
cnJvciBtZXNzYWdlCiAgc2VjdGlvbiAoMCwgMCwgVywgSC8yKQogIG1vdXNlX292ZXJfc3RhY2sg
PSBvdmVyX3NlY3Rpb24KCiAgbG9jYWwgbG9jX3BhdGgsIGxvY19saW5lLCBlcnIgPSBwYXJzZV9t
ZXNzYWdlX2Zvcl9sb2NhdGlvbiAoZXJyb3JfbWVzc2FnZSkKICBpZiBsb2NfcGF0aCB0aGVuCiAg
ICBwcmludF9saW5lICgnZXJyb3IgYXQgJyAuLiBsb2NfcGF0aCAuLiAnOicgLi4gbG9jX2xpbmUg
Li4gJzonLCA2KQogICAgcHJpbnRfbGluZSAoJyAgJyAuLiBlcnIsIDgpCiAgZWxzZQogICAgcHJp
bnRfbGluZSAoJ2Vycm9yOicsIDYpCiAgICBwcmludF9saW5lICgnICAnIC4uIGVycm9yX21lc3Nh
Z2UsIDgpCiAgZW5kCgogIC0tIHN0YWNrIGZyYW1lcwogIHByaW50X2xpbmUgKCdzdGFjazonLCA2
KQogIHNlY3Rpb24gKDAsIHksIFcsIEgvMi15KQogIGxvY2FsIHN0YWNrX3RvcF95ID0geQogIHkg
PSB5IC0gcm91bmQgKHN0YWNrX3Njcm9sbF9zbW9vdGggKiBmb250X2hlaWdodCkKICBsb2NhbCBs
YXN0X2hvdmVyZWRfc3RhY2tfaW5kZXggPSBob3ZlcmVkX3N0YWNrX2luZGV4CiAgaG92ZXJlZF9z
dGFja19pbmRleCA9IGZhbHNlCiAgZm9yIGksIGZyYW1lIGluIGlwYWlycyAoc3RhY2tfZnJhbWVz
KSBkbwogICAgY29sb3IgKGxhc3RfaG92ZXJlZF9zdGFja19pbmRleCA9PSBpIGFuZCA3IG9yCiAg
ICAgICAgICAgY3VycmVudF9zdGFja19pbmRleCA9PSBpIGFuZCA2IG9yIDUpCgogICBsb2NhbCB5
X2JlZm9yZSA9IHkKICAgIHByaW50X2xpbmUgKHN0cmluZy5mb3JtYXQgKCcgICVzOiVkIGluIGZ1
bmN0aW9uICVzJywKICAgICAgZnJhbWUuZmlsZW5hbWUsIGZyYW1lLmxpbmUsIGZyYW1lLmZuX25h
bWUgKSkKICAgIGlmIG92ZXJfc2VjdGlvbiB0aGVuCiAgICAgIGlmIG15ID49IHlfYmVmb3JlIGFu
ZCBteSA8IHkgdGhlbgogICAgICAgIGhvdmVyZWRfc3RhY2tfaW5kZXggPSBpCiAgICAgIGVuZAog
ICAgZW5kCiAgZW5kCiAgc3RhY2tfbWF4X3Njcm9sbCA9ICNzdGFja19mcmFtZXMgLSAoSC8yIC0g
c3RhY2tfdG9wX3kpIC8gZm9udF9oZWlnaHQKCiAgbG9jYWwgZnJhbWUgPSBzdGFja19mcmFtZXMg
W2N1cnJlbnRfc3RhY2tfaW5kZXhdCiAgaWYgbm90IGZyYW1lIHRoZW4KICAgIHJldHVybgogIGVu
ZAoKICAtLSB2YXJpYWJsZXMKICBzZWN0aW9uICgwLCBILzIsIFcvMiwgSC8yKQogIG1vdXNlX292
ZXJfdmFyaWFibGVzID0gb3Zlcl9zZWN0aW9uCiAgcHJpbnRfbGluZSAoJ3ZhcmlhYmxlczonLCA2
KQogIHNlY3Rpb24gKDAsIHksIFcvMiwgSC15KQogIGxvY2FsIHZhcmlhYmxlc190b3BfeSA9IHkK
ICB5ID0geSAtIHJvdW5kICh2YXJpYWJsZXNfc2Nyb2xsX3Ntb290aCAqIGZvbnRfaGVpZ2h0KQog
IGxvY2FsIGxhc3RfaG92ZXJlZF92YXJpYWJsZSA9IGhvdmVyZWRfdmFyaWFibGUKICBob3ZlcmVk
X3ZhcmlhYmxlID0gZmFsc2UKICBsb2NhbCB2YXJpYWJsZV9jb3VudCA9IDAKICBsb2NhbCBmdW5j
dGlvbiBkcmF3X3ZhcmlhYmxlICh2YXJpYWJsZSwgaW5kZW50KQogICAgdmFyaWFibGVfY291bnQg
PSB2YXJpYWJsZV9jb3VudCArIDEKICAgIGxvY2FsIGhvdmVyZWQgPSB2YXJpYWJsZSA9PSBsYXN0
X2hvdmVyZWRfdmFyaWFibGUKICAgIGxvY2FsIHlfYmVmb3JlID0geQogICAgaWYgdmFyaWFibGUu
ZXJyb3IgdGhlbgogICAgICBwcmludF9saW5lICgnICAnIC4uIHZhcmlhYmxlLmVycm9yLCA4KQog
ICAgZWxzZQogICAgICBwcmludF9ob3Jpem9udGFsIChpbmRlbnQgLi4gdmFyaWFibGUua2V5LCBo
b3ZlcmVkIGFuZCA3IG9yIDYpCiAgICAgIHByaW50X2hvcml6b250YWwgKCc6ICcsIHZhcmlhYmxl
ID09IGxhc3RfaG92ZXJlZF92YXJpYWJsZSBhbmQgNyBvciA1KQogICAgICBwcmludF9saW5lIChz
YWZlX3Rvc3RyaW5nKHZhcmlhYmxlLnZhbHVlKSkKICAgIGVuZAoKICAgIGlmIG92ZXJfc2VjdGlv
biBhbmQgdHlwZSAodmFyaWFibGUudmFsdWUpID09ICd0YWJsZScgdGhlbgogICAgICBpZiBteCA_
PSAwIGFuZCBteCA8IFcvMiBhbmQgbXkgPj0geV9iZWZvcmUgYW5kIG15IDwgeSB0aGVuCiAgICAg
ICAgaG92ZXJlZF92YXJpYWJsZSA9IHZhcmlhYmxlCiAgICAgIGVuZAogICAgZW5kCgogICAgaWYg
dmFyaWFibGUuY29udGVudHMgdGhlbgogICAgICBmb3IgXywgdiBpbiBpcGFpcnMgKHZhcmlhYmxl
LmNvbnRlbnRzKSBkbwogICAgICAgIGRyYXdfdmFyaWFibGUgKHYsIGluZGVudCAuLiAnICAnKQog
ICAgICBlbmQKICAgIGVuZAogIGVuZAogIGZvciBfLCB2YXJpYWJsZSBpbiBpcGFpcnMgKHZhcmlh
YmxlcykgZG8KICAgIGRyYXdfdmFyaWFibGUgKHZhcmlhYmxlLCAnICAnKQogIGVuZAogIHZhcmlh
Ymxlc19tYXhfc2Nyb2xsID0gdmFyaWFibGVfY291bnQgLSAoSCAtIHZhcmlhYmxlc190b3BfeSkg
LyBmb250X2hlaWdodAoKICAtLSBzb3VyY2UKICBzZWN0aW9uIChXLzIsIEgvMiwgVy8yLCBILzIp
CiAgcHJpbnRfbGluZSAoJ3NvdXJjZSBvZiAnIC4uIGZyYW1lLnBhdGggLi4gJzonLCA2KQogIGxv
Y2FsIGNvbnRleHQgPSB1c2Vfc21hbGxfZm9udCBhbmQgMTAgb3IgNQogIGxvY2FsIGlfbWluID0g
bWF0aC5tYXggKDEsIGZyYW1lLmxpbmUgLSBjb250ZXh0KQogIGxvY2FsIGlfbWF4ID0gbWF0aC5t
aW4gKCNzb3VyY2VfbGluZXMsIGZyYW1lLmxpbmUgKyBjb250ZXh0KQogIGZvciBpID0gaV9taW4s
IGlfbWF4IGRvCiAgICBjb2xvciAoaSA9PSBmcmFtZS5saW5lIGFuZCA2IG9yIDUpCiAgICBwcmlu
dF9ob3Jpem9udGFsIChzdHJpbmcuZm9ybWF0ICgnJTRkICcsIGkpKQogICAgcHJpbnRfbGluZSAo
c291cmNlX2xpbmVzIFtpXSkKICBlbmQKCiAgY2xpcCAoKQplbmQKCi0tLS0gdGFraW5nIG92ZXIg
ZHVyaW5nIGVycm9ycyAtLS0tLS0tLS0tLS0tLS0tLS0tCgpsb2NhbCBmdW5jdGlvbiByZXNldCAo
KQogIC0tIGJhc2VkIG9uIHJlc2V0KCkgZnJvbSAvc3lzdGVtL2xpYi9oZWFkLmx1YQogIC0tIHNl
ZSB0aGF0IGZuIGZvciBpbmZvCiAgd2luZG93IHsKICAgIGN1cnNvciA9IDEsCiAgICByZXNpemFi
bGUgPSB0cnVlLAogIH0KICBub3RlICgpCiAgLS0gcGljb3Ryb24gc2VnZmF1bHRzIGlmIHdlIGNh
bGwgY2xpcCgpIGR1cmluZyBpbml0CiAgaWYgaW5pdF9kb25lIHRoZW4KICAgIGNsaXAgKCkKICBl
bmQKICBjYW1lcmEgKCkKICBwYWwgKCkKICBwYWx0ICgpCiAgbWVtc2V0ICgweDU1MWYsIDAsIDkp
CiAgcG9rZSAoMHg1NTA4LCAweDNmKQogIHBva2UgKDB4NTUwOSwgMHgzZikKICBwb2tlICgweDU1
MGEsIDB4M2YpCiAgcG9rZSAoMHg1NTBiLCAweDAwKQogIGNvbG9yICg2KQogIGZpbGxwICgpCiAg
cG9rZSAoMHg1ZjU2LCAweDQwKQogIHBva2UgKDB4NWY1NywgMHg1NikKICBwb2tlICgweDQwMDAs
IGdldCAoZmV0Y2giL3N5c3RlbS9mb250cy9saWwuZm9udCIpKQogIHBva2UgKDB4NTYwMCwgZ2V0
IChmZXRjaCIvc3lzdGVtL2ZvbnRzL3A4LmZvbnQiKSkKICBwb2tlICgweDU2MDYsIHBlZWsgKDB4
NTYwMCkgKiA0KQogIHBva2UgKDB4NTYwNSwgMHgyKQogIHBva2UgKDB4NWYyOCwgNjQpCiAgcG9r
ZSAoMHg1ZjI5LCA2NCkKZW5kCgpsb2NhbCBmdW5jdGlvbiBvbl9lcnJvciAodGhyZWFkLCBtZXNz
YWdlKQogIC0tIGRvIHRoaXMgZmlyc3QgaW4gY2FzZSB3ZSBoaXQgYW5vdGhlciBlcnJvcgogIGVy
cm9yX3RyYWNlYmFjayA9IGRlYnVnLnRyYWNlYmFjayAodGhyZWFkLCBtZXNzYWdlKQogIHByaW50
aCAoZXJyb3JfdHJhY2ViYWNrKQoKICBlcnJvcl90aHJlYWQgPSB0aHJlYWQKICBlcnJvcl9tZXNz
YWdlID0gdG9zdHJpbmcgKG1lc3NhZ2UpCiAgcmVzZXQgKCkKICByZWJ1aWxkICgpCiAgLS0ganVt
cCB0byB0aGUgcHJvcGVyIHN0YWNrIGZyYW1lIGlmIHdlIGNhbgogIGxvY2FsIGxvY19wYXRoLCBs
b2NfbGluZSA9IHBhcnNlX21lc3NhZ2VfZm9yX2xvY2F0aW9uIChlcnJvcl9tZXNzYWdlKQogIGZv
ciBpLCBmcmFtZSBpbiBpcGFpcnMgKHN0YWNrX2ZyYW1lcykgZG8KICAgIGlmIGZyYW1lLnBhdGgg
PT0gbG9jX3BhdGggYW5kIGZyYW1lLmxpbmUgPT0gbG9jX2xpbmUgdGhlbgogICAgICBjdXJyZW50
X3N0YWNrX2luZGV4ID0gaQogICAgICByZWJ1aWxkICgpCiAgICAgIGJyZWFrCiAgICBlbmQKICBl
bmQKZW5kCgotLS0tIGluc3RhbGwgbWFpbiBldmVudHMgdGhhdCBjYXRjaCBlcnJvcnMgLS0tLS0t
LQoKbG9jYWwgdXNlcl9pbml0ID0gcmF3Z2V0IChfRywgJ19pbml0JykKbG9jYWwgdXNlcl91cGRh
dGUgPSByYXdnZXQgKF9HLCAnX3VwZGF0ZScpCmxvY2FsIHVzZXJfZHJhdyA9IHJhd2dldCAoX0cs
ICdfZHJhdycpCgphc3NlcnQgKHVzZXJfZHJhdyBhbmQgdXNlcl91cGRhdGUsCiAgJ3BsZWFzZSBp
bmNsdWRlIGVycm9yX2V4cGxvcmVyIGFmdGVyIGRlZmluaW5nIGJvdGggX3VwZGF0ZSBhbmQgX2Ry
YXcnKQoKaWYgbm90IHJhd2dldCAoX0csICdkZWJ1ZycpIG9yIG5vdCBkZWJ1Zy50cmFjZWJhY2sg
b3Igbm90IGRlYnVnLmdldGluZm8gdGhlbgogIHByaW50aCAnZXJyb3IgZXhwbG9yZXI6IGRlYnVn
IG1vZHVsZSBub3QgYXZhaWxhYmxlLCBlcnJvciBleHBsb3JlciB3aWxsIGJlIGRpc2FibGVkJwog
IHJldHVybgplbmQKCmxvY2FsIGZ1bmN0aW9uIGNhbGxfZXJyb3JfZXZlbnQgKGZuLCAuLi4pCiAg
LS0gaWYgdGhlcmUncyBhbiBlcnJvciBpbiBvdXIgdXBkYXRlIG9yIGRyYXcsIHRocm93IHRoZQog
IC0tIG9yaWdpbmFsIGVycm9yIGFzIHdlbGwgYXMgdGhlIG5ldyBlcnJvcgogIGxvY2FsIHN1Y2Nl
c3MsIGVyciA9IHBjYWxsIChmbiwgLi4uKQogIGlmIG5vdCBzdWNjZXNzIHRoZW4KICAgIGVycm9y
IChlcnJvcl90cmFjZWJhY2sgLi4gJ1xuXG5lcnJvciBkdXJpbmcgZXJyb3IgaGFuZGxpbmc6ICcg
Li4gdG9zdHJpbmcgKGVycikpCiAgZW5kCmVuZAoKbG9jYWwgZnVuY3Rpb24gY2FsbF9wcm90ZWN0
ZWQgKGZuKQogIC0tIG5lZWQgdG8gdXNlIGNvcmVzdW1lIGV0Yy4gYW5kIG5vdCBjb3JvdXRpbmUu
cmVzdW1lIGV0Yy4KICAtLSBmb3IgcGljb3Ryb24gY29tcGF0aWJpbGl0eQogIGxvY2FsIHRocmVh
ZCA9IGNvY3JlYXRlIChmbikKICBsb2NhbCBzdWNjZXNzLCBtZXNzYWdlID0gY29yZXN1bWUodGhy
ZWFkKQogIHdoaWxlIGNvc3RhdHVzICh0aHJlYWQpIH49ICdkZWFkJyBkbwogICAgeWllbGQgKCkK
ICAgIHN1Y2Nlc3MsIG1lc3NhZ2UgPSBjb3Jlc3VtZSAodGhyZWFkKQogIGVuZAogIGlmIG5vdCBz
dWNjZXNzIHRoZW4KICAgIGNhbGxfZXJyb3JfZXZlbnQgKG9uX2Vycm9yLCB0aHJlYWQsIG1lc3Nh
Z2UpCiAgZW5kCmVuZAoKaWYgdXNlcl9pbml0IHRoZW4KICBmdW5jdGlvbiBfaW5pdCAoKQogICAg
Y2FsbF9wcm90ZWN0ZWQgKHVzZXJfaW5pdCkKICAgIGluaXRfZG9uZSA9IHRydWUKICBlbmQKZWxz
ZQogIGluaXRfZG9uZSA9IHRydWUKZW5kCgpmdW5jdGlvbiBfdXBkYXRlICgpCiAgaWYgZXJyb3Jf
dGhyZWFkIHRoZW4KICAgIGNhbGxfZXJyb3JfZXZlbnQgKGVycm9yX3VwZGF0ZSkKICBlbHNlCiAg
ICBjYWxsX3Byb3RlY3RlZCAodXNlcl91cGRhdGUpCiAgZW5kCmVuZAoKZnVuY3Rpb24gX2RyYXcg
KCkKICBpZiBlcnJvcl90aHJlYWQgdGhlbgogICAgY2FsbF9lcnJvcl9ldmVudCAoZXJyb3JfZHJh
dykKICBlbHNlCiAgICBjYWxsX3Byb3RlY3RlZCAodXNlcl9kcmF3KQogIGVuZAplbmQ=
:: game.lua
--[[pod_format="raw",created="2025-04-01 00:14:44",modified="2025-05-03 18:49:23",revision=3026]]

function new_game(level)
	return{
	actions = {},
	enemies={},
	bullets={},
	pickups={},
	decorations={},
	particle_systems={},
	picked_up=0,
	pickups_needed,
	lives=3,
	_sleep=0,
	gravity=0.1,
	set_sleep= function(self,n)
		self._sleep=n+0.5
	end,
	init=function(self)
		self.level1=fetch(level.path)		
		self.level1blocks = self.level1[1].bmp
		self.pickups_needed=level.pickups_needed
		self.picked_up=0
		memmap(self.level1blocks, 0x100000)
		mapper=new_map(fetch(level.path)[1])
		mapper:updateMap()
		self.sprites1=	fetch("./gfx/1.gfx")	
		place_enemies(self.enemies,self.level1)
		place_pickups(self.pickups,self.level1)
		self.player= new_player(self)
		self.player:init()
		
		self:addAction(function()
			for i=1,300 do
				print_centered("Welcome to "..level.name,10,8)
				print_centered("Your quote is 18",18,8)
				print_centered("Quota is life",26,8)
				yield()
			end
		end)
	end,
	update=function(self)
		if(self._sleep>0) then
			self._sleep-=1
			return
		end 
		camera_helper:update_camera()
		self.player:update()
	 	foreach(self.enemies, function(enemy)
    		enemy:update()
 	 	end)
 	 	foreach(self.bullets, function(bullet)
    		bullet:update()
 	 	end)
 		 
 	
 	 	foreach(self.pickups, function(pickup)
    		pickup:update()
 	 	end)
 	 	foreach(self.particle_systems, function(particle_system)
    		particle_system:update()
 	 	end)
 	 	if(self.player.position.y<-tileSize)then 
 	 		win()
 	 	end
	 
	end,
	draw=function(self)
		if(self._sleep>0) then
			if(self._sleep%1==0) then
				return
			else
				self._sleep=flr(self._sleep)
			end
		end
		--if(flr(time()*60)%10==0) then
			cls(colors.blue)
			rectfill(0,screenHeight,screenWidth*levelScreensWidth,screenHeight*levelScreensHeight,20)
		--end

		map()
		
 	 	foreach(self.decorations, function(decoration)
    		decoration:draw()
 	 	end)
 	 	foreach(self.pickups, function(pickup)
    		pickup:draw()
 	 	end)

 	 	foreach(self.actions, function(action)
		   if costatus(action) then
		      coresume(action)
		   else
		      del(self.actions,action)
			end
		end)
		foreach(self.particle_systems, function(particle_system)
    		particle_system:draw()
 	 	end)
		foreach(self.enemies, function(enemy)
    		enemy:draw()
 	 	end)
 	 	foreach(self.bullets, function(bullet)
    		bullet:draw()
 	 	end)
		self.player:draw()
		
		if(self.picked_up>=self.pickups_needed) then
			print_centered("Quote achived",10,8)
			print_centered("Extraction authorized (\148 \142)",18,8)
 	 	end
	end,
	addAction=function(self,action)
		add(self.actions,cocreate(action)) 
	end,
	death=function(self)
		self.lives-=1
		
		if(self.lives>0) then
			if(self.picked_up>0) then
				local pickup = new_pickup()
				pickup.position=self.player.position:clone()
				pickup.sprite=31
				pickup.dead_sprite={27}
				pickup.value=self.picked_up
				self.picked_up=0
				add(self.pickups,pickup)
			else
				local empty_body=new_decoration()
				empty_body.position=self.player.position:clone()
				empty_body.sprite={26	}	
				add(game.decorations,empty_body)
			end

			self.player= new_player(self)
			self.player:init()
		else
			gameover()
		end
	end
}
end

function place_pickups(pickups,level)
   for y = 0, levelHeight do 
      for x = 0, levelWidth do 
          local tile = level[2].bmp:get(x, y)
          if(tile == 305) then
          	local pickup=new_pickup()
          	pickup.position=new_point(x * tileSize, y * tileSize)
          	add(pickups,pickup)
          end
      end
   end
end
function place_enemies(enemies,level)
    for y = 0, levelHeight do 
        for x = 0, levelWidth do 
            local tile = level[2].bmp:get(x, y)
            local enemy_getter=enemies_table[tile] --"item"..tile            
            if(enemy_getter !=nil) then
            	local enemy=enemy_getter()
            	enemy.game=self
            	enemy.position=new_point(x * tileSize, y * tileSize)
            	add(enemies,enemy)
            end
        end
    end
end


:: gameover.lua
--[[pod_format="raw",created="2025-04-01 14:13:05",modified="2025-05-02 23:32:27",revision=837]]
function new_gameover()
	return{
	timer,
	wait_time=3,
	init=function(self)
		self.timer=time()
		camera_helper:set_camera(new_point(0,0),true)
		stop_sfx()
	end,
	update=function(self)
		camera_helper:update_camera()
		if(self.timer+self.wait_time<time()) then
		 restart()
		end

	end,
	draw=function(self)
		cls()
		print_centered("Game Over",110,8)
	end}	
end
function new_win()
	return{
	timer,
	wait_time=3,
	init=function(self)
		self.timer=time()
		camera_helper:set_camera(new_point(0,0),true)
		stop_sfx()
	end,
	update=function(self)
		camera_helper:update_camera()
		if(self.timer+self.wait_time<time()) then
			next_level()	
		end

	end,
	draw=function(self)
		cls()
		print_centered("You live to see another day",110,8)
	end}	
end
:: helpers.lua
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNS0wMy0yMSAyMToyODo0NiIsbW9k
aWZpZWQ9IjIwMjUtMDUtMDMgMTg6NDk6MjMiLHJldmlzaW9uPTQwMDNdXQoKZnVuY3Rpb24gcGlj
a19yYW5kb20oYXJyKQoJaWYgYXJyPT1uaWxsIHRoZW4gcmV0dXJuIG5pbCBlbmQKCWlmICNhcnIg
PT0gMCB0aGVuIHJldHVybiBuaWwgZW5kCglyZXR1cm4gYXJyW2ZscihybmQoI2FycikpICsgMV0K
ZW5kCmZ1bmN0aW9uIHJhbmRvbShuKQoJaWYobj4wKSB0aGVuIAoJCXJldHVybiBybmQoKSpuCgll
bHNlCgkJcmV0dXJuIC1uK3JuZCgpKm4qMiAKCWVuZAplbmQKZnVuY3Rpb24gbm9ybWFsaXplKHAp
Cglsb2NhbCBsZW4gPSBzcXJ0KHAueF4yICsgcC55XjIpCglpZiBsZW4gPT0gMCB0aGVuIHJldHVy
biBuZXdfcG9pbnQoMCwgMCkgZW5kCglyZXR1cm4gbmV3X3BvaW50KHAueCAvIGxlbiwgcC55IC8g
bGVuKQplbmQKCmZ1bmN0aW9uIGlzX3BvaW50X29uX3NjcmVlbihwb2ludCkKCQoJbG9jYWwgY2Ft
ZXJhX3Bvcz1jYW1lcmFfaGVscGVyOmdldF9jYW1lcmEoKQoJCglyZXR1cm4gKAoJCXBvaW50Lngg
Pj0gY2FtZXJhX3Bvcy54IC0gdGlsZVNpemUgYW5kIHBvaW50LnggPCBjYW1lcmFfcG9zLnggKyBz
Y3JlZW5XaWR0aCBhbmQKCQlwb2ludC55ID49IGNhbWVyYV9wb3MueSAtIHRpbGVTaXplIGFuZCBw
b2ludC55IDwgY2FtZXJhX3Bvcy55ICsgc2NyZWVuSGVpZ2h0CgkpCmVuZApmdW5jdGlvbiBjb2xs
aXNpb24oeCwgeSxmbGFnLHJvdW5kKQoJcm91bmQ9cm91bmQgb3IgMAoJbG9jYWwgaW5zZXQgPSAy
Cglsb2NhbCBzaXplID0gdGlsZVNpemUgLSBpbnNldCAqIDIKCglsb2NhbCB4MSA9IHggKyBpbnNl
dAoJbG9jYWwgeTEgPSB5ICsgaW5zZXQKCWxvY2FsIHgyID0geCArIHNpemUKCWxvY2FsIHkyID0g
eSArIHRpbGVTaXplIC0gMSAKCglsb2NhbCB0eDEgPSBmbHIoeDEgLyB0aWxlU2l6ZSkKCWxvY2Fs
IHR5MSA9IGZscih5MSAvIHRpbGVTaXplKQoJbG9jYWwgdHgyID0gZmxyKHgyIC8gdGlsZVNpemUp
Cglsb2NhbCB0eTIgPSBmbHIoeTIgLyB0aWxlU2l6ZSkKCglmb3IgdHkgPSB0eTEsIHR5MiBkbwoJ
CWZvciB0eCA9IHR4MSwgdHgyIGRvCgkJCWxvY2FsIHRpbGUgPSBtZ2V0KHR4LCB0eSkKCQkJaWYg
ZmdldCh0aWxlLCBmbGFnIG9yIDApIHRoZW4KCQkJCXJldHVybiB0aWxlCgkJCWVuZAoJCWVuZAoJ
ZW5kCgoJcmV0dXJuIG5pbAplbmQKZnVuY3Rpb24gdGlsZXNfY2xlYXJfYWJvdmUocG9zKQoJbG9j
YWwgeCA9IGZscihwb3MueCAvIHRpbGVTaXplKy41KQoJbG9jYWwgeSA9IGZscihwb3MueSAvIHRp
bGVTaXplKQoJbG9jYWwgY2xlYXJfY291bnQgPSAwCgoJZm9yIHR5ID0geSAtIDEsIDAsIC0xIGRv
CgkJbG9jYWwgdGlsZSA9IG1nZXQoeCwgdHkpCgkJaWYgZmdldCh0aWxlLCAwKSB0aGVuCgkJCXJl
dHVybiBjbGVhcl9jb3VudCAgLS0gYmxvY2tlZCBoZXJlCgkJZW5kCgkJY2xlYXJfY291bnQgKz0g
MQoJZW5kCgoJcmV0dXJuIDEwMDAgIC0tIGZ1bGx5IGNsZWFyIHRvIHRoZSB0b3AKZW5kCmZ1bmN0
aW9uIG9iamVjdF9jb2xsaXNpb24ocG9zMSwgcG9zMiwgc2l6ZSkKCXNpemUgPSBzaXplIG9yIHRp
bGVTaXplICAtLSBkZWZhdWx0IHRvIGdsb2JhbCB0aWxlU2l6ZSBpZiBub3QgcHJvdmlkZWQKCgls
b2NhbCBjb2xsaWRlZCA9ICgKCQlwb3MxLnggPCBwb3MyLnggKyBzaXplIGFuZAoJCXBvczEueCAr
IHNpemUgPiBwb3MyLnggYW5kCgkJcG9zMS55IDwgcG9zMi55ICsgc2l6ZSBhbmQKCQlwb3MxLnkg
KyBzaXplID4gcG9zMi55CgkpCgoJaWYgY29sbGlkZWQgdGhlbgoJCXJldHVybiBwb3MxOnVuaXRW
ZWN0b3IocG9zMikKCWVsc2UKCQlyZXR1cm4gbmlsCgllbmQKZW5kCmZ1bmN0aW9uIHNtKGEpCgly
ZXR1cm4gc2V0bWV0YXRhYmxlKGEsYSkKZW5kCgpmdW5jdGlvbiBnZXRfc3RyaW5nX3dpZHRoKHMp
Cglsb2NhbCB3aWR0aD1wcmludChzLC0xMDAwLDApCglwcmludCgiIiwwLDApCglyZXR1cm4gd2lk
dGgrMTAwMAplbmQKZnVuY3Rpb24gcHJpbnRfY2VudGVyZWQodGV4dCwgeSwgY29sKQoJY29sID0g
Y29sIG9yIGNvbG9ycy53aGl0ZQoJbG9jYWwgdGV4dF93aWR0aCA9Z2V0X3N0cmluZ193aWR0aCh0
ZXh0KQoJbG9jYWwgeCA9IChzY3JlZW5XaWR0aCAtIHRleHRfd2lkdGgpIFwgMgoJcHJpbnQodGV4
dCx4K2NhbWVyYV9oZWxwZXI6Z2V0X2NhbWVyYSgpLngsIHkrY2FtZXJhX2hlbHBlcjpnZXRfY2Ft
ZXJhKCkueSwgY29sKQplbmQKZnVuY3Rpb24gcHJpbnRfcmlnaHQodGV4dCwgeSwgY29sKQoJY29s
ID0gY29sIG9yICBjb2xvcnMud2hpdGUKCWxvY2FsIHRleHRfd2lkdGggPWdldF9zdHJpbmdfd2lk
dGgodGV4dCkKCWxvY2FsIHggPSBzY3JlZW5XaWR0aCAtIHRleHRfd2lkdGgKCXByaW50KHRleHQs
IHgrY2FtZXJhX2hlbHBlcjpnZXRfY2FtZXJhKCkueCwgeSwgY29sKQplbmQKCmZ1bmN0aW9uIGdl
dF9mcmFtZShhcnIsc3BlZWQpCQoJcmV0dXJuIGFyclsoZmxyKHQoKSo2MC8oc3BlZWQgb3IgMSkp
JSNhcnIrMSldCmVuZApmdW5jdGlvbiBjb250YWlucyhhcnIsIHZhbHVlKQoJZm9yIGkgPSAxLCAj
YXJyIGRvCgkJaWYgYXJyW2ldID09IHZhbHVlIHRoZW4KCQkJcmV0dXJuIHRydWUKCQllbmQKCWVu
ZAoJcmV0dXJuIGZhbHNlCmVuZApmdW5jdGlvbiBjb250YWluc19pbl9rZXlzKGFyciwgc2VhcmNo
X2tleSkKCWZvciBrZXkgaW4gcGFpcnMoYXJyKSBkbwoJCWlmIGtleSA9PSBzZWFyY2hfa2V5IHRo
ZW4KCQkJcmV0dXJuIHRydWUKCQllbmQKCWVuZAoJcmV0dXJuIGZhbHNlCmVuZApmdW5jdGlvbiBj
b21iaW5lX2FycmF5cyhhLCBiKQoJbG9jYWwgcmVzdWx0ID0ge30KCWZvciBpID0gMSwgI2EgZG8g
YWRkKHJlc3VsdCwgYVtpXSkgZW5kCglmb3IgaSA9IDEsICNiIGRvIGFkZChyZXN1bHQsIGJbaV0p
IGVuZAoJcmV0dXJuIHJlc3VsdAplbmQJCmNvbG9ycyA9IHsKCWJsYWNrICAgICAgICA9IDAsCglk
YXJrX2JsdWUgICAgPSAxLAoJZGFya19wdXJwbGUgID0gMiwKCWRhcmtfZ3JlZW4gICA9IDMsCgli
cm93biAgICAgICAgPSA0LAoJZGFya19ncmF5ICAgID0gNSwKCWxpZ2h0X2dyYXkgICA9IDYsCgl3
aGl0ZSAgICAgICAgPSA3LAoJcmVkICAgICAgICAgID0gOCwKCW9yYW5nZSAgICAgICA9IDksCgl5
ZWxsb3cgICAgICAgPSAxMCwKCWdyZWVuICAgICAgICA9IDExLAoJYmx1ZSAgICAgICAgID0gMTIs
CglpbmRpZ28gICAgICAgPSAxMywKCXBpbmsgICAgICAgICA9IDE0LAoJcGVhY2ggICAgICAgID0g
MTUsCgoJLS0gRXh0ZW5kZWQgY29sb3JzICgxNuKAkzYzKSBtYXkgdmFyeSBieSBwYWxldHRlIHNl
dHVwLCBidXQgaGVyZSdzIGEgdXNlZnVsIGRlZmF1bHQgc2V0OgoJcm9zZSAgICAgICAgID0gMTYs
CglzYWxtb24gICAgICAgPSAxNywKCWJlaWdlICAgICAgICA9IDE4LAoJbGlnaHRfeWVsbG93ID0g
MTksCglsaWdodF9ncmVlbiAgPSAyMCwKCXNlYWZvYW0gICAgICA9IDIxLAoJc2t5X2JsdWUgICAg
ID0gMjIsCglwZXJpd2lua2xlICAgPSAyMywKCWxhdmVuZGVyICAgICA9IDI0LAoJbGlnaHRfcGlu
ayAgID0gMjUsCglkYXJrX2Jyb3duID0yOAoJLS0gLi4ueW91IGNhbiBjb250aW51ZSBhZGRpbmcg
YXMgbmVlZGVkCn0KCnNmeF9jaGFubmVscyA9IHt9CmZ1bmN0aW9uIHBsYXlfc2Z4KHNmeF9pZCwg
Y2hhbm5lbCxsb29wLHJlc3RhcnQpCglkYXRhID0gc2Z4X2NoYW5uZWxzW2NoYW5uZWxdCglpZiBk
YXRhIGFuZCAocmVzdGFydCBvciBmYWxzZSkgYW5kIGRhdGEuc2Z4X2lkID09IHNmeF9pZCB0aGVu
CgkJcmV0dXJuCgllbmQKCQlzZngoc2Z4X2lkLCBjaGFubmVsLCBsb29wKQoJCXNmeF9jaGFubmVs
c1tjaGFubmVsXSA9IHsKCQkJc2Z4X2lkID0gc2Z4X2lkLAoJCQlsb29wID0gbG9vcCwKCQkJc3Rh
cnRfdGltZSA9IHQoKSAgLS0gdXNlIHRpbWUoKSBpZiBwcmVmZXJyZWQKCQl9CgplbmQKCi0tIFN0
b3AgU0ZYIG9ubHkgaWYgdGhlIGdpdmVuIHNmeCBpcyBjdXJyZW50bHkgcGxheWluZyBvbiB0aGUg
Y2hhbm5lbApmdW5jdGlvbiBzdG9wX3NmeChzZnhfaWQsIGNoYW5uZWwpCglpZiBjaGFubmVsIHRo
ZW4KCQktLSBTdG9wcGluZyBvbiBhIHNwZWNpZmljIGNoYW5uZWwKCQlsb2NhbCBkYXRhID0gc2Z4
X2NoYW5uZWxzW2NoYW5uZWxdCgkJaWYgZGF0YSBhbmQgKHNmeF9pZCA9PSBuaWwgb3IgZGF0YS5z
ZnhfaWQgPT0gc2Z4X2lkKSB0aGVuCgkJCXNmeCgtMSwgY2hhbm5lbCkKCQkJc2Z4X2NoYW5uZWxz
W2NoYW5uZWxdID0gbmlsCgkJZW5kCgllbHNlaWYgc2Z4X2lkID09IG5pbCB0aGVuCgkJLS0gTm8g
Y2hhbm5lbCBhbmQgbm8gc2Z4X2lkOiBzdG9wIGV2ZXJ5dGhpbmcKCQlmb3IgY2gsIGRhdGEgaW4g
cGFpcnMoc2Z4X2NoYW5uZWxzKSBkbwoJCQlzZngoLTEsIGNoKQoJCQlzZnhfY2hhbm5lbHNbY2hd
ID0gbmlsCgkJZW5kCgllbmQKZW5k
:: include.lua
--[[pod_format="raw",created="2025-04-01 01:02:20",modified="2025-05-03 18:49:23",revision=673]]
include "point.lua"
include "player.lua"
include "lib.lua"
include "helpers.lua"
--include "animation.lua"
include "enemy.lua"
include "enemies_table.lua"
include "game.lua"
include "start.lua"
include "gameover.lua"
include "pickup.lua"
include "particle.lua"
include "map.lua"
include "input.lua"
include "levels.lua"
include "camera.lua"
include "bullet.lua"

:: input.lua
--[[pod_format="raw",created="2025-04-24 14:03:45",modified="2025-04-28 13:11:34",revision=654]]
input_lookup = {
	-- Define logical mappings for clarity
	lpad = {
		left = 0,
		right = 1,
		up = 2,
		down = 3
	},
	rpad = {
		left = 8,
		right = 9,
		up = 10,
		down = 11
	},
	buttons = {
		o = 4,
		x = 5,
		menu=6,
		a = 12,
		b = 13
	}
}
function new_input(player)
	return {
	player=player or 0,
	_button_down_frame = {},
button=function(self, b, hold)
	local now = t()
	if type(b) ~= "table" then
		b = {b}
	end
	local key = join_with_dashes(b)

	if all_buttons_pressed(b, self.player) then
		local start = self._button_down_frame[key]
		if not start then
			self._button_down_frame[key] = now
			return 1  -- just pressed
		end

		local held = now - start 

		if hold then
			if held >= hold then
				if held >= hold + 0.1 then  -- small extra time past charge (you can adjust)
					return 4  -- overheld
				else
					return 3  -- finished charging
				end
			else
				return 2  -- still holding
			end
		else
			return held  -- legacy: how long held (seconds)
		end
	else
		self._button_down_frame[key] = nil
		return nil
	end
end,
		button_press=function(self,b)
			return btnp(b,self.player)
		end
	}
end
function join_with_dashes(arr)
	local result = ""
	for i = 1, #arr do
		result ..= arr[i]
		if i < #arr then
			result ..= "-"
		end
	end
	return result
end
function all_buttons_pressed(buttons, player)
	player = player or 0  -- default to player 0 if not specified
	for i = 1, #buttons do
		if not btn(buttons[i], player) then
			return false
		end
	end
	return true
end
:: levels.lua
--[[pod_format="raw",created="2025-04-29 02:16:47",modified="2025-05-03 17:31:43",revision=273]]
get_levels=function()
	levels={}
	add(levels,new_level("Breaking Grounds","./map/level0.map",7))
	add(levels,new_level("Mud Puddle","./map/level1.map",20))
	add(levels,new_level("Rock Pile","./map/level2.map",10))
	return levels;
end

new_level=function(name,path,pickups_needed)
	return {
		name=name,
		path=path,
		pickups_needed=pickups_needed
	}
end
:: lib.lua
--[[pod_format="raw",created="2025-03-21 20:38:53",modified="2025-04-17 02:58:12",revision=280]]
--lib

-- pq-debugging, by pancelor

-- quotes all args and prints to host console
-- usage:
--   pq("handles nils", many_vars, {tables=1, work=11, too=111})
function pq(...)
  printh(qq(...))
  return ...
end

-- quotes all arguments into a string
-- usage:
--   ?qq("p.x=",x,"p.y=",y)
function qq(...)
  local args=pack(...)
  local s=""
  for i=1,args.n do
    s..=quote(args[i]).." "
  end
  return s
end

-- quote a single thing
-- like tostr() but for tables
-- don't call this directly; call pq or qq instead
function quote(t, depth)
  depth=depth or 4 --avoid inf loop
  if type(t)~="table" or depth<=0 then return tostr(t) end

  local s="{"
  for k,v in pairs(t) do
    s..=tostr(k).."="..quote(v,depth-1)..","
  end
  return s.."}"
end

-- like sprintf (from c)
-- usage:
--   ?qf("%/% is %%",3,8,3/8*100,"%")
function qf(fmt,...)
  local parts,args=split(fmt,"%"),pack(...)
  local str=deli(parts,1)
  for ix,pt in ipairs(parts) do
    str..=quote(args[ix])..pt
  end
  if args.n~=#parts then
    -- uh oh! mismatched arg count
    str..="(extraqf:"..(args.n-#parts)..")"
  end
  return str
end
function pqf(...) printh(qf(...)) end
:: main.lua
--[[pod_format="raw",created="2025-03-21 19:12:17",modified="2025-05-02 23:32:27",revision=3886]]
include "include.lua"
tileSize=16
halfTileSize=tileSize/2
screenWidth=480 --30 tiles
screenHeight=270 --16+ tiles
screenHeightTileAdjusted=256
levelScreensWidth=10
levelScreensHeight=3
levelWidth=300 
levelHeight=48 
mode=1 --1=start,2=game,3=gameover,4=win
input=new_input(0)
levels=get_levels()
current_level=1
modes= {new_start(),new_game(levels[current_level]),new_gameover(),new_win()}
function start_level()
	mode=2
	game=	modes[mode]
	modes[mode]:init()
end
function	restart()
	mode=1
	modes[mode]:init()
end
function next_level()
	current_level+=1
	modes[2]=new_game(levels[current_level])
	start_level()
end

function	gameover()
	mode=3
	current_level=1
	modes[mode]:init()
end
function	win()
	mode=4

	modes[mode]:init()
end
function _init()	
	pq("----------------restart-----------------")
	restart()
end

function _update()
	modes[mode]:update()
end

function _draw()
	modes[mode]:draw()
end
include "error_explorer.lua"


:: map.lua
--[[pod_format="raw",created="2025-04-16 02:26:25",modified="2025-05-01 12:37:43",revision=1276]]
new_map=function(level)
return {
--level=fetch(a)[1],
tiles_table=build_tile_replacements(),
level=level,

updateMap=function(self)
	
	for x = 0, levelWidth do 
	 	for y = 0, levelHeight do 
         local tile = self.level.bmp:get(x, y)
			local above = tile_blocked(x, y - 1, self.tiles_table,self.level)
			local below = tile_blocked(x, y + 1, self.tiles_table,self.level)
			local left  = tile_blocked(x - 1, y, self.tiles_table,self.level)
			local right = tile_blocked(x + 1, y, self.tiles_table,self.level)
			local mask = 0
			if not above then mask |= 1 end
			if not below then mask |= 2 end
			if not left  then mask |= 4 end
			if not right then mask |= 8 end
 
			local selected_tile= {{tile}}			
			if(contains_in_keys(self.tiles_table,tile)) then --we hit a tile that is solid
				local tile_lookup=	build_tile_lookup(self.tiles_table,tile)
				selected_tile = tile_lookup[mask] or {selected_tile}
			elseif(tile==0)then  --check if the clear tile needs to be decorated
				if(below)then 
					local below_tile=self.level.bmp:get(x, y+1)
					
					local tile_lookup=self.tiles_table[below_tile]
					local below_left= tile_blocked(x-1, y+1, self.tiles_table,self.level)
					local below_right= tile_blocked(x+1, y+1, self.tiles_table,self.level)
					
					if(not below_left) then
						if(above) then								
							selected_tile= {tile_lookup.left_cave_topper}
						else							
							selected_tile= {tile_lookup.left_topper}
						end
					elseif(not below_right) then
						if(above) then
							selected_tile= { tile_lookup.left_cave_topper, 0x4000}
						else
							selected_tile= { tile_lookup.left_topper, 0x4000}
						end
					else
						if(above) then
							selected_tile= {tile_lookup.center_cave_topper, 0x4000}
						else
							selected_tile= {tile_lookup.center_topper, 0x4000}
						end

					end
					
				end
				
			end 
			if(selected_tile[1][1]!=0) then			
				local picked= pick_random(selected_tile[1])
				if(selected_tile[1]!=nil and  selected_tile[2]!=nil) then
					picked |=selected_tile[2]
				end
			     
				mset(x, y,picked)       
			end
	
		 
      end
   end
   
end
}
end
function tile_blocked(x, y, valid_tiles,level)
	--return false
	if x < 0 or x >= levelWidth or y < 0 or y >= levelHeight then
		return false 
	end
	return contains_in_keys(valid_tiles,level.bmp:get(x, y))
	--return == level.bmp:get(x, y)
end

function build_tile_replacements()
	local tiles={}
	tiles[18]={
		center={18,18|0x4000},
		left={17},
		top={10},
		bottom={26},
		topleft={9},
		bottomleft={25},
		alone={13},
		row={11},
		col={12},
		top_nub={29},
		bottom_nub={28},
		left_nub={27},
		left_topper={1},
		center_topper={2,3,2|0x4000,3|0x4000},
		left_cave_topper={4},
		center_cave_topper={5}
	}
	tiles[50]={
		center={50,50|0x4000},
		left={49},
		top={42},
		bottom={58},
		topleft={41},
		bottomleft={57},
		alone={45},
		row={43},
		col={44},
		top_nub={61},
		bottom_nub={60},
		left_nub={59},
		left_topper={33},
		center_topper={34,35,34|0x4000,3|0x4000},
		left_cave_topper={4},
		center_cave_topper={5}
	}
	return tiles
end
function build_tile_lookup(tiles_table,tile)
	local tile_lookup = {
		[1+2+4+8]   = {tiles_table[tile].alone},                        -- no neighbors
		[2+4+8] = {tiles_table[tile].bottom_nub},                 -- below + left + right
		[1+4+8] = {tiles_table[tile].top_nub},                    -- above + left + right
		[1+2+8] = {tiles_table[tile].left_nub, 0x4000} ,          -- above + below + right (flip left_nub)
		[1+2+4] = {tiles_table[tile].left_nub},                   -- above + below + left
		[1+2]   = {tiles_table[tile].row},                        -- above + below only (horizontal line)
		[4+8]   = {tiles_table[tile].col},                        -- left + right only (vertical line)
		[1+4]   = {tiles_table[tile].topleft},                    -- above + left
		[2+4]   = {tiles_table[tile].bottomleft},                 -- below + left
		[1+8]   = {tiles_table[tile].topleft, 0x4000},           -- above + right (flip to top-right)
		[2+8]   = {tiles_table[tile].bottomleft, 0x4000},        -- below + right (flip to bottom-right)
		[1]     = {tiles_table[tile].top},                        -- only above
		[2]     = {tiles_table[tile].bottom},                     -- only below
		[4]     = {tiles_table[tile].left},                       -- only left
		[8]     = {tiles_table[tile].left, 0x4000},               -- only right (flip left tile)
		[0]     = {tiles_table[tile].center} 							--fully surrounded
	}
	return tile_lookup
end
:: particle.lua
--[[pod_format="raw",created="2025-04-09 16:15:08",modified="2025-04-28 13:11:34",revision=1145]]
function new_particle_system()
	return{
		sprites =game.sprites1,
		particles={},
		age=0,
		lifetime=60,
		spawn_rate=0.25; 
		particle_animation={},
		particle_flipx_r=false,
		particle_flipy_r=false,
		particle_lifetime=60,
		particle_halflife=1,
		position=new_point(0,0),
		particle_radial=false,
		particle_position_r=new_point(0,0),
		particle_speed=new_point(0,0),
		particle_speed_r=new_point(0,0),
		particle_acceleration=new_point(0,0),
		particle_acceleration_r=new_point(0,0),
		particle_update=nil, --leave nil for default behavior
		init=function(self)
			
		end,
		update=function(self)
			foreach(self.particles, function(particle)
    			particle:update()
 	 		end)
 	 		if( self.age>self.lifetime) then
 	 			if(#self.particles==0) then
 	 		 		self:die(game.particle_systems)
 	 		 	end
 	 		 	return
 	 		end
			if(self.spawn_rate>1) then
				for i=1,self.spawn_rate,1 do
					self:spawn()
				end
			else
				local inverse=1/self.spawn_rate
				if(self.age%inverse==0) then
					self:spawn()
				end
			end	
			self.age+=1
		end,
		draw=function(self)
			foreach(self.particles, function(particle)
    			particle:draw()
 	 		end)
		end,
		die=function(self,particle_system_container)
			del(particle_system_container,self)
		end,
		spawn=function(self)
			local particle=new_particle()
			particle.animation=self.particle_animation
			particle.lifetime=self.particle_lifetime
			particle.halflife=self.particle_halflife
			particle.position=self.position:randomize(self.particle_position_r)
			local speed=self.particle_speed:randomize(self.particle_speed_r)
			if(self.particle_radial) then
				speed=speed:square_to_circle()
			end
			particle.speed=	speed
			local acceleration=self.particle_acceleration:randomize(self.particle_acceleration_r)
			if(self.particle_radial) then
				acceleration=acceleration:square_to_circle()
			end	
			particle.acceleration=acceleration
		
			particle.particle_container=self.particles
			if(self.particle_flipx_r) then
				particle.flipx=rnd()>0.5
			end
			if(self.particle_flipy_r) then
				particle.flipy=rnd()>0.5
			end				
			particle.update=self.particle_update or particle.update
			add(self.particles,particle)
		end
	}
end
function new_particle()
	return{
		sprites =game.sprites1,
		particle_container,
		animation={},
		age=0,
		lifetime=60,
		halflife=1,
		position=new_point(0,0),
		speed=new_point(0,0),
		acceleration=new_point(0,0),
		flipx=false,
		flipy=false,
		init=function(self)
			
		end,
		update=function(self)
			self.position+=self.speed
			self.speed+=self.acceleration
			self.age+=1
		 		if(self.lifetime>=0 and self.age>self.lifetime) then
		 			self:die(self.particle_container)
		 		end
		 		if(rnd()>self.halflife) then
			 		self:die(self.particle_container)
		 		end
		end,
		draw=function(self)			
			spr(self.sprites[self.animation[self.age%#self.animation+1 ]].bmp,self.position.x,self.position.y,self.flipx,self.flipy)
		end,
		die=function(self,sprites)
			del(sprites,self)
		end
	}
end
	

:: pickup.lua
--[[pod_format="raw",created="2025-04-04 01:16:17",modified="2025-05-03 18:49:23",revision=612]]
function new_pickup()
	return {
		sprites =game.sprites1,
		value=1,
		position=new_point(0,0),
		sprite={52,52,52,53,52,52,52,54,52,52,52,55},
		dead_sprite={50} ,
		init=function(self)
			
		end,
		update=function(self)
		end,
		draw=function(self)
			spr(self.sprites[get_frame(self.sprite,10)].bmp,self.position.x,self.position.y)
		end,
		die=function(self)
			local particle_system= new_particle_system()
			particle_system.lifetime=3
			particle_system.spawn_rate=5
			particle_system.position=self.position
			--particle_system.particle_lifetime=30
			particle_system.particle_halflife=0.95
			particle_system.particle_animation={51}
			particle_system.particle_speed_r=new_point(-.3,-.3)
			particle_system.particle_acceleration=new_point(0,0.001)
			particle_system.particle_flipx_r=true
			particle_system.particle_flipy_r=true
			add(game.particle_systems,particle_system)
			del(game.pickups,self)
			
			local replacement=new_decoration()
			replacement.position=self.position
			replacement.sprite=self.dead_sprite
			add(game.decorations,replacement)
		end
	}
end

function new_decoration()
	return {
		sprites =game.sprites1,
		position=new_point(0,0),
		sprite=50,
		init=function(self)
			
		end,
		update=function(self)
		end,
		draw=function(self)
			spr(self.sprites[get_frame(self.sprite)].bmp,self.position.x,self.position.y)
		end
	
	}
end
:: player.lua
--[[pod_format="raw",created="2025-03-21 20:10:57",modified="2025-05-03 18:49:23",revision=4493]]
function new_player()
	return {
		sprites,
		acceleration=0.5,
		position,
		speed,
		state="free",
		inair=0,
		walljumps=0,
		maxwalljumps=1,
		health=2,
		maxhealth=5,
		iframes=0,
		run_anim={10,10,10,10,11,11,11,11,12,12,12,12},
		idle_anim={9},
		ready_anim={3},
		dig_down_anim={13},
		laser_down_anim={21,21,21,22,22,22},
		dig_right_anim={5},
		laser_right_anim={6,6,6,7,7,7},
		jump_anim={8},
		extract_anim={4},
		clear_squares=0,
		jumpForce=-2.5,
		coyoteTime=10,
		dig_direction=nil,
		jump_time=0,
		init=function(self)
			self.sprites = game.sprites1	
			self.position=new_point(1*tileSize,-1*tileSize)
			self.speed=new_point(0,0)
		end,
		update=function(self)	
			if(self.status=="dead")	then
				return
			end
			local button_x=input:button(input_lookup.buttons.x,1)
			if(button_x==nil) then
				if input:button(input_lookup.lpad.left) then --left
			   	self.speed.x-=self.acceleration
		   	elseif input:button(input_lookup.lpad.right) then --right
			   	self.speed.x+=self.acceleration
		   	end
		   	if (input:button_press(input_lookup.buttons.o)) then --up
		   		if self.inair<self.coyoteTime or self.state=="extract" then
		   			self.speed.y=self.jumpForce
		   			self.state="jump"
		   			self.jump_time=20
						sfx(0)
		   		elseif self.maxwalljumps>self.walljumps and collision(self.position.x+self.speed.x,self.position.y)  then
		   			self.speed.y=self.jumpForce
		   			self.walljumps+=1
		   			self.state="jump"
		   			self.jump_time=20
		   			sfx(1)
		   		end
		   	else
		   		if (self.state=="jump" and (self.jump_time<1 or self.inair==0)  ) then
		   			self.state="free"
		   		end
	   		end
		   end			
			if(self.inair==0) then
		   	self:do_dig(input:button({input_lookup.lpad.left,input_lookup.buttons.x},1),new_point(-1,0))
		   	self:do_dig(input:button({input_lookup.lpad.right,input_lookup.buttons.x},1),new_point(1,0))
	   		self:do_dig(input:button({input_lookup.lpad.down,input_lookup.buttons.x},1),new_point(0,1))
	   		if(self.state=="free" or self.state=="ready") then
	   			if( input:button(input_lookup.buttons.x)) then
						self.state="ready"
					elseif (self.state=="ready") then
						self.state="free"
					end
				end
	   	end
	   	if(self.inair==0 or self.state=="extract") then
	   		self:do_extract(input:button({input_lookup.lpad.up,input_lookup.buttons.x},0.2))
	   	end
	   	--if input:up() then --up
   
	  		self.speed.x*=0.8 --enersia
	  		self.speed.y+=game.gravity 
	  		if(collision(self.position.x,self.position.y+self.speed.y)) then --block collision
	   		if(self.speed.y>0) then   		
		   		self.inair=0
		   		self.walljumps=0
	   			self.position.y=flr(self.position.y/tileSize+ 0.5)*tileSize
	   		end
	   		self.speed.y=0
	   	else
	   		self.inair+=1	   		
	   	end
			if(collision(self.position.x+self.speed.x,self.position.y)) then
	   		self.speed.x=0
	   	end
	   	self.jump_time=max(self.jump_time-1,0)
	  		self.position+=self.speed --apply velocity
	  		camera_helper:set_camera(new_point(  --follow camera
	  			mid(0,self.position.x-screenWidth/2,screenWidth*(levelScreensWidth-1)),
	  			mid(0,self.position.y-screenHeight/2,screenHeightTileAdjusted*(levelScreensHeight-1))))  		
		  		foreach(game.enemies, function(enemy) --check enemy collision
		  			local colresult=object_collision(self.position,enemy.position)
		  			if(colresult!=nil) then
		  				if(colresult.y>.25 ) then
 							self.speed.y=-2
 							sfx(3,1)
 							enemy:die()
		  				else
		  					if(self.iframes==0) then
			  					sfx(2,1)
				  				self.health-=1
				  				camera_helper:shake_camera(5, 60 )
				  				if(self.health<1) then
				  					self:do_death()
				  				end	
				  				self.iframes=60 
		  					end
		  				end
		  			end
		  		end)
		  		if(self.iframes==0) then
			  		foreach(game.bullets, function(bullet)
			  			local colresult=object_collision(self.position,bullet.position,bullet.size)
		  				if(colresult!=nil) then
				  			sfx(2,1)
			  				self.health-=1
			  				camera_helper:shake_camera(5, 60 )
			  				if(self.health<1) then
			  					self:do_death()
			  				end	
			  				self.iframes=60 
			  			end
			  		end)	
			  	end
		  	self.iframes=max(self.iframes-1,0)  	
		  	if(self.position.y> screenHeight*3)then --die from falling
		  		gameover()
		  	end	  
		  			
		end,
		draw=function(self)
			if(self.status=="dead")	then
				return
			end
			if(self.iframes%2==0) then	
				if(self.state=="ready") then	
					spr(self.sprites[get_frame(self.ready_anim)].bmp,self.position.x,self.position.y)
				elseif(self.state=="dig") then
					if(self.dig_direction.y==1) then
						spr(self.sprites[get_frame(self.dig_down_anim)].bmp,self.position.x,self.position.y)
						spr(self.sprites[get_frame(self.laser_down_anim)].bmp,self.position.x,self.position.y+tileSize)
					elseif(self.dig_direction.x>0) then
						spr(self.sprites[get_frame(self.dig_right_anim)].bmp,self.position.x,self.position.y)
						spr(self.sprites[get_frame(self.laser_right_anim)].bmp,self.position.x+tileSize,self.position.y)
					elseif(self.dig_direction.x<0) then
						spr(self.sprites[get_frame(self.dig_right_anim)].bmp,self.position.x,self.position.y,true)
						spr(self.sprites[get_frame(self.laser_right_anim)].bmp,self.position.x-tileSize,self.position.y,true)
					end
				elseif(self.state=="extract") then
					spr(self.sprites[get_frame(self.extract_anim)].bmp,self.position.x,self.position.y,true)
					--local topTilePos=flr((self.position.y)/tileSize-self.clear_squares)*tileSize
					if(self.clear_squares>0) then
						local topTilePos=flr((self.position.y-self.speed.y)/tileSize-self.clear_squares)*tileSize --we undo speed as this is draw
						rectfill(self.position.x+halfTileSize-1,self.position.y,self.position.x+halfTileSize,max(0,topTilePos)-2,11)
					else
						rectfill(self.position.x+halfTileSize-1,self.position.y,self.position.x+halfTileSize,self.position.y-2,11)
					end
				elseif(self.state=="jump") then
					spr(self.sprites[get_frame(self.jump_anim)].bmp,self.position.x,self.position.y)
				else 
					if(abs(self.speed.x)<0.1) then 
						spr(self.sprites[get_frame(self.idle_anim)].bmp,self.position.x,self.position.y)
					else	
						spr(self.sprites[get_frame(self.run_anim)].bmp,self.position.x,self.position.y,self.speed.x<0,false)
					end
				end
				
			end
			local c=camera_helper:get_camera()
			local life=""
			for i=1,self.maxhealth do
 			 if(i<=self.health) then
 			 	life=life..chr(0x87)
 			 else
 			 	life=life..chr(0x84)
 			 end
			end 
			--circfill(self.position.x,self.position.y,50,0|0x800000000)
			print(life,c.x,c.y,colors.red)
			print_right(chr(0x8E)..game.picked_up.."/"..game.pickups_needed,c.y,colors.lavender)
		end,
		do_death=function(self)
			self.status="dead"
			game:addAction(function()
				local anim={28,28,28,28,28,28,28,28,28,28,28,28,
				29,29,29,29,29,29,29,29,29,29,29,29,
				30,30,30,30,30,30,30,30,30,30,30,30,
				31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,
				31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31}
				for i=1,#anim,1 do
					spr(self.sprites[anim[i]].bmp,self.position.x,self.position.y)
					yield()
				end
				yield()
				game:death()
			end)
		end,
		do_extract=function(self,input)
			if(input==nil) then
				if(self.state=="extract") then
		   		self.state="free"
		   	end
		   	stop_sfx(6,0)
		   	stop_sfx(7,0)
	   	elseif(input==1) then
	   		self.state="extract"
	   		self.clear_squares=tiles_clear_above(self.position)
	   		play_sfx(6,0,true)
	   	elseif(input==2) then
	   	elseif(input==3) then
	   	elseif(input==4) then
	   		--do the extraction
	   		if(self.clear_squares>0 and (self.clear_squares<1000 or game.picked_up>=game.pickups_needed)) then
	   			self.speed.y-=.2
	   			play_sfx(7,0,true,true)
	   			self.clear_squares=tiles_clear_above(self.position)
	   		end
	   	end
		end,
		do_dig=function(self,input,direction)
			if(input==nil and direction:equals(self.dig_direction)  ) then
				stop_sfx(5,0)
				if(self.state=="dig"or self.state=="dug") then
					self.state="free"
					return false
				end
			elseif (input==1) then
				self.dig_direction=direction	
		  		if(state!="dug") then
					play_sfx(5,0)
					self.state="dig"
				end
			elseif(input==2 and self.state=="dig") then
		  		local tile=mget((self.position.x+halfTileSize)/tileSize+direction.x,(self.position.y)/tileSize+direction.y)
				if(fget(tile,1)) then
	  				local particle_system= new_particle_system()
	  				particle_system.spawn_rate=0.1
					particle_system.lifetime=1
					particle_system.position=self.position:round(tileSize)+direction*tileSize
					particle_system.particle_position_r=new_point(-4,-4)
					particle_system.particle_lifetime=15
					particle_system.particle_animation={14}
					particle_system.particle_flipx_r=true
					particle_system.particle_flipy_r=true
					add(game.particle_systems,particle_system)
		  		end
		  		foreach( game.pickups, function(pickup)
	  				local colresult=object_collision(self.position+direction*halfTileSize,pickup.position)
	  				if(colresult!=nil) then
		  				local particle_system= new_particle_system()
		  				particle_system.spawn_rate=0.1
						particle_system.lifetime=1
						particle_system.position=self.position+direction*tileSize
						particle_system.particle_speed_r=new_point(-0.5,-0.5)
						particle_system.particle_acceleration=new_point(0,0.001)
						particle_system.particle_lifetime=30
						particle_system.particle_animation={15}
						particle_system.particle_flipx_r=true
						particle_system.particle_flipy_r=true
						add(game.particle_systems,particle_system)
	  				end
	  			end)
			elseif (input==3) then --dig
				self.state="dug"
				local tile=mget((self.position.x+halfTileSize)/tileSize+direction.x,(self.position.y)/tileSize+direction.y)
		  		if(fget(tile,1)) then
		  			play_sfx(13,0)
					mset((self.position.x+halfTileSize)/tileSize+direction.x,(self.position.y)/tileSize+direction.y,21)
					self.speed+=direction* (self.jumpForce/2)
					local particle_system= new_particle_system()
					particle_system.lifetime=5
					particle_system.position=self.position+direction*tileSize
					particle_system.particle_halflife=0.95
					particle_system.particle_animation={33,33,34,34}
					particle_system.particle_speed_r=new_point(-0.25,-0.25)
					particle_system.particle_acceleration=new_point(0,0.001)
					particle_system.particle_flipx_r=true
					particle_system.particle_flipy_r=true
					add(game.particle_systems,particle_system)
		  		end
		  		foreach( game.pickups, function(pickup)
	  				local colresult=object_collision(self.position+direction*halfTileSize,pickup.position)
	  				if(colresult!=nil) then
	  					game.picked_up+=pickup.value
	  					sfx(4,1)
	  					pickup:die()
	  				end
	  			end)
		  	end
		  	return true
	end		
	}
end


	
:: point.lua
--[[pod_format="raw",created="2025-05-01 16:29:00",modified="2025-05-02 02:26:02",revision=123]]
function new_point(x,y)
	return sm({
		x=x,
		y=y,
		unitVector=function(self,b)
			return normalize(b-self)
		end,
		randomize=function(self,p)
			return new_point(self.x+random(p.x),	self.y+random(p.x))
		end,
		absPoint=function(p)
			return new_point(abs(p.x),abs(p.y))
		end,
		round=function(p,n)
			return new_point(flr(p.x/n+.5)*n,flr(p.y/n+.5)*n)
		end,
		clone=function(p)
			return new_point(p.x,p.y)
		end,
		square_to_circle=function (p)
	    local a = math.max( math.abs(p.x), math.abs(p.y)) -- max(|x|, |y|)
	    local mag = math.sqrt(p.x * p.x + p.y * p.y)
	
	    if mag == 0 then
	        return 0, 0 -- Origin stays at origin
	    end
	
	    local scale = a / mag
	    return new_point(p.x * scale, p.y * scale)
		end,
		__add=function(a,b)
			return new_point(a.x+b.x,a.y+b.y)
		end,
		__mul=function(a,b)
			return new_point(a.x*b,a.y*b)
		end,
		__sub=function(a,b)
			return new_point(a.x-b.x,a.y-b.y)
		end,
		equals=function(self,b)
			if(b == nil) then
				return false
			end
			return self.x==b.x and self.y==b.y
		end,
		__tostring=function()
			return "point"
		end,
		lerp=function(self, a, t)
		-- a and b are points, t is a number between 0 and 1
			local math=self + (a - self) * t
			--pq(self.x,a.x,t,math.x)
			return math
		end
	})
end
:: start.lua
--[[pod_format="raw",created="2025-04-01 00:58:58",modified="2025-05-02 23:32:27",revision=1171]]
function new_start()
	return{
	sprites,
	init=function(self)
		camera_helper:set_camera(new_point(0,0),true)
		self.sprites=	fetch("./gfx/2.gfx")	
	end,
	update=function(self)
		camera_helper:update_camera()
		if(btn()>0) then
		 start_level()
		end

	end,
	draw=function(self)
		cls()
		spr(self.sprites[1].bmp,(480-171)/2,20)
		print_centered("Quota is life",200,8)
		print_centered("Press any button",220,({7,7,6,13,5,0,5,13,6,7,7})[flr(t()*10)%11+1]) 	

	end}
	
end

:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAzLTIxIDE5OjMwOjExIixtb2RpZmllZD0iMjAyNS0w
NS0wMyAxODo1MDowMiIscnVudGltZT0xNyx3b3Jrc3BhY2VzPXt7bG9jYXRpb249ImNhbWVyYS5s
dWEjMSIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0icGlja3VwLmx1YSMxIix3b3Jrc3Bh
Y2VfaW5kZXg9MX0se2xvY2F0aW9uPSJoZWxwZXJzLmx1YSM4NSIsd29ya3NwYWNlX2luZGV4PTF9
LHtsb2NhdGlvbj0iZW5lbXkubHVhIzk1Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJi
dWxsZXQubHVhIzgiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImVuZW1pZXNfdGFibGUu
bHVhIzM5Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJwbGF5ZXIubHVhIzM3Iix3b3Jr
c3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJnYW1lLmx1YSMxMTAiLHdvcmtzcGFjZV9pbmRleD0x
fSx7bG9jYXRpb249ImluY2x1ZGUubHVhIzE3Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9u
PSJnZngvMC5nZngiLHdvcmtzcGFjZV9pbmRleD0yfSx7bG9jYXRpb249ImdmeC8xLmdmeCIsd29y
a3NwYWNlX2luZGV4PTJ9LHtsb2NhdGlvbj0iZ2Z4LzIuZ2Z4Iix3b3Jrc3BhY2VfaW5kZXg9Mn0s
e2xvY2F0aW9uPSJtYXAvbGV2ZWwwLm1hcCIsd29ya3NwYWNlX2luZGV4PTN9LHtsb2NhdGlvbj0i
bWFwL2xldmVsMS5tYXAiLHdvcmtzcGFjZV9pbmRleD0zfSx7bG9jYXRpb249Im1hcC9sZXZlbDIu
bWFwIix3b3Jrc3BhY2VfaW5kZXg9M30se2xvY2F0aW9uPSJzZngvMC5zZngiLHdvcmtzcGFjZV9p
bmRleD00fX1dXQ==
:: [eoc]
