picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA1LTE5IDE0OjA1OjM2Iixtb2RpZmllZD0iMjAyNS0w
NS0zMSAwMzo0MzowOCIscmV2aXNpb249MTY3NV1dbHo0ABARAAC2UAAA8Sh7WzBdPXtibXA9cHh1
AEMgEBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3g9LTAuMTI1DQAQeQ0A2jYyNSx6b29t
PTExfSxJAPAhIB8ZUB5gDlYOcAYfHB8eHxwGMA4QBi0fHi0GEC4GPRw9Bh4ABr0GEAYHnQcGEAa3
CgBHPRc9BwgA-xQXLRctFwYAHgYXHRcdFwYuEAZ3BhAOMAZXBnAOVg5gHlAeIKAALv8GUA5weXAJ
FRkVCWAJdQlQCQUZFRkFCAAOIUAZCAAsGTAIAK8lGRUZJSDZENUAmgAn8AXwFHhgGBIYEhhAKBIY
EigwKBUYFQYAIR8dBwAVHgYAsRgOFR4VDhgwGA5VBgA_BTsFCACfUA8ZUA1gHVAdLAEoMBAWFQIA
EiAHACMWAAgAKxUGCAArFgUIAA8iACoTABMAIgUgEwAvBRDCACfwFDAPERAeEA6AXxCADVwNYJ0g
DgAdfB0ADgANDA0MXQwNDA0QCgAhDTsGACcADg0AFx4MACcOAA0AFRA8ABMATgCgIJ1gDVwNgF2A
Dm0AHzCdAi7wGQMwAw5wczAOEBNbExAuEwtfGwsTHgATCw1bDQsTIAMLDQs9Cw0LAzAKAD8NGw0M
AAIBIgATIDQAgQAeEwtdCxMuUQBBDjBzcGMAD0oDNfEFUL0QDgANNh8PNg0ALg02HDYNHhAHABMw
BgATnAQABhQAIRAeBwAhLgAHAH8ADhC9UA5QkQA0AHsEEVd2BGAXDxwXDRd4BDAXXRd4BAJaBAZq
BA9_BAIafXwEIRcNRAAPgAQ1YPADDxEQDgIA8QNAvSAODTsfDzsNDiANOxw7DTAGACEgDgcAIw4g
NwEGEAAPJAAAMr1ADk0AL-ADkwA2QDofDzpvAFE6HDoNMAYAISAOBwAIkwAvOhwkAAIPkwBEQDgf
DzhvAFE4HDgNMAYAISAOBwAIkwAvOBwkAAIPkwA1Bu8C8AW2EA4ABjAWECYALgYgFhA2HhAGEA4A
8AAGMAYAFhAmEAYwJhAmEBYiAEAQJjAGDAABHADQJhAWEAYQHjYQFiAGLg4AbzAGAA4QtvoCMC-w
8DwA-------------wkFsArQ8AQO0C6wHvBQHrAu0A4AD28KL-8JNgoACtAJsAoQCcAZBtAJBgAK
wBnACvBJUwAon3cK0ArwAQrwR0QAKN9mCvAACtAK4AoQCvBGsgGfD_4BMv8MULgQDgA4OzgALhh7
GB4QGBs-GxsYMAgbXRsIBgAAsRgbPRsYEB4YexguNQA-DhC4jwwx-zoHbxSADmRgDiQvHxQwLiQd
HiQQDlQ_JAAOBA6kDQBEDRQONA0QJD0kDhQNEBQdLhQOFA0gDgQNPjQdIBQuRA1AhA1QRE1gTfAJ
hAAn8B1ALxTAFCAEDlAEDuAEIA7gBBAk0A8fBEAE4AQOoAQgBBAUEBQQDQRgBBAUIAYAEQ0UAGDQ
FAAUoA0UAE8kwA0Ewg4qH-A8AP9U8U8AGQB3ABkQGQcVNxUHGRAXFQcGFwYHFRcQBzU3NQcAB1UX
VRcTNRc1ExcTFRcVFxUTF0UHFQdFBwAHRRdFBxAXJQcVByUXIAgHBRcVFwUHCDAYdxgwGAAHBR8c
BQcACwAXPggAP2BXQOgAKQ88AP_R4CcK4ArQKrBKgIqASrAqTgYv8DiLACkPPAD-------------
vo9mDx8E0ATwaX8AKQ88AP------------------9lPIyATw-wEA8Q6HDxXwtg4PFPDcjiC_cH5w
niC_8AI_MD5APiA_UAgA8zHwJQ6PGQ4QDxSvGXB9cJ0gDxSt8AI9DhAOPQ4wPQ4QDC0OQD0MEAw9
MA49DPAiDq0OEAydDGAOfRxADp0gDJ0MLQARQCwAUQwOMAwtLgASDC4AxAwQDM0wDK0OIL0gDFgA
cUAMLQ4QDE0qAPAEDj0gDE0M8BQesA5NDC0cDhAMPfIwyDA9TC0OID18IAw9bGEAMU0eEI0AECBf
APYNFB7ADj0OgAwtDEA9IA4tDDA9DCA9DJAMLQzwCTMAIm0QkgCSIE3wJA49DB5gMAAwDC0MgQAA
CAAIMgABmwAwbRw9mgBwEE0O8CQObTEAEDCoAAhiAGYADgAO8AVmABDNYwCaAAxN8CUObSwwYwAA
MgBGjQ7wAy4A0C0cfQwQDo0M8CgMfQw_AAEsABJNjQBHjQzwA40AYC0OAH0OEBYAQSgOjQwsABU9
VwAZnVYAUQwQDl0MKwAgKwwJACGtQIkBASoAMC1skHIyKA4wWwAwDCBd6QBQHE3wLAxYAWBNDA0M
HQw2ADNNDhBLARAAmwAIZQARQFABgS0MEE3wLA49CwASsGgAJwwtMwAqDC00AADbARAgRAJUIw4N
TE03APEGDAAMDk0OEE0ODA48IAw9XA6ADD08bgAYTG4AAF8AQ-AjDK03AEDNDBC9fAJ2gAy9DhAO
zSkAAdoAcgzwIgydDA4rAAFIABEcqgKmgA4MjRwwDJ0cIFgAcEA9DvAiDI3aARCwFgDyAT0MMJ0g
rQygDH0MUAyNDjAUAAQpAPADDhx_QB4MDsAMDgwOUAwODEBeCgDgMI4MDrAMLgweDHAMbgwYAGBQ
LgwwDC4KAACJAyBXDiYAQEAuDGAIACIMHggAEUAWABEgBgAQkBYAAwQAMSAMHkwAIg5gEQBgDgwO
8EZNfgMwQAx9nAERDmsBwT2QDM0QDr1gjQzwRp4AdECNDkAMPUCHARC9AAKwDA4wHo0M8Ao_8ChC
ACAOQOoAAUIAJC0MQwARzSkAkvAJDgAOAB7wJ0wAAeECRgwtMA5RAACYAwICAPEBEA49XD0QDj18
8AlOAA7wJlsAA00DEzCDABA9CQIzoA49ZwFA8BAuEF8AESVfAAK-AgaJAABfAFMtDqAMPcQBcA7w
Dh4AHhBjA2YJDvALTUwpABggYAAxAE5AoQAANQTzBC7wCw4AHgAOAC7wCQwO8AoMzQzmABEgngAD
ngIznQwwlQBQDn3wCl4yADDwJd1fADgOID1eAAEpAPAITE0QDgx9HPAGHgAOEB4ALvAlDM0OIA67
ABkgvgAALgBwzQwwDo3wBysAM07wJTABQT0OIE3KAge3APEJDhwOHA4wDr0MDkAcDgxNDA7wBx4Q
HvAoHAFIEA7tELEAAEYBgK0MoB49DPAH3QAhKU0lADvdDBBqAQCxAxDAJgAxPvAqrgUhDiAlABFM
1wAQbA8DIowOcAVADiB8PfIBIfArTQCwDD1eTRAM3SAMvRARAhE97QRCvQzwRfUFYBAMPVAMPSkC
ESCBAwMjAHEMEA69DvBF-QEgEE18AkIwDJ1ARAChDD1ADj0QDK3wRwUBEEAGAHAOEAwdDA1QBQAS
MPw2AxwAIh0cCgB1DQwQDh0MDQIAbCAdDA1ADhgABdoG8Rr-Nw7wUS7wHR7wJB7wHQwO8CB_8H4O
8CA_AE7wrj4QHgAe8KxOMD7wqxcC8AsQPvBBDvBdHhBO8D4eTPBajvA6DA48HjzwW1UB8AA1HB5s
HgwOPPBdHvA0DryNBKAO8BEe8E4e8B-cDgDwDPASHvAXHvAlDvAe-Acu8Dge8FIO-Avwmx58Ls8B
8AdsDizwmg5sDhwuAKwuDA7wfy7wAn48wAMxHgCcxQNg8IAO8AFe0QMRHBcAEGwMADEe8JHgA0AM
HgxOCAAxTA4cIwBBDA7wkssCcAwOHBAMDnwTAEBuDA5wggISiiEAEACxADAuDA4rBGBQngAO8IRG
ABA_GwCgLD4MHgyeMK4PFg4AIPCBGQAxHhweVwQSPiMA0gwOIP4ADAsO8IGODA5RAAMIAKBuEH4Q
Lgtu8IEcJQAEUwARDOgEgBDuCwwLDB4L4ABCDB4QHjkAMCAeECIAoi4Q-gQADhwO8G5MAPAA8AIO
IAwODHAsDgwwPgC_OAAAOgBhNQ7wJwwORQAQBjsF8AIOUB4wrkAuCwwOCy7wNR7wIgkBIP4GRwNi
XmBOCw4MNABgIk4M-gpQowTwBI4gfoCO8GheCw4L-gYQ-gIgfiAXAKAOEI7wZ-4GAI4AEwBgEA5w
fvBpkQDxBQsOC04ADgt_Cx4LTgCOMA4ADiCOGgBwfhA_AB4LHqo14EB_IA5QfvB57gBu0I4wIQDw
BAwe8FveEC4LHhB_AA4gPhA_UJ4UAFBMDlwOEDsBwwAOCy4QriC_IK7wakAB8A3wAT4QPhBeED4w
-gQALvCQvkD_B-BnDhwLPgA_ywEAhQLzEeDuQK4AjvBo_wgQDiBeIP4BQP4C8GgO_wgOEJ4QTgAO
AgDTHmD_APBp_woMAJ4QXhQA8AcOkM7wagz7AByLEC4AThD_AZCO8Gv7CALwBiA_EG4ATgAe8BcO
8FAMDiwADvsMDBQB8A0QHvAM-gIMDoAO8EkOXE0ADqtgDosOsP4DUEzNSQPgUwx9DB0ADhscWwwQ
DjAbAPEOaw0bDJsOIBwODP0ADvBNXD0MHTwNAA6rAE4ADovVNvUCMA77ByAs-QAc8E0MbUwdDB0e
APEEAD4AHhAMmwAOmwwgHD1MjQzwTAMFEC1VCAQmAPABDBAOAC4gHAtMG3wePBA8LSoC8AMOPQw9
DvBEDg0cDRwtDA1MPQurAEEALgsOdQBhHgAOIA4cYwFArA48EFMFsBweDC0sLfBATo0sEgQwHUs9
dgAAlAEgAAynAPARAB4gLA4QLgBufBAcfSwtHC3wPwxdDF0sPQsNKw0LHQu1AACQBlCLDoAsPpgB
8AAAPnwQDP0ADC0O8D9MXTxTAAEqAABXANBgDosMYIyefBAc-QMMpwDwGDwdDC0MHQtNWwAOqwwL
DgwOCwybDlAO-AoOEAz9BA7wSgw9TA0MXT4A8AlLDPsGDiAOEA78Bx4NDhBNLA0cjQwO8E0EBcJc
DQxNAA47DA77Aiy6BsAQbB7cHgwOEF0OLI2gAfApTQwNTA1cPQAO_wgMCwwLDiAOIPwHDiwQDE0O
HA0MbQwdDvBTDi0MDRw9EPsJDgsMcDwO-AUOEDyiABANVAXwCiwO8DMe8A4OPG0QDvsHDAsMgA68
DkwOAEwMBrEsAA4ATgAuIB4ALlgDAQIA8AXwHw7wFAxOMAv8AAtcDvAITA5MDioB8ADwAH4A-gPw
Rg4MC9weXA5HA3HwAawOoA4QNwDwADB_AP4E8EcOC9weTAsQLhMAESACAGEADhAOnDCTAQFoAXAe
AP4R8EgORwQhC4wGACEcECcAIQAuAgBRDjBeAC5BOYL_FQA_8EkOMDYAQW4QThBNAGAgDjAO8AIv
AMT_BvBzHgBe8AAuAI5gAPAK8HkuIA5QPiAu8AAODB4AXgzwhQxOcD4ALoMAsJwOHA58DvCBLtBe
dQnR-AousA7wcCyOIA4gPhEA8QEHPhxOUA7wcRwOTC4ccB4gcgIwLD5MNAVxMA7wdA48DnAFAYUA
YCAeHA4cHlIAEmw7BaAe8HoMLiwODA4c0ADwF1AeTC5sDtxe8H5cDhxADkB8Dkw_XE4cLgwe8IEM
DiwODCAOUB6skgAgPiwxBuEsHvBHHhxADiAOXA7MDvMF0B7wLQ7wSg5ADiAeLC4yCPAA-AJO8GgO
8BoOTA6cDiwOWAZQ8Gke8BkcBlAebA48TiYD8ADwog4MDmxOHD7wpR6MDiwSADCnLowHAGMNDA7w
jD6sANEODvCWHvD--60u8LYOUwdAeB7wthIABQEAoxoe8BYe8I8O8BYXABMZIgAgZQ4IAPIFWw4M
8EoO8BUe8FkO8E0O8Fgu8LVKACv-mLgOczMyLjY5MTYBABQ3wQ5WMy42MTYWAALKDg8FDycfODsA
------------------9CUG09OH19
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA1LTE5IDE2OjQ3OjIyIixtb2RpZmllZD0iMjAyNS0w
NS0zMSAwMzo0MzowOCJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA1LTE5IDE0OjA1OjM1Iixtb2RpZmllZD0iMjAyNS0w
NS0zMSAwMzo0MzowOCIscmV2aXNpb249MTU1Ml1dbHo0AKgAAABYEAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2IiwzMgMALyIwAQD------yM9NDgwAQAvNDABAF8iNDEEAA8BANEfNBUABS80MAEAZ181
MDAwNoQAZFMzMDAwMQgALzcwAQBfFzIEAB44iAEPAQD---------nvEIIiksaGlkZGVuPWZhbHNl
LHBhbl94PTAIANJ5PTAsdGlsZV9oPTE2CgAQdwoAgHpvb209MX19
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA1LTE5IDE2OjQ3OjIyIixtb2RpZmllZD0iMjAyNS0w
NS0zMSAwMzo0MzowOCJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA1LTE5IDE0OjA1OjM2Iixtb2RpZmllZD0iMjAyNS0w
NS0zMSAwMzo0MzowOCIscmV2aXNpb249MTU5MV1dbHo0ACcGAADJGwAA8idweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDJDg9ID0IPQwQFBgcAA5APQQ9IYAOQD0IHABJDBwASRAcAj0UPSFAC
A-D-AQDr8QOCARAGDyAQASABIAHwAA8SEAIOAPkuDyEPqhABD-8gDzEgAVABCSAPPiAPVPAGAQgg
D3FQAvCMDygP--DGD-gKD-8PgA-3Dw0BcA9iD0EPTg9HwFMAQAIQAgxRALElDxYP8BEwD1fwwzwA
WgYPIfCvQAAQZT4AcA9BD0cPRaBEABwdRAD6FSEgAQ-_EAQPVg8xgA8RAhAEDg8oQAIgAQQQBAzw
owsPngLwxVMAAJUA-QsyD24Pbw9kD2UPLQ9mD20PYg9hH3MgARAGDGAAEQr0AB0N8wDBQSAPShAC
DxfwiwsN9gAVDWIANGQPSfUAAUQAUQUHDzYRUwAhDx9UAFADEAFADK8A_SYgDFABAhABMA-U8KML
DdABUA8VDyUPKg8vDzUPPw9KD1oPag96D38Pjw_fD7kPzw-p8J8BAGwAoGwPQQ9TD0UPUrAfAREe
bwBHD_EAEcIA0w-3DwUAESAPoiAPqFB1ADAgAeDFAPkSHSAPDxACDz7wAwkgDyogDzMgDy3wag8S
Cw0JsAGgCfCsbAACjQEA3AAvRaAsAQJrIAEwDvDDEAEv8AksAP----88H-8BACZfQwEQBgJmAABi
IAQPLw9aPAaADxMADjACARAVAJEh8KIGDwwP6gpABh8NPwYIhWwPdQ90D2UwYQB1DwUPFQ_w0GUA
-xoQAQ8FDzoP8QEED4gP6QFwAQgQBA84D8IBQA__8KsED_UL8AUJ8K0BAGkACnJhD2MPaQ9krAYQ
AO4FFiHPAGEGDyUPEhHRAJIP-RAED0QAAXDTAJAQUAIPKhABBhDTAO_jD0EADwvwBQ8UAAnwrW8A
Ct9zD3QfZQ9sD3APYQ9uEwluEHDOCfMwATAPMP0vAP0vDP0v8HAOAAQPDTAPKQ8vDA8rDzcPKg8b
DyQPKgsPJA8sDyH9I8D9Iw8RDw8PDQ8RDwsPEA8OCgBADxz9Iz4A8QQPFAIwDzAPIv0uAQL9Lg8N
Bv0uVQAfBVQACBLDVAAUBVMAGgVSAMK2ATAPKf0vBP0vDxCjADAHESC0ACUPBbUATwdA-bAIAHYf
-wEACh8GJgAJ0QUOAA8MDjAfMx81PzcGAFE6HzUfMwQAoTcdPzofMB8zPy4ZABQ8GQDlPy4-K-89
Ch34FA9aD0gEAD85Dy4QAAoDBAAfHS0AEgwQAAwYACE5D_cBAbwAD6MABAIKADAPNw8GACAwDw4A
oDcfNQ8zDQ8wDy7vAE4-NfgwXQAPEAAIDBgACyAAEy8EABUPBABgDSkPSAkKKAAoCQqzAAB8AACj
APAAPykfNx0fNR0fOh88HzofFgABpwCIPzo-PH8w_DA8AA8GAAERHQMABAIACBoADBAAAAYAhQ8k
Dx0PFw8SOQEPIQEPDyMACxAwxAAi_DBuADEpCikIAEoJDSkKfAAPHgAJD4wAEwFpAA-oAQEPgQAX
DwoAAQYOAAiLADF-On_JAZF-MH83fzV-M39iAAhBAQ8OAAEIBgAOKAAPDgAbBIoA-wL-GAYd8g4d
cvEGHfEOHXEJCgIAAQcBAg8fAAoEVQCR-QwS-Q4S-Q4RAwAgCQoEABAdHQC-Bg4wDysNCw0LLQsG
ABaPDz4NAw0DLQMGABZfDA0MDQwGABgDmQAf8gkBOA9TAEcPWwEGDLYFD38AZA93ADwPygBoD0kB
bw8kAANG----AycABHcHHwMLAAAPAQD-CBFrYAGjX1QdVR01PTU9VQgAdVEdUR0xPTEIAAm7AQEH
ABU9BQAPGAABA7gBD_oIHGA78Qod8RRBAAThBQoKAANlAA4bAAwlAAIOAARoBg_4AlxPBg4wVU8B
Rw9ECC2AO-EDDfEPDbFYAA-HBw0OHgAPVQHBD4sCAw9sARAk8SNHAQYzAQYKAAYOAA9RAQIPpgLl
AIMCD-4DBUADDfEcSgAPKQEHARQADwoAAgYOAA9RAb4CwQwfO8AMC0HxBh0RPQUGBQEPxQw7D08B
tgxzDC978XIMXR--AQAyUP----_K
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA1LTE5IDE2OjQ3OjIyIixtb2RpZmllZD0iMjAyNS0w
NS0zMSAwMzo0MzowOCJdXQ==
:: asteroid.lua
--[[pod_format="raw",created="2025-05-20 13:51:18",modified="2025-05-31 03:43:08",revision=847]]
function new_asteroid(position)
	return{
		_position=position,
		_speed=new_point(0,2),		
		_sprites,
		_sprite=0,
		_flipx,
		_flipy,
		
		health=0,
		threat=0,
		name="dummy",
		init=function(self)
			self._sprites=game.sprites1
			self.flipx=rnd() < 0.5
			self.flipy=rnd() < 0.5
		end,
		update=function(self)
			self._position+=self._speed 
			if(is_point_on_screen(self._position)==false) then
				self:kill(3)
			end
		end,
		draw=function(self)
			spr(self._sprites[self._sprite].bmp,self._position.x,self._position.y,self.flipx,self.flipy)
		end,
		damage=function(self,d)
			self.health-=d
			if(self.health<1) then
				self:kill(2)
			end
			return self.health
		end,
		kill=function(self,mode)--0 hit, 1 deflected, 2 destroyed, 3 passed
			if(mode!=3) then			
				local particle_system= new_particle_system()
	 			particle_system.spawn_rate=1
				particle_system.lifetime=10
				particle_system.position=self._position:round(tileSize)
				particle_system.particle_position_r=new_point(-8,-8)
				particle_system.particle_speed_r=new_point(-.5,-.5)
				particle_system.particle_halflife=0.99
				particle_system.particle_animation={127}
				particle_system.particle_flipx_r=true
				particle_system.particle_flipy_r=true
				add(game.particle_systems,particle_system)
			end
			del(game.asteroids,self)
		end
	}
end

function new_small_asteroid(position)
	local ret = new_asteroid(position)
	ret.threat=1
	ret._sprite=65
	ret.name="swarm"
	ret.basekill=ret.kill
	ret.health=1
	ret.kill=function(self,mode)
		if(mode==0 or mode==2) then
			play_sfx(1,channels.enemy)
		elseif(mode==1) then
			play_sfx(3,channels.enemy)
		end
		self:basekill(mode)
	end
	return ret
end
function new_large_asteroid(position)
	local ret = new_asteroid(position)
	ret.threat=2
	ret._sprite=64
	ret.name="large"
	ret.basekill=ret.kill
	ret.health=30
	ret.kill=function(self,mode)
		if(mode==0) then
			play_sfx(0,channels.enemy)
		end
		self:basekill(mode)
	end
	return ret
end
:: asteroid_spawner.lua
--[[pod_format="raw",created="2025-05-20 14:00:55",modified="2025-05-27 20:18:57",revision=501]]
new_asteroid_spawner=function ()
	return {
		spawn_rate=60*1,
		timer=200,
		left=0,
		right=480-16,
		asteroids,
		init=function(self)
			self.asteroids={new_small_asteroid,new_large_asteroid}
			--self.asteroids={new_large_asteroid}
		end,
		update=function(self)
			if(self.timer>self.spawn_rate) then
				self:do_spawn()
				self.timer=0
			else
				self.timer+=1
			end
		end,
		do_spawn=function(self)
			local pos= new_point(self.left+random(self.right-self.left),-16)
			local asteroid =pick_random(self.asteroids)(pos)
			asteroid:init()
			add(game.asteroids,asteroid)	

		end
		
	}
end
:: camera.lua
--[[pod_format="raw",created="2025-05-19 23:50:11",modified="2025-05-26 01:15:35",revision=73]]
camera_helper={
camera_point =new_point(0,0),
camera_desired_point =new_point(0,0),
camera_shake =new_point(0,0),
shake_intensity=0,
shake_timer=0,
shake_time=0,
camera_shake =new_point(0,0),
-- Function to set the camera position and update the variables
set_camera=function(self,point,instant)
		self.camera_desired_point=point
	if(instant) then
		self.camera_point=point
	end

end,
get_camera=function(self)
    return self.camera_point
end,	
update_camera=function(self)
	self.camera_point=self.camera_point:lerp(self.camera_desired_point,0.5)
	 self:calculate_shake()
	local c=self.camera_point+self.camera_shake
	 camera(c.x, c.y)
end,

shake_camera= function(self,intensity, t )
	self.shake_intensity=intensity
	self.shake_timer=t
	self.shake_time=t
end,
calculate_shake = function(self)
	if(self.shake_timer>0) then		
		local strength=self.shake_intensity*self.shake_timer/self.shake_time
		local point=new_point(random(-1)*strength,random(-1)*strength)
		self.camera_shake=self.camera_shake:lerp(point,0.5)
		self.shake_timer-=1
	else
		self.camera_shake =new_point(0,0)
	end
end
}
:: director.lua
--[[pod_format="raw",created="2025-05-26 03:25:48",modified="2025-05-31 03:43:08",revision=468]]
new_director=function()
	return{
	scenes={},
	current_scene=1,
	total=0,
	timer=0,
	init=function(self)		
		add(self.scenes,new_parts_scene(60*5,30))	
		--add(self.scenes,new_pirate_scene(60*5,120))
		add(self.scenes,new_asteroid_scene(60*10,60))
		add(self.scenes,new_cargo_scene(60*5,30))	
		add(self.scenes,new_asteroid_scene(60*20,30))
		add(self.scenes,new_parts_scene(60*5,30))	
		add(self.scenes,new_asteroid_scene(60*20,15))
		add(self.scenes,new_asteroid_scene(60*20,10))
		add(self.scenes,new_pirate_scene(60*5,120))
		add(self.scenes,new_scene(60*5,0))	
		for i=1,#self.scenes do
			self.total+=self.scenes[i]._duration
		end
		
	end,
	update=function(self)
		local scene=self.scenes[self.current_scene]
		self.timer+=1
		if(scene:update()) then
			if(#self.scenes>self.current_scene) then
				self.current_scene+=1
			else
				self:kill()
			end			
		end
	end,
	draw=function(self)
		local scene=self.scenes[self.current_scene]
		scene:draw()
		--print_right(scene._timer.."/"..scene._duration,0)
		local fill=self.timer/self.total
		rect(screenWidth-101,0,screenWidth-1,10,31)
		rectfill(screenWidth-101*fill ,0,screenWidth-1,10,31)
	end,
	kill=function(self)
		game:win()
	end
}
end
new_scene=function(duration,rate,action)
	return{
		_duration=duration,
		_timer=0,	
		left=0,
		right=480-16,
		message="Smooth flying",
		spawn_timer=new_timer(rate,0,action), 
		update=function(self)
			self.spawn_timer:update(self)
			self._timer+=1
			return self._timer>=self._duration
		end,
		draw=function(self)
			if(self._timer<=60*3)then
				local c=8
				if(self._timer%60>30) then
					c=24
				end
				print_centered(self.message,0,c)
			end
		end	
	}
end
new_pirate_scene=function(duration,rate)
	local ret=new_scene(duration,rate,function(self)
		--local pos= new_point(self.left+random(self.right-self.left),-16)
		local pirate =new_pirate()
		pirate:init()
		add(game.pirates,pirate)	
	end)
	ret.message="Beware of pirates"	
	return ret
end
new_asteroid_scene=function(duration,rate)
	local ret=new_scene(duration,rate,function(self)
		local pos= new_point(self.left+random(self.right-self.left),-16)
		local asteroid =pick_random(self.asteroids)(pos)
		asteroid:init()
		add(game.asteroids,asteroid)	
	end)
	ret.message="Avoid the asteroids"	
	ret.asteroids={new_small_asteroid,new_large_asteroid}
	return ret
end

new_parts_scene=function(duration,rate)
	local ret=new_scene(duration,rate,function(self)
		local pos= new_point(self.left+random(self.right-self.left),-16)
		local part =new_free_part(pos,pick_random(self.parts)())
		part:init()
		add(game.free_parts,part)	
	end)
	ret.message="Get the parts"	
	ret.parts={
				new_part_engine,new_part_engine,
				new_part_bulkhead,
				new_part_scaffold,new_part_scaffold,
				new_part_gun,
				new_part_shield
				}
	return ret
end

new_cargo_scene=function(duration,rate)
	local ret=new_scene(duration,rate,function(self)
		local pos= new_point(self.left+random(self.right-self.left),-16)
		local part =new_free_part(pos,pick_random(self.parts)())
		part:init()
		add(game.free_parts,part)	
	end)
	ret.message="Get the cargo"	
	ret.parts={
				new_part_cargo1,
				new_part_cargo2,
				new_part_cargo3
				}
	return ret
end
:: error_explorer.lua
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNS0wNS0xOSAxNTowMjoyNiIsbW9k
aWZpZWQ9IjIwMjUtMDUtMjAgMTk6MTI6NDAiLHJldmlzaW9uPTQxMl1dCi0tICMgcGljb3Ryb24g
ZXJyb3IgZXhwbG9yZXIKLS0KLS0gYnkga2lyYQotLQotLSB2ZXJzaW9uIDAuMC42Ci0tCi0tIGFu
IGludGVyYWN0aXZlIGVycm9yIHNjcmVlbiBmb3IgcGljb3Ryb24uCi0tIG9uIGVycm9yLCBzaG93
cyB0aGUgc3RhY2ssIGxvY2FsIHZhcmlhYmxlcywKLS0gYW5kIHRoZSBzb3VyY2UgY29kZSB3aGVu
IGF2YWlsYWJsZS4KLS0KLS0gIyMgdXNhZ2UKLS0KLS0gYGluY2x1ZGVgIG9yIGByZXF1aXJlYCBg
ZXJyb3JfZXhwbG9yZXIubHVhYAotLSBpbiB5b3VyIHByb2dyYW0gX2FmdGVyXyBkZWZpbmluZyB5
b3VyIGBfaW5pdGAsCi0tIGBfdXBkYXRlYCwgYW5kIGBfZHJhd2AgZnVuY3Rpb25zLgotLQotLSBw
cmVzcyBgdXBgIGFuZCBgZG93bmAgdG8gbW92ZSB1cCBhbmQgZG93biBvbgotLSB0aGUgc3RhY2ss
IHByZXNzIGB4YCBvciBgc3BhY2VgIHRvIHRvZ2dsZSBmb250Ci0tIHNpemUuIGNsaWNrIG9uIHRh
YmxlcyBpbiB0aGUgdmFyaWFibGUgdmlldyB0bwotLSBleHBhbmQgdGhlbS4KLS0KLS0gIyMgaG93
IGl0IHdvcmtzCi0tCi0tIGluIG9yZGVyIHRvIGNhdGNoIGVycm9ycyBhbmQgaW5zcGVjdCBydW50
aW1lCi0tIHN0YXRlLCB0aGlzIHNjcmlwdCByZXBsYWNlcyBgX2luaXRgLCBgX3VwZGF0ZWAKLS0g
YW5kIGBfZHJhd2AgZnVuY3Rpb25zIHdpdGggb25lcyB0aGF0IGNhbGwgdGhlCi0tIG9yaWdpbmFs
IG9uZXMgaW5zaWRlIGEgY29yb3V0aW5lLgotLQotLSB3aGVuIHRoZXJlJ3MgYW4gZXJyb3IsIGl0
IHVzZXMgbHVhJ3MgZGVidWcKLS0gbGlicmFyeSB0byBpbnNwZWN0IHRoZSBjb3JvdXRpbmUuIGEg
Y29weQotLSBvZiB0aGUgZXJyb3IgaXMgYWxzbyBwcmludGVkIHRvIHRoZSBjb25zb2xlCi0tIHdp
dGggcHJpbnRoIGlmIHlvdSdyZSBydW5uaW5nIHBpY290cm9uIGZyb20KLS0gdGhlIGNvbW1hbmQg
bGluZS4KLS0KLS0gdGhlIGZvbGxvd2luZyBkZWJ1ZyBhcGlzIGFyZSB1c2VkOgotLQotLSAtIGBk
ZWJ1Zy5nZXRpbmZvYAotLSAtIGBkZWJ1Zy5nZXRsb2NhbGAKLS0gLSBgZGVidWcuZ2V0dXB2YWx1
ZWAKLS0gLSBgZGVidWcudHJhY2ViYWNrYAotLQotLSAjIyB2ZXJzaW9uIGhpc3RvcnkgCi0tCi0t
IHZlcnNpb24gMC4wLjYKLS0gLSBvbiBlcnJvcjoKLS0gICAtIHNob3cgY3Vyc29yCi0tICAgLSBt
YWtlIHdpbmRvdyByZXNpemFibGUKLS0gLSBhdXRvbWF0aWNhbGx5IGFkanVzdCBsYXlvdXQgdG8g
d2luZG93IHNpemUKLS0gLSBzdXBwb3J0IHlpZWxkaW5nIChzaW5jZSBmZXRjaCBzb21ldGltZXMg
eWllbGRzKQotLQotLSB2ZXJzaW9uIDAuMC41Ci0tCi0tIC0gZnV0dXJlIHByb29maW5nOiBncmFj
ZWZ1bGx5IGhhbmRsZSB3aGVuCi0tICAgdmFyaW91cyBwYXJ0cyBvZiB0aGUgYGRlYnVnYCBtb2R1
bGUgYXJlbid0Ci0tICAgYXZhaWxhYmxlCi0tCi0tIHZlcnNpb24gMC4wLjQKLS0KLS0gLSBhbHNv
IGNhdGNoIGVycm9ycyBpbiBgX2luaXRgCi0tCi0tIHZlcnNpb24gMC4wLjMKLS0KLS0gLSBhdXRv
bWF0aWNhbGx5IGNob29zZSB0aGUgcmlnaHQgc3RhY2sgZnJhbWUKLS0gICBiYXNlZCBvbiB0aGUg
ZXJyb3IgbWVzc2FnZQotLSAtIG1vcmUgdGhvcm91Z2hseSBwcm90ZWN0IGZyb20gZXJyb3JzIGlu
IGVycm9yCi0tICAgZXhwbG9yZXIgaXRzZWxmCi0tCi0tIHZlcnNpb24gMC4wLjIKLS0KLS0gLSBk
b24ndCByZWdlbmVyYXRlIHN0YWNrIGluZm8gZXZlcnkgZHJhdwotLSAtIHNjcm9sbCBzdGFjayBh
bmQgdmFyaWFibGVzIGxpc3Qgd2l0aCBtb3VzZXdoZWVsCi0tIC0gY2xpY2sgb24gc3RhY2sgdG8g
c3dpdGNoIHN0YWNrIGZyYW1lcwotLSAtIGNsaWNrIG9uIHRhYmxlcyBpbiB2YXJpYWJsZXMgdmll
dyB0byBleHBhbmQgdGhlbQotLSAtIGVzY2FwZSBzdHJpbmdzIHdoZW4gcHJpbnRpbmcgdGhlbQot
LQotLSB2ZXJzaW9uIDAuMC4xCi0tCi0tIC0gYWRqdXN0IGNvbG9ycwotLSAtIGNvZGUgY2xlYW51
cAotLSAtIHVzZSBgYnRucGAgaW5zdGVhZCBvZiBga2V5cGAKLS0gLSBzbGlnaHRseSBtb3JlIHRo
b3JvdWdoIGByZXNldGAKLS0gLSBkb24ndCBzaG93IHRlbXBvcmFyaWVzCi0tCi0tIHZlcnNpb24g
MC4wLjAgKHByZXJlbGVhc2UpCi0tCi0tIC0gaW5pdGlhbCBkaXNjb3JkIGJldGEKCi0tICMjIGxp
Y2Vuc2UKLS0KLS0gQ29weXJpZ2h0IDIwMjQgS2lyYSBCb29tCi0tIAotLSBQZXJtaXNzaW9uIGlz
IGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcg
YSBjb3B5Ci0tIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBm
aWxlcyAodGhlIOKAnFNvZnR3YXJl4oCdKSwgdG8KLS0gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0
aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUKLS0gcmln
aHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3Vi
bGljZW5zZSwgYW5kL29yCi0tIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBl
cm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzCi0tIGZ1cm5pc2hlZCB0byBkbyBz
bywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6Ci0tCi0tIFRoZSBhYm92ZSBj
b3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1
ZGVkIGluCi0tIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3
YXJlLgotLSAKLS0gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIOKAnEFTIElT4oCdLCBXSVRIT1VU
IFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCi0tIE9SIElNUExJRUQsIElOQ0xVRElORyBC
VVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLAotLSBG
SVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBO
TyBFVkVOVCBTSEFMTAotLSBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFC
TEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgotLSBMSUFCSUxJVFksIFdIRVRIRVIg
SU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORwotLSBG
Uk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNF
IE9SIE9USEVSCi0tIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KCi0tLS0gdXRpbCAtLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpsb2NhbCBmdW5jdGlvbiBmaWxlbmFt
ZV9vZiAocGF0aCkKICByZXR1cm4gcGF0aDptYXRjaCAoJ1teL10qJCcpCmVuZAoKbG9jYWwgZnVu
Y3Rpb24gc2FmZV90b3N0cmluZyAodmFsdWUpCiAgaWYgdHlwZSAodmFsdWUpID09ICdzdHJpbmcn
IHRoZW4KICAgIHJldHVybiBzdHJpbmcuZm9ybWF0ICgnJXEnLCB2YWx1ZSkKICBlbHNlCiAgICBs
b2NhbCBzdWNjZXNzLCB2YWx1ZV9zdHJpbmcgPSBwY2FsbCAodG9zdHJpbmcsIHZhbHVlKQogICAg
cmV0dXJuIHN1Y2Nlc3MgYW5kIHZhbHVlX3N0cmluZwogICAgICAgICAgICAgICAgICAgb3IgKCdl
cnJvciBkdXJpbmcgdG9zdHJpbmc6ICcgLi4gdG9zdHJpbmcgKHZhbHVlX3N0cmluZykpCiAgZW5k
CmVuZAoKbG9jYWwgZnVuY3Rpb24gZ2V0X2xpbmVzICh0ZXh0KQogIGxvY2FsIGxpbmVzID0ge30K
ICBmb3IgbGluZSBpbiB0ZXh0OmdtYXRjaCAoIiguLSlccj9cbiIpIGRvCiAgICB0YWJsZS5pbnNl
cnQgKGxpbmVzLCBsaW5lKQogIGVuZAogIGxvY2FsIGxhc3RfbGluZSA9IHRleHQ6bWF0Y2ggKCco
W15cbl0qKSQnKQogIGlmIGxhc3RfbGluZSBhbmQgbGFzdF9saW5lIH49ICcnIHRoZW4KICAgIHRh
YmxlLmluc2VydCAobGluZXMsIGxhc3RfbGluZSkKICBlbmQKICByZXR1cm4gbGluZXMKZW5kCgps
b2NhbCBmdW5jdGlvbiBjb21wYXJlX2tleXMgKGEsIGIpCiAgbG9jYWwgdGEgPSB0eXBlIChhLmtl
eSkKICBsb2NhbCB0YiA9IHR5cGUgKGIua2V5KQogIGlmIHRhIH49IHRiIHRoZW4KICAgIHJldHVy
biB0YSA8IHRiCiAgZW5kCiAgaWYgdGEgPT0gJ251bWJlcicgb3IgdGEgPT0gJ3N0cmluZycgdGhl
bgogICAgcmV0dXJuIGEua2V5IDwgYi5rZXkKICBlbHNlCiAgICByZXR1cm4gc2FmZV90b3N0cmlu
ZyAoYS5rZXkpIDwgc2FmZV90b3N0cmluZyAoYi5rZXkpCiAgZW5kCmVuZAoKbG9jYWwgZnVuY3Rp
b24gc29ydCAodCwgZikKICAtLSBpbnNlcnRpb24gc29ydAogIGYgPSBmIG9yIGZ1bmN0aW9uIChh
LCBiKSByZXR1cm4gYSA8IGIgZW5kCiAgZm9yIGkgPSAxLCAjdC0xIGRvCiAgICBsb2NhbCB2YWwg
PSB0W2krMV0KICAgIGxvY2FsIGogPSBpCiAgICB3aGlsZSBqID49IDEgYW5kIG5vdCBmKHRbal0s
IHZhbCkgZG8KICAgICAgdFtqKzFdID0gdFtqXQogICAgICBqID0gaiAtIDEKICAgIGVuZAogICAg
dFtqKzFdID0gdmFsCiAgZW5kCmVuZAoKbG9jYWwgZnVuY3Rpb24gYXBwcm9hY2ggKGZyb20sIHRv
KQogIHJldHVybiBmcm9tICsgKHRvIC0gZnJvbSkgKiAwLjI1CmVuZAoKbG9jYWwgZnVuY3Rpb24g
cm91bmQgKHZhbHVlKQogIHJldHVybiBtYXRoLmZsb29yICh2YWx1ZSArIDAuNSkKZW5kCgpsb2Nh
bCBmdW5jdGlvbiBwYXJzZV9tZXNzYWdlX2Zvcl9sb2NhdGlvbiAobXNnKQogIGxvY2FsIHBhdGgs
IGxpbmUsIGVyciA9IG1zZzptYXRjaCAoJ14oW146XSspOiglZCspOiguKikkJykKICByZXR1cm4g
cGF0aCwgdG9udW1iZXIgKGxpbmUpLCBlcnIKZW5kCgotLS0tIHN0YXRlIC0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKbG9jYWwgX0cgPSBfRwpsb2NhbCBlcnJvcl9tZXNz
YWdlCmxvY2FsIGVycm9yX3RocmVhZApsb2NhbCBlcnJvcl90cmFjZWJhY2sKbG9jYWwgaW5pdF9k
b25lID0gZmFsc2UKbG9jYWwgdXNlX3NtYWxsX2ZvbnQgPSBmYWxzZQpsb2NhbCBtb3VzZV93YXNf
Y2xpY2tlZCA9IGZhbHNlCgotLSBzdGFjayB2aWV3CmxvY2FsIHN0YWNrX2ZyYW1lcyA9IHt9Cmxv
Y2FsIGN1cnJlbnRfc3RhY2tfaW5kZXggPSAxCmxvY2FsIGhvdmVyZWRfc3RhY2tfaW5kZXggPSBm
YWxzZQpsb2NhbCBtb3VzZV9vdmVyX3N0YWNrID0gZmFsc2UKbG9jYWwgc3RhY2tfbWF4X3Njcm9s
bCA9IDAKbG9jYWwgc3RhY2tfc2Nyb2xsID0gMApsb2NhbCBzdGFja19zY3JvbGxfc21vb3RoID0g
MAoKLS0gdmFyaWFibGVzIHZpZXcKbG9jYWwgdmFyaWFibGVzID0ge30KbG9jYWwgaG92ZXJlZF92
YXJpYWJsZSA9IGZhbHNlCmxvY2FsIHZhcmlhYmxlc19tYXhfc2Nyb2xsID0gMApsb2NhbCB2YXJp
YWJsZXNfc2Nyb2xsID0gMApsb2NhbCB2YXJpYWJsZXNfc2Nyb2xsX3Ntb290aCA9IDAKbG9jYWwg
bW91c2Vfb3Zlcl92YXJpYWJsZXMgPSBmYWxzZQoKLS0gc291cmNlIHZpZXcKbG9jYWwgc291cmNl
X2xpbmVzID0ge30KCgotLS0tIG1haW4gZXZlbnRzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLQoKbG9jYWwgZnVuY3Rpb24gcmVidWlsZCAoKQogIC0tIHJlYnVpbGQgc3RhY2sgZnJh
bWUgaW5mbwogIHN0YWNrX2ZyYW1lcyA9IHt9CiAgdmFyaWFibGVzID0ge30KICBzb3VyY2VfbGlu
ZXMgPSB7fQogIHZhcmlhYmxlc19zY3JvbGwgPSAwCiAgdmFyaWFibGVzX3Njcm9sbF9zbW9vdGgg
PSAwCgogIGZvciBpID0gMCwgMjAgZG8KICAgIGxvY2FsIGluZm8gPSBkZWJ1Zy5nZXRpbmZvIChl
cnJvcl90aHJlYWQsIGkpCiAgICBpZiBub3QgaW5mbyB0aGVuCiAgICAgIGJyZWFrCiAgICBlbmQK
CiAgICBpZiBpbmZvLnNob3J0X3NyYyB0aGVuCiAgICAgIHRhYmxlLmluc2VydCAoc3RhY2tfZnJh
bWVzLCB7CiAgICAgICAgZmlsZW5hbWUgPSBmaWxlbmFtZV9vZiAoaW5mby5zaG9ydF9zcmMpLAog
ICAgICAgIHBhdGggPSBpbmZvLnNob3J0X3NyYywKICAgICAgICBsaW5lID0gaW5mby5jdXJyZW50
bGluZSwKICAgICAgICBkZXB0aCA9IGksCiAgICAgICAgZm5fbmFtZSA9IChpbmZvLm5hbWUgb3Ig
KGZpbGVuYW1lX29mIChpbmZvLnNob3J0X3NyYykgLi4gJzonIC4uIHRvc3RyaW5nIChpbmZvLmxp
bmVkZWZpbmVkKSkpLAogICAgICAgIHNvdXJjZSA9IGluZm8uc291cmNlLAogICAgICB9KQogICAg
ZW5kCiAgZW5kCgogIGxvY2FsIGZyYW1lID0gc3RhY2tfZnJhbWVzIFtjdXJyZW50X3N0YWNrX2lu
ZGV4XQoKICBpZiBub3QgZnJhbWUgdGhlbgogICAgcmV0dXJuCiAgZW5kCgogIC0tIHJlYnVpbGQg
dmFyaWFibGVzCiAgZG8KICAgIGlmIGRlYnVnLmdldGxvY2FsIHRoZW4KICAgICAgbG9jYWwgbG9j
YWxfaW5kZXggPSAxCiAgICAgIHJlcGVhdAogICAgICAgIGxvY2FsIG5hbWUsIHZhbHVlID0gZGVi
dWcuZ2V0bG9jYWwgKGVycm9yX3RocmVhZCwgZnJhbWUuZGVwdGgsIGxvY2FsX2luZGV4KQogICAg
ICAgIGlmIG5hbWUgdGhlbgogICAgICAgICAgaWYgbmFtZSB_PSAnKHRlbXBvcmFyeSknIHRoZW4K
ICAgICAgICAgICAgdGFibGUuaW5zZXJ0ICh2YXJpYWJsZXMsIHsKICAgICAgICAgICAgICBrZXkg
PSBuYW1lLAogICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUsCiAgICAgICAgICAgIH0pCiAgICAg
ICAgICBlbmQKICAgICAgICAgIGxvY2FsX2luZGV4ID0gbG9jYWxfaW5kZXggKyAxCiAgICAgICAg
ZW5kCiAgICAgIHVudGlsIG5vdCBuYW1lCiAgICBlbHNlCiAgICAgIHRhYmxlLmluc2VydCAodmFy
aWFibGVzLCB7CiAgICAgICAgZXJyb3IgPSAnbm8gZGVidWcuZ2V0bG9jYWwsIGNhblwndCBzaG93
IGxvY2FscycKICAgICAgfSkKICAgIGVuZAoKICAgIGlmIGRlYnVnLmdldHVwdmFsdWUgdGhlbgog
ICAgICBsb2NhbCBpbmZvID0gZGVidWcuZ2V0aW5mbyAoZXJyb3JfdGhyZWFkLCBmcmFtZS5kZXB0
aCkKICAgICAgaWYgaW5mbyBhbmQgaW5mby5mdW5jIHRoZW4KICAgICAgICBsb2NhbCB1cHZhbHVl
X2luZGV4ID0gMQogICAgICAgIHJlcGVhdAogICAgICAgICAgbG9jYWwgbmFtZSwgdmFsdWUgPSBk
ZWJ1Zy5nZXR1cHZhbHVlIChpbmZvLmZ1bmMsIHVwdmFsdWVfaW5kZXgpCiAgICAgICAgICBpZiBu
YW1lIHRoZW4KICAgICAgICAgICAgdGFibGUuaW5zZXJ0ICh2YXJpYWJsZXMsIHsKICAgICAgICAg
ICAgICBrZXkgPSBuYW1lLAogICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUsCiAgICAgICAgICAg
IH0pCiAgICAgICAgICAgIHVwdmFsdWVfaW5kZXggPSB1cHZhbHVlX2luZGV4ICsgMQogICAgICAg
ICAgZW5kCiAgICAgICAgdW50aWwgbm90IG5hbWUKICAgICAgZW5kCiAgICBlbHNlCiAgICAgIHRh
YmxlLmluc2VydCAodmFyaWFibGVzLCB7CiAgICAgICAgZXJyb3IgPSAnbm8gZGVidWcuZ2V0dXB2
YWx1ZSwgY2FuXCd0IHNob3cgdXB2YWx1ZXMnCiAgICAgIH0pCiAgICBlbmQKICBlbmQKCiAgLS0g
cmVidWlsZCBzb3VyY2UgbGluZXMKICBsb2NhbCBzb3VyY2UgPSBmcmFtZS5zb3VyY2UKICBpZiBz
b3VyY2UgdGhlbgogICAgaWYgc3RyaW5nLnN1YiAoc291cmNlLCAxLCAxKSA9PSAnQCcgdGhlbgog
ICAgICBsb2NhbCBmaWxlbmFtZSA9IHN0cmluZy5zdWIgKHNvdXJjZSwgMiwgI3NvdXJjZSkKICAg
ICAgc291cmNlID0gZmV0Y2ggKGZpbGVuYW1lKQogICAgZW5kCiAgICBpZiBzb3VyY2UgYW5kIHR5
cGUgKHNvdXJjZSkgPT0gJ3N0cmluZycgdGhlbgogICAgICBzb3VyY2VfbGluZXMgPSBnZXRfbGlu
ZXMgKHNvdXJjZSkKICAgIGVuZAogIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIGVycm9yX3VwZGF0
ZSAoKQogIGxvY2FsIGxhc3RfaW5kZXggPSBjdXJyZW50X3N0YWNrX2luZGV4CiAgaWYgYnRucCAo
NSkgb3Iga2V5cCAnc3BhY2UnIHRoZW4KICAgIHVzZV9zbWFsbF9mb250ID0gbm90IHVzZV9zbWFs
bF9mb250CiAgZW5kCiAgaWYgYnRucCAoMikgdGhlbgogICAgY3VycmVudF9zdGFja19pbmRleCA9
IG1hdGgubWF4ICgxLCBjdXJyZW50X3N0YWNrX2luZGV4IC0gMSkKICAgIHN0YWNrX3Njcm9sbCA9
IG1hdGgubWluIChjdXJyZW50X3N0YWNrX2luZGV4LTEsIHN0YWNrX3Njcm9sbCkKICBlbmQKICBp
ZiBidG5wICgzKSB0aGVuCiAgICBjdXJyZW50X3N0YWNrX2luZGV4ID0gbWF0aC5taW4gKCNzdGFj
a19mcmFtZXMsIGN1cnJlbnRfc3RhY2tfaW5kZXggKyAxKQogICAgc3RhY2tfc2Nyb2xsID0gbWF0
aC5tYXggKChjdXJyZW50X3N0YWNrX2luZGV4KSAtICgjc3RhY2tfZnJhbWVzIC0gc3RhY2tfbWF4
X3Njcm9sbCksIHN0YWNrX3Njcm9sbCkKICBlbmQKCiAgbG9jYWwgXywgXywgY2xpY2ssIF8sIHdo
ZWVsID0gbW91c2UgKCkKICBpZiBtb3VzZV9vdmVyX3N0YWNrIHRoZW4KICAgIHN0YWNrX3Njcm9s
bCA9IG1hdGgubWF4ICgwLCBtYXRoLm1pbiAoc3RhY2tfc2Nyb2xsIC0gd2hlZWwgKiAyLCBzdGFj
a19tYXhfc2Nyb2xsKSkKICBlbmQKICBzdGFja19zY3JvbGxfc21vb3RoID0gYXBwcm9hY2ggKHN0
YWNrX3Njcm9sbF9zbW9vdGgsIHN0YWNrX3Njcm9sbCkKICBpZiBtb3VzZV9vdmVyX3ZhcmlhYmxl
cyB0aGVuCiAgICB2YXJpYWJsZXNfc2Nyb2xsID0gbWF0aC5tYXggKDAsIG1hdGgubWluICh2YXJp
YWJsZXNfc2Nyb2xsIC0gd2hlZWwgKiAyLCB2YXJpYWJsZXNfbWF4X3Njcm9sbCkpCiAgZW5kCiAg
dmFyaWFibGVzX3Njcm9sbF9zbW9vdGggPSBhcHByb2FjaCAodmFyaWFibGVzX3Njcm9sbF9zbW9v
dGgsIHZhcmlhYmxlc19zY3JvbGwpCgogIGNsaWNrID0gY2xpY2sgfj0gMAogIGlmIGNsaWNrIGFu
ZCBub3QgbW91c2Vfd2FzX2NsaWNrZWQgdGhlbgogICAgaWYgaG92ZXJlZF9zdGFja19pbmRleCB0
aGVuCiAgICAgIGN1cnJlbnRfc3RhY2tfaW5kZXggPSBob3ZlcmVkX3N0YWNrX2luZGV4CiAgICBl
bmQKICAgIGlmIGhvdmVyZWRfdmFyaWFibGUgYW5kIHR5cGUgKGhvdmVyZWRfdmFyaWFibGUudmFs
dWUpID09ICd0YWJsZScgdGhlbgogICAgICBpZiBob3ZlcmVkX3ZhcmlhYmxlLmNvbnRlbnRzIHRo
ZW4KICAgICAgICBob3ZlcmVkX3ZhcmlhYmxlLmNvbnRlbnRzID0gbmlsCiAgICAgIGVsc2UKICAg
ICAgICBsb2NhbCBjb250ZW50cyA9IHt9CiAgICAgICAgaG92ZXJlZF92YXJpYWJsZS5jb250ZW50
cyA9IGNvbnRlbnRzCiAgICAgICAgZm9yIGssdiBpbiBwYWlycyAoaG92ZXJlZF92YXJpYWJsZS52
YWx1ZSkgZG8KICAgICAgICAgIHRhYmxlLmluc2VydCAoY29udGVudHMsIHsKICAgICAgICAgICAg
a2V5ID0gaywKICAgICAgICAgICAgdmFsdWUgPSB2LAogICAgICAgICAgfSkKICAgICAgICBlbmQK
ICAgICAgICBzb3J0IChjb250ZW50cywgY29tcGFyZV9rZXlzKQogICAgICBlbmQKICAgIGVuZAog
IGVuZAogIG1vdXNlX3dhc19jbGlja2VkID0gY2xpY2sKCiAgaWYgY3VycmVudF9zdGFja19pbmRl
eCB_PSBsYXN0X2luZGV4IHRoZW4KICAgIHJlYnVpbGQoKQogIGVuZAplbmQKCmxvY2FsIGZ1bmN0
aW9uIGVycm9yX2RyYXcgKCkKICBsb2NhbCBXID0gZ2V0X2Rpc3BsYXkoKTp3aWR0aCgpCiAgbG9j
YWwgSCA9IGdldF9kaXNwbGF5KCk6aGVpZ2h0KCkKCiAgbG9jYWwgcHJlZml4ID0gdXNlX3NtYWxs
X2ZvbnQgYW5kICdcMDE0JyBvciAnJwogIGxvY2FsIGZvbnRfaGVpZ2h0ID0gKHVzZV9zbWFsbF9m
b250IGFuZCA2IG9yIDExKQogIGxvY2FsIG14LCBteSA9IG1vdXNlKCkKICBsb2NhbCBvdmVyX3Nl
Y3Rpb24gPSBmYWxzZQogIGxvY2FsIHgwLCB5MCwgeCwgeQoKICBsb2NhbCBmdW5jdGlvbiBnb190
byAobmV3X3gsIG5ld195KQogICAgeDAsIHkwID0gbmV3X3gsIG5ld195CiAgICB4LCB5ID0geDAs
IHkwCiAgZW5kCgogIGxvY2FsIGZ1bmN0aW9uIHNlY3Rpb24gKHN4LCBzeSwgc3csIHNoKQogICAg
b3Zlcl9zZWN0aW9uID0KICAgICAgbXggPj0gc3ggYW5kIG14IDwgc3ggKyBzdyBhbmQKICAgICAg
bXkgPj0gc3kgYW5kIG15IDwgc3kgKyBzaAogICAgY2xpcCAoc3gsIHN5LCBzdywgc2gpCiAgICBn
b190byhzeCsyLCBzeSsyKQogIGVuZAoKICBsb2NhbCBmdW5jdGlvbiBwcmludF9ob3Jpem9udGFs
ICh0ZXh0LCBjb2xvcikKICAgIGxvY2FsIG5ld194LCBfbmV3X3kgPSBwcmludCAocHJlZml4IC4u
IHRleHQsIHgsIHksIGNvbG9yKQogICAgeCA9IG5ld194CiAgZW5kCgogIGxvY2FsIGZ1bmN0aW9u
IHByaW50X2xpbmUgKHRleHQsIGNvbG9yKQogICAgbG9jYWwgX25ld194LCBuZXdfeSA9IHByaW50
IChwcmVmaXggLi4gdGV4dCwgeCwgeSwgY29sb3IpCiAgICB4ID0geDAKICAgIHkgPSBuZXdfeQog
IGVuZAoKICAtLSBkcmF3IHNldHVwCiAgY2xzICgwKQogIC0tIGxpZ2h0ZXIgZGFyayBncmF5IGZv
ciByZWFkYWJpbGl0eQogIHBhbCAoNSwgMHhmZjcwNzA3MCwgMikKICBjb2xvciAoNSkKCiAgLS0g
ZXJyb3IgbWVzc2FnZQogIHNlY3Rpb24gKDAsIDAsIFcsIEgvMikKICBtb3VzZV9vdmVyX3N0YWNr
ID0gb3Zlcl9zZWN0aW9uCgogIGxvY2FsIGxvY19wYXRoLCBsb2NfbGluZSwgZXJyID0gcGFyc2Vf
bWVzc2FnZV9mb3JfbG9jYXRpb24gKGVycm9yX21lc3NhZ2UpCiAgaWYgbG9jX3BhdGggdGhlbgog
ICAgcHJpbnRfbGluZSAoJ2Vycm9yIGF0ICcgLi4gbG9jX3BhdGggLi4gJzonIC4uIGxvY19saW5l
IC4uICc6JywgNikKICAgIHByaW50X2xpbmUgKCcgICcgLi4gZXJyLCA4KQogIGVsc2UKICAgIHBy
aW50X2xpbmUgKCdlcnJvcjonLCA2KQogICAgcHJpbnRfbGluZSAoJyAgJyAuLiBlcnJvcl9tZXNz
YWdlLCA4KQogIGVuZAoKICAtLSBzdGFjayBmcmFtZXMKICBwcmludF9saW5lICgnc3RhY2s6Jywg
NikKICBzZWN0aW9uICgwLCB5LCBXLCBILzIteSkKICBsb2NhbCBzdGFja190b3BfeSA9IHkKICB5
ID0geSAtIHJvdW5kIChzdGFja19zY3JvbGxfc21vb3RoICogZm9udF9oZWlnaHQpCiAgbG9jYWwg
bGFzdF9ob3ZlcmVkX3N0YWNrX2luZGV4ID0gaG92ZXJlZF9zdGFja19pbmRleAogIGhvdmVyZWRf
c3RhY2tfaW5kZXggPSBmYWxzZQogIGZvciBpLCBmcmFtZSBpbiBpcGFpcnMgKHN0YWNrX2ZyYW1l
cykgZG8KICAgIGNvbG9yIChsYXN0X2hvdmVyZWRfc3RhY2tfaW5kZXggPT0gaSBhbmQgNyBvcgog
ICAgICAgICAgIGN1cnJlbnRfc3RhY2tfaW5kZXggPT0gaSBhbmQgNiBvciA1KQoKICAgbG9jYWwg
eV9iZWZvcmUgPSB5CiAgICBwcmludF9saW5lIChzdHJpbmcuZm9ybWF0ICgnICAlczolZCBpbiBm
dW5jdGlvbiAlcycsCiAgICAgIGZyYW1lLmZpbGVuYW1lLCBmcmFtZS5saW5lLCBmcmFtZS5mbl9u
YW1lICkpCiAgICBpZiBvdmVyX3NlY3Rpb24gdGhlbgogICAgICBpZiBteSA_PSB5X2JlZm9yZSBh
bmQgbXkgPCB5IHRoZW4KICAgICAgICBob3ZlcmVkX3N0YWNrX2luZGV4ID0gaQogICAgICBlbmQK
ICAgIGVuZAogIGVuZAogIHN0YWNrX21heF9zY3JvbGwgPSAjc3RhY2tfZnJhbWVzIC0gKEgvMiAt
IHN0YWNrX3RvcF95KSAvIGZvbnRfaGVpZ2h0CgogIGxvY2FsIGZyYW1lID0gc3RhY2tfZnJhbWVz
IFtjdXJyZW50X3N0YWNrX2luZGV4XQogIGlmIG5vdCBmcmFtZSB0aGVuCiAgICByZXR1cm4KICBl
bmQKCiAgLS0gdmFyaWFibGVzCiAgc2VjdGlvbiAoMCwgSC8yLCBXLzIsIEgvMikKICBtb3VzZV9v
dmVyX3ZhcmlhYmxlcyA9IG92ZXJfc2VjdGlvbgogIHByaW50X2xpbmUgKCd2YXJpYWJsZXM6Jywg
NikKICBzZWN0aW9uICgwLCB5LCBXLzIsIEgteSkKICBsb2NhbCB2YXJpYWJsZXNfdG9wX3kgPSB5
CiAgeSA9IHkgLSByb3VuZCAodmFyaWFibGVzX3Njcm9sbF9zbW9vdGggKiBmb250X2hlaWdodCkK
ICBsb2NhbCBsYXN0X2hvdmVyZWRfdmFyaWFibGUgPSBob3ZlcmVkX3ZhcmlhYmxlCiAgaG92ZXJl
ZF92YXJpYWJsZSA9IGZhbHNlCiAgbG9jYWwgdmFyaWFibGVfY291bnQgPSAwCiAgbG9jYWwgZnVu
Y3Rpb24gZHJhd192YXJpYWJsZSAodmFyaWFibGUsIGluZGVudCkKICAgIHZhcmlhYmxlX2NvdW50
ID0gdmFyaWFibGVfY291bnQgKyAxCiAgICBsb2NhbCBob3ZlcmVkID0gdmFyaWFibGUgPT0gbGFz
dF9ob3ZlcmVkX3ZhcmlhYmxlCiAgICBsb2NhbCB5X2JlZm9yZSA9IHkKICAgIGlmIHZhcmlhYmxl
LmVycm9yIHRoZW4KICAgICAgcHJpbnRfbGluZSAoJyAgJyAuLiB2YXJpYWJsZS5lcnJvciwgOCkK
ICAgIGVsc2UKICAgICAgcHJpbnRfaG9yaXpvbnRhbCAoaW5kZW50IC4uIHZhcmlhYmxlLmtleSwg
aG92ZXJlZCBhbmQgNyBvciA2KQogICAgICBwcmludF9ob3Jpem9udGFsICgnOiAnLCB2YXJpYWJs
ZSA9PSBsYXN0X2hvdmVyZWRfdmFyaWFibGUgYW5kIDcgb3IgNSkKICAgICAgcHJpbnRfbGluZSAo
c2FmZV90b3N0cmluZyh2YXJpYWJsZS52YWx1ZSkpCiAgICBlbmQKCiAgICBpZiBvdmVyX3NlY3Rp
b24gYW5kIHR5cGUgKHZhcmlhYmxlLnZhbHVlKSA9PSAndGFibGUnIHRoZW4KICAgICAgaWYgbXgg
Pj0gMCBhbmQgbXggPCBXLzIgYW5kIG15ID49IHlfYmVmb3JlIGFuZCBteSA8IHkgdGhlbgogICAg
ICAgIGhvdmVyZWRfdmFyaWFibGUgPSB2YXJpYWJsZQogICAgICBlbmQKICAgIGVuZAoKICAgIGlm
IHZhcmlhYmxlLmNvbnRlbnRzIHRoZW4KICAgICAgZm9yIF8sIHYgaW4gaXBhaXJzICh2YXJpYWJs
ZS5jb250ZW50cykgZG8KICAgICAgICBkcmF3X3ZhcmlhYmxlICh2LCBpbmRlbnQgLi4gJyAgJykK
ICAgICAgZW5kCiAgICBlbmQKICBlbmQKICBmb3IgXywgdmFyaWFibGUgaW4gaXBhaXJzICh2YXJp
YWJsZXMpIGRvCiAgICBkcmF3X3ZhcmlhYmxlICh2YXJpYWJsZSwgJyAgJykKICBlbmQKICB2YXJp
YWJsZXNfbWF4X3Njcm9sbCA9IHZhcmlhYmxlX2NvdW50IC0gKEggLSB2YXJpYWJsZXNfdG9wX3kp
IC8gZm9udF9oZWlnaHQKCiAgLS0gc291cmNlCiAgc2VjdGlvbiAoVy8yLCBILzIsIFcvMiwgSC8y
KQogIHByaW50X2xpbmUgKCdzb3VyY2Ugb2YgJyAuLiBmcmFtZS5wYXRoIC4uICc6JywgNikKICBs
b2NhbCBjb250ZXh0ID0gdXNlX3NtYWxsX2ZvbnQgYW5kIDEwIG9yIDUKICBsb2NhbCBpX21pbiA9
IG1hdGgubWF4ICgxLCBmcmFtZS5saW5lIC0gY29udGV4dCkKICBsb2NhbCBpX21heCA9IG1hdGgu
bWluICgjc291cmNlX2xpbmVzLCBmcmFtZS5saW5lICsgY29udGV4dCkKICBmb3IgaSA9IGlfbWlu
LCBpX21heCBkbwogICAgY29sb3IgKGkgPT0gZnJhbWUubGluZSBhbmQgNiBvciA1KQogICAgcHJp
bnRfaG9yaXpvbnRhbCAoc3RyaW5nLmZvcm1hdCAoJyU0ZCAnLCBpKSkKICAgIHByaW50X2xpbmUg
KHNvdXJjZV9saW5lcyBbaV0pCiAgZW5kCgogIGNsaXAgKCkKZW5kCgotLS0tIHRha2luZyBvdmVy
IGR1cmluZyBlcnJvcnMgLS0tLS0tLS0tLS0tLS0tLS0tLQoKbG9jYWwgZnVuY3Rpb24gcmVzZXQg
KCkKICAtLSBiYXNlZCBvbiByZXNldCgpIGZyb20gL3N5c3RlbS9saWIvaGVhZC5sdWEKICAtLSBz
ZWUgdGhhdCBmbiBmb3IgaW5mbwogIHdpbmRvdyB7CiAgICBjdXJzb3IgPSAxLAogICAgcmVzaXph
YmxlID0gdHJ1ZSwKICB9CiAgbm90ZSAoKQogIC0tIHBpY290cm9uIHNlZ2ZhdWx0cyBpZiB3ZSBj
YWxsIGNsaXAoKSBkdXJpbmcgaW5pdAogIGlmIGluaXRfZG9uZSB0aGVuCiAgICBjbGlwICgpCiAg
ZW5kCiAgY2FtZXJhICgpCiAgcGFsICgpCiAgcGFsdCAoKQogIG1lbXNldCAoMHg1NTFmLCAwLCA5
KQogIHBva2UgKDB4NTUwOCwgMHgzZikKICBwb2tlICgweDU1MDksIDB4M2YpCiAgcG9rZSAoMHg1
NTBhLCAweDNmKQogIHBva2UgKDB4NTUwYiwgMHgwMCkKICBjb2xvciAoNikKICBmaWxscCAoKQog
IHBva2UgKDB4NWY1NiwgMHg0MCkKICBwb2tlICgweDVmNTcsIDB4NTYpCiAgcG9rZSAoMHg0MDAw
LCBnZXQgKGZldGNoIi9zeXN0ZW0vZm9udHMvbGlsLmZvbnQiKSkKICBwb2tlICgweDU2MDAsIGdl
dCAoZmV0Y2giL3N5c3RlbS9mb250cy9wOC5mb250IikpCiAgcG9rZSAoMHg1NjA2LCBwZWVrICgw
eDU2MDApICogNCkKICBwb2tlICgweDU2MDUsIDB4MikKICBwb2tlICgweDVmMjgsIDY0KQogIHBv
a2UgKDB4NWYyOSwgNjQpCmVuZAoKbG9jYWwgZnVuY3Rpb24gb25fZXJyb3IgKHRocmVhZCwgbWVz
c2FnZSkKICAtLSBkbyB0aGlzIGZpcnN0IGluIGNhc2Ugd2UgaGl0IGFub3RoZXIgZXJyb3IKICBl
cnJvcl90cmFjZWJhY2sgPSBkZWJ1Zy50cmFjZWJhY2sgKHRocmVhZCwgbWVzc2FnZSkKICBwcmlu
dGggKGVycm9yX3RyYWNlYmFjaykKCiAgZXJyb3JfdGhyZWFkID0gdGhyZWFkCiAgZXJyb3JfbWVz
c2FnZSA9IHRvc3RyaW5nIChtZXNzYWdlKQogIHJlc2V0ICgpCiAgcmVidWlsZCAoKQogIC0tIGp1
bXAgdG8gdGhlIHByb3BlciBzdGFjayBmcmFtZSBpZiB3ZSBjYW4KICBsb2NhbCBsb2NfcGF0aCwg
bG9jX2xpbmUgPSBwYXJzZV9tZXNzYWdlX2Zvcl9sb2NhdGlvbiAoZXJyb3JfbWVzc2FnZSkKICBm
b3IgaSwgZnJhbWUgaW4gaXBhaXJzIChzdGFja19mcmFtZXMpIGRvCiAgICBpZiBmcmFtZS5wYXRo
ID09IGxvY19wYXRoIGFuZCBmcmFtZS5saW5lID09IGxvY19saW5lIHRoZW4KICAgICAgY3VycmVu
dF9zdGFja19pbmRleCA9IGkKICAgICAgcmVidWlsZCAoKQogICAgICBicmVhawogICAgZW5kCiAg
ZW5kCmVuZAoKLS0tLSBpbnN0YWxsIG1haW4gZXZlbnRzIHRoYXQgY2F0Y2ggZXJyb3JzIC0tLS0t
LS0KCmxvY2FsIHVzZXJfaW5pdCA9IHJhd2dldCAoX0csICdfaW5pdCcpCmxvY2FsIHVzZXJfdXBk
YXRlID0gcmF3Z2V0IChfRywgJ191cGRhdGUnKQpsb2NhbCB1c2VyX2RyYXcgPSByYXdnZXQgKF9H
LCAnX2RyYXcnKQoKYXNzZXJ0ICh1c2VyX2RyYXcgYW5kIHVzZXJfdXBkYXRlLAogICdwbGVhc2Ug
aW5jbHVkZSBlcnJvcl9leHBsb3JlciBhZnRlciBkZWZpbmluZyBib3RoIF91cGRhdGUgYW5kIF9k
cmF3JykKCmlmIG5vdCByYXdnZXQgKF9HLCAnZGVidWcnKSBvciBub3QgZGVidWcudHJhY2ViYWNr
IG9yIG5vdCBkZWJ1Zy5nZXRpbmZvIHRoZW4KICBwcmludGggJ2Vycm9yIGV4cGxvcmVyOiBkZWJ1
ZyBtb2R1bGUgbm90IGF2YWlsYWJsZSwgZXJyb3IgZXhwbG9yZXIgd2lsbCBiZSBkaXNhYmxlZCcK
ICByZXR1cm4KZW5kCgpsb2NhbCBmdW5jdGlvbiBjYWxsX2Vycm9yX2V2ZW50IChmbiwgLi4uKQog
IC0tIGlmIHRoZXJlJ3MgYW4gZXJyb3IgaW4gb3VyIHVwZGF0ZSBvciBkcmF3LCB0aHJvdyB0aGUK
ICAtLSBvcmlnaW5hbCBlcnJvciBhcyB3ZWxsIGFzIHRoZSBuZXcgZXJyb3IKICBsb2NhbCBzdWNj
ZXNzLCBlcnIgPSBwY2FsbCAoZm4sIC4uLikKICBpZiBub3Qgc3VjY2VzcyB0aGVuCiAgICBlcnJv
ciAoZXJyb3JfdHJhY2ViYWNrIC4uICdcblxuZXJyb3IgZHVyaW5nIGVycm9yIGhhbmRsaW5nOiAn
IC4uIHRvc3RyaW5nIChlcnIpKQogIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIGNhbGxfcHJvdGVj
dGVkIChmbikKICAtLSBuZWVkIHRvIHVzZSBjb3Jlc3VtZSBldGMuIGFuZCBub3QgY29yb3V0aW5l
LnJlc3VtZSBldGMuCiAgLS0gZm9yIHBpY290cm9uIGNvbXBhdGliaWxpdHkKICBsb2NhbCB0aHJl
YWQgPSBjb2NyZWF0ZSAoZm4pCiAgbG9jYWwgc3VjY2VzcywgbWVzc2FnZSA9IGNvcmVzdW1lKHRo
cmVhZCkKICB3aGlsZSBjb3N0YXR1cyAodGhyZWFkKSB_PSAnZGVhZCcgZG8KICAgIHlpZWxkICgp
CiAgICBzdWNjZXNzLCBtZXNzYWdlID0gY29yZXN1bWUgKHRocmVhZCkKICBlbmQKICBpZiBub3Qg
c3VjY2VzcyB0aGVuCiAgICBjYWxsX2Vycm9yX2V2ZW50IChvbl9lcnJvciwgdGhyZWFkLCBtZXNz
YWdlKQogIGVuZAplbmQKCmlmIHVzZXJfaW5pdCB0aGVuCiAgZnVuY3Rpb24gX2luaXQgKCkKICAg
IGNhbGxfcHJvdGVjdGVkICh1c2VyX2luaXQpCiAgICBpbml0X2RvbmUgPSB0cnVlCiAgZW5kCmVs
c2UKICBpbml0X2RvbmUgPSB0cnVlCmVuZAoKZnVuY3Rpb24gX3VwZGF0ZSAoKQogIGlmIGVycm9y
X3RocmVhZCB0aGVuCiAgICBjYWxsX2Vycm9yX2V2ZW50IChlcnJvcl91cGRhdGUpCiAgZWxzZQog
ICAgY2FsbF9wcm90ZWN0ZWQgKHVzZXJfdXBkYXRlKQogIGVuZAplbmQKCmZ1bmN0aW9uIF9kcmF3
ICgpCiAgaWYgZXJyb3JfdGhyZWFkIHRoZW4KICAgIGNhbGxfZXJyb3JfZXZlbnQgKGVycm9yX2Ry
YXcpCiAgZWxzZQogICAgY2FsbF9wcm90ZWN0ZWQgKHVzZXJfZHJhdykKICBlbmQKZW5k
:: free_part.lua
--[[pod_format="raw",created="2025-05-19 18:14:49",modified="2025-05-20 17:53:00",revision=433]]
function new_free_part(position,part)
	return{
		_position=position,
		_speed=new_point(0,0),
		part=part,
		init=function(self)
			self.part._position=self._position
			self.part:init()
			self._speed=	self._speed:randomize(new_point(-0.1,1))
		end,
		update=function(self)  			
			self._position+=self._speed --apply velocity
			self.part._position=self._position
			if(is_point_on_screen(self._position)==false) then
				self:kill()
			end	
		
		end,
		draw=function(self)	 	 	
	    	self.part:draw()
		end,
		kill=function(self)
			del(game.free_parts,self) --fix
		end
	}
end

:: game.lua
--[[pod_format="raw",created="2025-05-19 15:03:03",modified="2025-05-31 03:43:08",revision=1890]]
function new_game()
	return{
		_actions = {},
		_ship,
		free_parts={},
		asteroids={},
		pirates={},
		bullets={},
		particle_systems={},
		--_part_spawner,
		--_asteroid_spawner,
		_director=nil,
		_light_road,
		--score=0,
		
		init=function(self)
--			self._actions = {}
			self._ship=new_ship(new_point(480/2,270/2+30))
			self._light_road= new_lightroad()
			self._director=new_director()
			self._director:init()	
		
			self.sprites1=fetch("./gfx/0.gfx")	
			self._ship:init()	
			music(0,0,0x1|0x2|0x4|0x8)
		end,
		update=function(self)
			camera_helper:update_camera()
			self._light_road:update()
			self._ship:update()
			
			foreach(self.particle_systems, function(particle_system)
    			particle_system:update()
 	 		end)	
		
			foreach(self.free_parts, function(part)
	    		part:update()
	 	 	end)
	 	 	foreach(self.asteroids, function(asteroid)
	    		asteroid:update()
	 	 	end)
	 	 	foreach(self.pirates, function(pirate)
	    		pirate:update()
	 	 	end)
	 	 	foreach(self.bullets, function(bullet)
	    		bullet:update()
	 	 	end)
			self._director:update()
		 	foreach(self._actions, function(action)
			   if costatus(action) then
			      coresume(action)
			   else
			      del(self.actions,action)
				end
			end)
	 		
		end,
		draw=function(self)
			cls()
			self._light_road:draw()
			foreach(self.particle_systems, function(particle_system)
   	 		particle_system:draw()
	 	 	end)
			foreach(self.free_parts, function(part)
	    		part:draw()
	 	 	end)
	 	 	foreach(self.asteroids, function(asteroid)
	    		asteroid:draw()
	 	 	end)
	 	 	foreach(self.pirates, function(pirate)
	    		pirate:draw()
	 	 	end)
	 	 	foreach(self.bullets, function(bullet)
	    		bullet:draw()
	 	 	end)
			self._ship:draw()
			self._director:draw()
			print_right("$"..self._ship.worth,12,10)
		
		end,
		addAction=function(self,action)
			add(self._actions,cocreate(action)) 
		end,
		death=function(self)
			self:addAction(function()
				for i=1,60*2 do
					yield()
				end
				gameover()
			end)
		end,
		win=function(self)
			win(self._ship.worth)
		end		
				
	}
end
:: game_over.lua
--[[pod_format="raw",created="2025-05-20 16:43:55",modified="2025-05-27 21:04:30",revision=425]]
function new_gameover()
	return{
	timer,
	wait_time=3,
	init=function(self)
		self.timer=time()
		camera_helper:set_camera(new_point(0,0),true)
		stop_sfx()
	end,
	update=function(self)
		camera_helper:update_camera()
		if(self.timer+self.wait_time<time()) then
		 restart()
		end

	end,
	draw=function(self)
		cls()
		print_centered("Game Over",110,8)
	end}	
end
function new_win(score)
	return{
	timer,
	wait_time=3,
	score=score,
	init=function(self)
		self.timer=time()
		camera_helper:set_camera(new_point(0,0),true)
		stop_sfx()
	end,
	update=function(self)
		camera_helper:update_camera()
		if(self.timer+self.wait_time<time()) then
		 restart()
		end

	end,
	draw=function(self)
		cls()
		print_centered(self.score .. " credits worth hauled",110,10)
	end}	
end
:: help.lua
--[[pod_format="raw",created="2025-05-24 18:42:03",modified="2025-05-31 00:15:37",revision=312]]
function new_help()
	return{
	sprites,
	init=function(self)
		camera_helper:set_camera(new_point(0,0),true)
		self.sprites=	fetch("./gfx/0.gfx")	
	end,
	update=function(self)
		camera_helper:update_camera()
		if(btnp()>0) then
		  next_screen()
		end

	end,
	draw=function(self)
		cls()
		print_centered("Use \131 \139 \145 \148 to control"
		,10,7)
		spr(self.sprites[1].bmp,310,5)

		spr(self.sprites[2].bmp,10,25)
		print("Move Faster",30,30)
		
		spr(self.sprites[3].bmp,10,45)
		print("Shoot stuff down",30,50)	
	
		spr(self.sprites[4].bmp,10,65)
		print("Immune to small damage",30,70)
		
		spr(self.sprites[5].bmp,10,85)
		print("Shield your ship",30,90)
		
		spr(self.sprites[12].bmp,10,105)
		print("Easy connections",30,110)

		spr(self.sprites[65].bmp,240,25)
		print("Only hurts open connectots",260,30)
		
		spr(self.sprites[64].bmp,240,45)
		print("Can be shot down",260,50)
		
		spr(self.sprites[9].bmp,240,65)
		print("Common cargo !fragile!",260,70)
		
		spr(self.sprites[10].bmp,240,85)
		print("Rare cargo !heavy!",260,90)
		
		spr(self.sprites[11].bmp,240,105)
		print("Volatile cargo !danger!",260,110)
				
	end}
	
end
:: helpers.lua
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNS0wNS0xOSAxNToxMzo1MyIsbW9k
aWZpZWQ9IjIwMjUtMDUtMzEgMDM6NDM6MDgiLHJldmlzaW9uPTExMTFdXQpmdW5jdGlvbiBzbShh
KQoJcmV0dXJuIHNldG1ldGF0YWJsZShhLGEpCmVuZApmdW5jdGlvbiByYW5kb20obikKCWlmKG4_
MCkgdGhlbiAKCQlyZXR1cm4gcm5kKCkqbgoJZWxzZQoJCXJldHVybiAtbitybmQoKSpuKjIgCgll
bmQKZW5kCmZ1bmN0aW9uIHBpY2tfcmFuZG9tKGFycikKCWlmIGFycj09bmlsbCB0aGVuIHJldHVy
biBuaWwgZW5kCglpZiAjYXJyID09IDAgdGhlbiByZXR1cm4gbmlsIGVuZAoJcmV0dXJuIGFycltm
bHIocm5kKCNhcnIpKSArIDFdCmVuZApmdW5jdGlvbiBibG9ja19jb2xsaXNpb24ocG9pbnRBLCBz
aXplQSwgcG9pbnRCLCBzaXplQikKCWxvY2FsIGF4MSwgYXkxID0gcG9pbnRBLngsIHBvaW50QS55
Cglsb2NhbCBheDIsIGF5MiA9IGF4MSArIHNpemVBLngsIGF5MSArIHNpemVBLnkKCglsb2NhbCBi
eDEsIGJ5MSA9IHBvaW50Qi54LCBwb2ludEIueQoJbG9jYWwgYngyLCBieTIgPSBieDEgKyBzaXpl
Qi54LCBieTEgKyBzaXplQi55CgoJaWYgYXgxIDwgYngyIGFuZCBheDIgPiBieDEgYW5kIGF5MSA8
IGJ5MiBhbmQgYXkyID4gYnkxIHRoZW4KCQlyZXR1cm4gcG9pbnRBLXBvaW50QgoJZW5kCgoJcmV0
dXJuIG5pbAplbmQKZnVuY3Rpb24gY2FyZGluYWxfZGlyZWN0aW9uKHYsIHRocmVzaG9sZCkKCXRo
cmVzaG9sZCA9IHRocmVzaG9sZCBvciAxICAtLSBtaW5pbXVtIGRpZmZlcmVuY2UgYmV0d2VlbiBh
eGVzCgoJbG9jYWwgYWJzX3ggPSBhYnModi54KQoJbG9jYWwgYWJzX3kgPSBhYnModi55KQoJaWYg
YWJzX3ggPiBhYnNfeSArIHRocmVzaG9sZCB0aGVuCgkJcmV0dXJuIG5ld19wb2ludChzaWduKHYu
eCksIDApCgllbHNlaWYgYWJzX3kgPiBhYnNfeCArIHRocmVzaG9sZCB0aGVuCgkJcmV0dXJuIG5l
d19wb2ludCgwLCBzaWduKHYueSkpCgllbHNlCgkJcmV0dXJuIG5pbCAgLS0gdG9vIGRpYWdvbmFs
LCBkb24ndCBhdHRhY2gKCWVuZAplbmQKZnVuY3Rpb24gc2lnbihuKQoJaWYgbiA_IDAgdGhlbiBy
ZXR1cm4gMQoJZWxzZWlmIG4gPCAwIHRoZW4gcmV0dXJuIC0xCgllbHNlIHJldHVybiAwCgllbmQK
ZW5kCmZ1bmN0aW9uIGdldF9zdHJpbmdfd2lkdGgocykKCWxvY2FsIHdpZHRoPXByaW50KHMsLTEw
MDAsMCkKCXByaW50KCIiLDAsMCkKCXJldHVybiB3aWR0aCsxMDAwCmVuZApmdW5jdGlvbiBwcmlu
dF9jZW50ZXJlZCh0ZXh0LCB5LCBjb2wpCgljb2wgPSBjb2wgb3IgY29sb3JzLndoaXRlCglsb2Nh
bCB0ZXh0X3dpZHRoID1nZXRfc3RyaW5nX3dpZHRoKHRleHQpCglsb2NhbCB4ID0gKHNjcmVlbldp
ZHRoIC0gdGV4dF93aWR0aCkgXCAyCglwcmludCh0ZXh0LHgrY2FtZXJhX2hlbHBlcjpnZXRfY2Ft
ZXJhKCkueCwgeStjYW1lcmFfaGVscGVyOmdldF9jYW1lcmEoKS55LCBjb2wpCmVuZApmdW5jdGlv
biBwcmludF9yaWdodCh0ZXh0LCB5LCBjb2wpCgljb2wgPSBjb2wgb3IgIGNvbG9ycy53aGl0ZQoJ
bG9jYWwgdGV4dF93aWR0aCA9Z2V0X3N0cmluZ193aWR0aCh0ZXh0KQoJbG9jYWwgeCA9IHNjcmVl
bldpZHRoIC0gdGV4dF93aWR0aAoJcHJpbnQodGV4dCwgeCtjYW1lcmFfaGVscGVyOmdldF9jYW1l
cmEoKS54LCB5LCBjb2wpCmVuZApmdW5jdGlvbiBpc19wb2ludF9vbl9zY3JlZW4ocG9pbnQpCgkK
CWxvY2FsIGNhbWVyYV9wb3M9Y2FtZXJhX2hlbHBlcjpnZXRfY2FtZXJhKCkKCQoJcmV0dXJuICgK
CQlwb2ludC54ID49IGNhbWVyYV9wb3MueCAtIHRpbGVTaXplIGFuZCBwb2ludC54IDwgY2FtZXJh
X3Bvcy54ICsgc2NyZWVuV2lkdGggYW5kCgkJcG9pbnQueSA_PSBjYW1lcmFfcG9zLnkgLSB0aWxl
U2l6ZSBhbmQgcG9pbnQueSA8IGNhbWVyYV9wb3MueSArIHNjcmVlbkhlaWdodAoJKQplbmQKY29s
b3JzID0gewoJYmxhY2sgICAgICAgID0gMCwKCWRhcmtfYmx1ZSAgICA9IDEsCglkYXJrX3B1cnBs
ZSAgPSAyLAoJZGFya19ncmVlbiAgID0gMywKCWJyb3duICAgICAgICA9IDQsCglkYXJrX2dyYXkg
ICAgPSA1LAoJbGlnaHRfZ3JheSAgID0gNiwKCXdoaXRlICAgICAgICA9IDcsCglyZWQgICAgICAg
ICAgPSA4LAoJb3JhbmdlICAgICAgID0gOSwKCXllbGxvdyAgICAgICA9IDEwLAoJZ3JlZW4gICAg
ICAgID0gMTEsCglibHVlICAgICAgICAgPSAxMiwKCWluZGlnbyAgICAgICA9IDEzLAoJcGluayAg
ICAgICAgID0gMTQsCglwZWFjaCAgICAgICAgPSAxNSwKCgktLSBFeHRlbmRlZCBjb2xvcnMgKDE2
4oCTNjMpIG1heSB2YXJ5IGJ5IHBhbGV0dGUgc2V0dXAsIGJ1dCBoZXJlJ3MgYSB1c2VmdWwgZGVm
YXVsdCBzZXQ6Cglyb3NlICAgICAgICAgPSAxNiwKCXNhbG1vbiAgICAgICA9IDE3LAoJYmVpZ2Ug
ICAgICAgID0gMTgsCglsaWdodF95ZWxsb3cgPSAxOSwKCWxpZ2h0X2dyZWVuICA9IDIwLAoJc2Vh
Zm9hbSAgICAgID0gMjEsCglza3lfYmx1ZSAgICAgPSAyMiwKCXBlcml3aW5rbGUgICA9IDIzLAoJ
bGF2ZW5kZXIgICAgID0gMjQsCglsaWdodF9waW5rICAgPSAyNSwKCWRhcmtfYnJvd24gPTI4Cgkt
LSAuLi55b3UgY2FuIGNvbnRpbnVlIGFkZGluZyBhcyBuZWVkZWQKfQpuZXdfdGltZXI9ZnVuY3Rp
b24oc3Bhd25fcmF0ZSxzdGFydCxhY3Rpb24pCglyZXR1cm57CglzcGF3bl9yYXRlPXNwYXduX3Jh
dGUsCgl0aW1lcj1zdGFydCwKCWFjdGlvbj1hY3Rpb24sCgl1cGRhdGU9ZnVuY3Rpb24oc2VsZixv
dGhlcikKCQlpZihzZWxmLnNwYXduX3JhdGU9PTApIHRoZW4KCQkJcmV0dXJuCgkJZWxzZWlmKHNl
bGYuc3Bhd25fcmF0ZT4xKQl0aGVuCQoJCQlpZihzZWxmLnRpbWVyPnNlbGYuc3Bhd25fcmF0ZSkg
dGhlbgoJCQkJc2VsZi5hY3Rpb24ob3RoZXIpCgkJCQlzZWxmLnRpbWVyPTAKCQkJZWxzZQoJCQkJ
c2VsZi50aW1lcis9MQoJCQllbmQKCQllbHNlCgkJCWZvciBpPTEsMS9zZWxmLnNwYXduX3JhdGUs
MSBkbwoJCQkJc2VsZi5hY3Rpb24ob3RoZXIpCgkJCWVuZAoJCWVuZAoJZW5kCgl9CmVuZAoKZnVu
Y3Rpb24gcmFuZG9tX29mZnNjcmVlbl9wb2ludCgpCglsb2NhbCBzaWRlID0gZmxyKHJuZCg0KSkg
IC0tIHBpY2sgYSByYW5kb20gc2lkZTogMD10b3AsIDE9Ym90dG9tLCAyPWxlZnQsIDM9cmlnaHQK
CWlmIHNpZGUgPT0gMCB0aGVuCgkJLS0gVG9wOiB5ID0gLXRpbGVTaXplCgkJcmV0dXJuIG5ld19w
b2ludChmbHIocm5kKHNjcmVlbldpZHRoIC8gdGlsZVNpemUpKSAqIHRpbGVTaXplLCAtdGlsZVNp
emUpCgllbHNlaWYgc2lkZSA9PSAxIHRoZW4KCQktLSBCb3R0b206IHkgPSBzY3JlZW5IZWlnaHQK
CQlyZXR1cm4gbmV3X3BvaW50KGZscihybmQoc2NyZWVuV2lkdGggLyB0aWxlU2l6ZSkpICogdGls
ZVNpemUsIHNjcmVlbkhlaWdodCkKCWVsc2VpZiBzaWRlID09IDIgdGhlbgoJCS0tIExlZnQ6IHgg
PSAtdGlsZVNpemUKCQlyZXR1cm4gbmV3X3BvaW50KC10aWxlU2l6ZSwgZmxyKHJuZChzY3JlZW5I
ZWlnaHQgLyB0aWxlU2l6ZSkpICogdGlsZVNpemUpCgllbHNlCgkJLS0gUmlnaHQ6IHggPSBzY3Jl
ZW5XaWR0aAoJCXJldHVybiBuZXdfcG9pbnQoc2NyZWVuV2lkdGgsIGZscihybmQoc2NyZWVuSGVp
Z2h0IC8gdGlsZVNpemUpKSAqIHRpbGVTaXplKQoJZW5kCmVuZApmdW5jdGlvbiByYW5kb21fb25z
Y3JlZW5fcG9pbnQoKQoJbG9jYWwgeCA9IGZscihybmQoc2NyZWVuV2lkdGgpKSAKCWxvY2FsIHkg
PSBmbHIocm5kKHNjcmVlbkhlaWdodCkpCglyZXR1cm4gbmV3X3BvaW50KHgsIHkpCmVuZA==
:: include.lua
--[[pod_format="raw",created="2025-05-19 15:00:08",modified="2025-05-31 00:15:37",revision=1137]]
include "lib.lua"
include "point.lua"
include "helpers.lua"
include "sfx.lua"
include "camera.lua"
include "particle_system.lua"
include "parts.lua"
include "input.lua"
include "ship.lua"
include "free_part.lua"
include "part_spawner.lua"
include "asteroid_spawner.lua"
include "asteroid.lua"
include "pirate.lua"
include "lightroad.lua"
include "start.lua"
include "game.lua"
include "director.lua"
include "help.lua"
include "game_over.lua"
:: input.lua
--[[pod_format="raw",created="2025-05-19 16:29:01",modified="2025-05-19 18:10:29",revision=48]]
input_lookup = {
	-- Define logical mappings for clarity
	lpad = {
		left = 0,
		right = 1,
		up = 2,
		down = 3
	},
	rpad = {
		left = 8,
		right = 9,
		up = 10,
		down = 11
	},
	buttons = {
		o = 4,
		x = 5,
		menu=6,
		a = 12,
		b = 13
	}
}
function new_input(player)
	return {
	player=player or 0,
	_button_down_frame = {},
button=function(self, b, hold)
	local now = t()
	if type(b) ~= "table" then
		b = {b}
	end
	local key = join_with_dashes(b)

	if all_buttons_pressed(b, self.player) then
		local start = self._button_down_frame[key]
		if not start then
			self._button_down_frame[key] = now
			return 1  -- just pressed
		end

		local held = now - start 

		if hold then
			if held >= hold then
				if held >= hold + 0.1 then  -- small extra time past charge (you can adjust)
					return 4  -- overheld
				else
					return 3  -- finished charging
				end
			else
				return 2  -- still holding
			end
		else
			return held  -- legacy: how long held (seconds)
		end
	else
		self._button_down_frame[key] = nil
		return nil
	end
end,
		button_press=function(self,b)
			return btnp(b,self.player)
		end
	}
end
function join_with_dashes(arr)
	local result = ""
	for i = 1, #arr do
		result ..= arr[i]
		if i < #arr then
			result ..= "-"
		end
	end
	return result
end
function all_buttons_pressed(buttons, player)
	player = player or 0  -- default to player 0 if not specified
	for i = 1, #buttons do
		if not btn(buttons[i], player) then
			return false
		end
	end
	return true
end
:: lib.lua
--[[pod_format="raw",created="2025-05-19 15:05:26",modified="2025-05-19 15:05:47",revision=3]]
--lib

-- pq-debugging, by pancelor

-- quotes all args and prints to host console
-- usage:
--   pq("handles nils", many_vars, {tables=1, work=11, too=111})
function pq(...)
  printh(qq(...))
  return ...
end

-- quotes all arguments into a string
-- usage:
--   ?qq("p.x=",x,"p.y=",y)
function qq(...)
  local args=pack(...)
  local s=""
  for i=1,args.n do
    s..=quote(args[i]).." "
  end
  return s
end

-- quote a single thing
-- like tostr() but for tables
-- don't call this directly; call pq or qq instead
function quote(t, depth)
  depth=depth or 4 --avoid inf loop
  if type(t)~="table" or depth<=0 then return tostr(t) end

  local s="{"
  for k,v in pairs(t) do
    s..=tostr(k).."="..quote(v,depth-1)..","
  end
  return s.."}"
end

-- like sprintf (from c)
-- usage:
--   ?qf("%/% is %%",3,8,3/8*100,"%")
function qf(fmt,...)
  local parts,args=split(fmt,"%"),pack(...)
  local str=deli(parts,1)
  for ix,pt in ipairs(parts) do
    str..=quote(args[ix])..pt
  end
  if args.n~=#parts then
    -- uh oh! mismatched arg count
    str..="(extraqf:"..(args.n-#parts)..")"
  end
  return str
end
function pqf(...) printh(qf(...)) end
:: lightroad.lua
--[[pod_format="raw",created="2025-05-20 20:49:16",modified="2025-05-29 19:06:59",revision=684]]
new_lightroad=function()
	return{
		beam_timer=new_timer(0,0,function(obj)
			local beam=new_beam(obj)
			beam.position= new_point(obj.left+random(obj.right-obj.left),-16)
			beam.color=pick_random(obj.beam_colors)
			beam.speed=new_point(0,random(10)+5)
			beam.size=random(200)
			add(obj.decorations,beam)	
		end	
		),
		star_timer=new_timer(2,0,function(obj)
			local star=new_star(obj)
			local size=random(2)
			star.position= new_point(obj.left+random(obj.right-obj.left),-16)
			star.color=obj.star_colors[3-flr(size)]
			star.speed=new_point(0,size+2)
			star.size=0
			add(obj.decorations,star)	
		end	
		),
		--spawn_rate=0,
		--timer=0,
		left=0,
		right=480,
		decorations={},
		--colors={2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30},
		beam_colors={20,4,21,2,23,1,18,19},
		star_colors={7,6,5},
		update=function(self)
			self.beam_timer:update(self)
			self.star_timer:update(self)

			foreach(self.decorations, function(deco)
	    		deco:update()
	 	 	end)
		end,
		draw=function(self)
			foreach(self.decorations, function(deco)
	    		deco:draw()
	 	 	end)
		end,

		
}
end

new_decoration=function(parent)
	return{
		_parent=parent,
		position=new_point(0,0),
		speed=new_point(0,0),
		size=1,		
		color=2,
		update=function(self)
			self.position+=self.speed
		end,
		draw=function(self)
		end,
		kill = function(self)
			del(self._parent.decorations,self)
		end
}
end

new_beam=function(parent)
	local ret = new_decoration(parent)
	ret.baseupdate=ret.update
	ret.update=function(self)
		ret:baseupdate()
		if(is_point_on_screen(self.position+new_point(0,-self.size/2))==false	and is_point_on_screen(self.position+new_point(0,self.size/2))==false	) then 
			self:kill()
		end
	end
	ret.draw=function(self)
		line(self.position.x,self.position.y-self.size/2,self.position.x,self.position.y+self.size/2,self.color)
	end
	return ret
end
new_star=function(parent)
	local ret = new_decoration(parent)
	ret.baseupdate=ret.update
	ret.update=function(self)
		ret:baseupdate()
		if(is_point_on_screen(self.position)==false) then 
			self:kill()
		end
	end
	ret.draw=function(self)
		circfill(self.position.x,self.position.y,self.size,self.color)
	end
	return ret
end

:: main.lua
--[[pod_format="raw",created="2025-05-19 14:05:35",modified="2025-05-31 03:43:08",revision=1150]]
include "include.lua"
tileSize=16
halfTileSize=tileSize/2
screenWidth=480 --30 tiles
screenHeight=270 --16+ tiles
screenHeightTileAdjusted=256 
mode=1
input=new_input(0)
game=new_game()
modes= {new_start(), new_help(),game,new_gameover(),new_win()}

function next_screen()
	mode+=1
	modes[mode]:init()
end
function	restart()
	pq("----------------restart-----------------")
	game=new_game()
	modes[3]=game
	game:init()
	mode=1
	modes[mode]:init()
end

function	gameover()
	mode=4
	modes[mode]:init()
end
function	win(score)
	modes[5]=new_win(score)
	mode=5
	modes[mode]:init()
end
function _init()	
	pq("----------------start-----------------")
	modes[mode]:init()
end

function _update()
	modes[mode]:update()
end

function _draw()
	modes[mode]:draw()
end


include "error_explorer.lua"
:: particle_system.lua
--[[pod_format="raw",created="2025-05-25 03:10:34",modified="2025-05-26 01:13:00",revision=43]]
function new_particle_system()
	return{
		sprites =game.sprites1,
		particles={},
		age=0,
		lifetime=60,
		spawn_rate=0.25; 
		particle_animation={},
		particle_flipx_r=false,
		particle_flipy_r=false,
		particle_lifetime=60,
		particle_halflife=1,
		position=new_point(0,0),
		particle_radial=false,
		particle_position_r=new_point(0,0),
		particle_speed=new_point(0,0),
		particle_speed_r=new_point(0,0),
		particle_acceleration=new_point(0,0),
		particle_acceleration_r=new_point(0,0),
		particle_update=nil, --leave nil for default behavior
		init=function(self)
			
		end,
		update=function(self)
			foreach(self.particles, function(particle)
    			particle:update()
 	 		end)
 	 		if( self.age>self.lifetime) then
 	 			if(#self.particles==0) then
 	 		 		self:die(game.particle_systems)
 	 		 	end
 	 		 	return
 	 		end
			if(self.spawn_rate>1) then
				for i=1,self.spawn_rate,1 do
					self:spawn()
				end
			else
				local inverse=1/self.spawn_rate
				if(self.age%inverse==0) then
					self:spawn()
				end
			end	
			self.age+=1
		end,
		draw=function(self)
			foreach(self.particles, function(particle)
    			particle:draw()
 	 		end)
		end,
		die=function(self,particle_system_container)
			del(particle_system_container,self)
		end,
		spawn=function(self)
			local particle=new_particle()
			particle.animation=self.particle_animation
			particle.lifetime=self.particle_lifetime
			particle.halflife=self.particle_halflife
			particle.position=self.position:randomize(self.particle_position_r)
			local speed=self.particle_speed:randomize(self.particle_speed_r)
			if(self.particle_radial) then
				speed=speed:square_to_circle()
			end
			particle.speed=	speed
			local acceleration=self.particle_acceleration:randomize(self.particle_acceleration_r)
			if(self.particle_radial) then
				acceleration=acceleration:square_to_circle()
			end	
			particle.acceleration=acceleration
		
			particle.particle_container=self.particles
			if(self.particle_flipx_r) then
				particle.flipx=rnd()>0.5
			end
			if(self.particle_flipy_r) then
				particle.flipy=rnd()>0.5
			end				
			particle.update=self.particle_update or particle.update
			add(self.particles,particle)
		end
	}
end
function new_particle()
	return{
		sprites =game.sprites1,
		particle_container,
		animation={},
		age=0,
		lifetime=60,
		halflife=1,
		position=new_point(0,0),
		speed=new_point(0,0),
		acceleration=new_point(0,0),
		flipx=false,
		flipy=false,
		init=function(self)
			
		end,
		update=function(self)
			self.position+=self.speed
			self.speed+=self.acceleration
			self.age+=1
		 		if(self.lifetime>=0 and self.age>self.lifetime) then
		 			self:die(self.particle_container)
		 		end
		 		if(rnd()>self.halflife) then
			 		self:die(self.particle_container)
		 		end
		end,
		draw=function(self)			
			spr(self.sprites[self.animation[self.age%#self.animation+1 ]].bmp,self.position.x,self.position.y,self.flipx,self.flipy)
		end,
		die=function(self,sprites)
			del(sprites,self)
		end
	}
end
	

:: parts.lua
--[[pod_format="raw",created="2025-05-19 15:12:11",modified="2025-05-31 03:43:08",revision=1750]]
function new_part(position)
	return{
		_position=position,
		_sprite=0,
		_sprites,
		name="dummy",
		attach_sides = {
			["1,0"] = true,   -- right
			["-1,0"] = true, -- left
			["0,-1"] = true,  -- up
			["0,1"] = true   -- down
		},
		mass=1,
		thrust=0,
		worth=1,
		fragile=false,
		_energy=0,
		_energy_max=0,
		_energy_regen=0,

		location=nil,
		init=function(self)
			self._sprites=game.sprites1
		end,
		can_use=function(self)
			return self._energy_max>0 and self._energy>=self._energy_max
		end,
		can_regen=function(self)
			return true
		end,
		update=function(self)		
			if(self:can_regen()) then
				self._energy=min(	self._energy+self._energy_regen,self._energy_max)
			end
		end,
		draw=function(self)
			if(self:can_use()==false)then
				pal(11,19)
			end
			spr(self._sprites[self._sprite].bmp,self._position.x,self._position.y)
			pal()
			local acc=game._ship.acceleration:length()
			if(self.location!=nil and self.thrust>0 and acc>0 ) then			
				local particle_system= new_particle_system()
	 			particle_system.spawn_rate=self.thrust*4
				particle_system.lifetime=.25
				particle_system.position=self._position+new_point(0,8)
				--particle_system.particle_position_r=new_point(-8,-16)
				particle_system.particle_speed=(game._ship.acceleration*-3*self.thrust)
				particle_system.particle_speed_r=new_point(.1,.1)
				particle_system.particle_halflife=0.95
				particle_system.particle_animation={58,59}
				particle_system.particle_flipx_r=true
				particle_system.particle_flipy_r=true
				add(game.particle_systems,particle_system)
			end
			
		end,
		set_position=function(self,position)
			self._position=position+self.location*16
		end,
		kill=function(self)
			camera_helper:shake_camera(5, 30 )
			for i=1,#game._ship.parts do
				local part=game._ship.parts[i]
				if(part.defend!=nil) then
					if(part:defend(self)) then
						return false
					end
				end
			end		
			del(game._ship.parts,self) --fix
			
 			local particle_system= new_particle_system()
 			particle_system.spawn_rate=1
			particle_system.lifetime=10
			particle_system.position=self._position:round(tileSize)
			particle_system.particle_position_r=new_point(-8,-8)
			particle_system.particle_speed_r=new_point(-.5,-.5)
			particle_system.particle_halflife=0.99
			particle_system.particle_animation={57}
			particle_system.particle_flipx_r=true
			particle_system.particle_flipy_r=true
			add(game.particle_systems,particle_system)
		  	
			return true
		end
	}
end
function new_part_command(position)
	local ret = new_part(position)
	ret._sprite=1
	ret.thrust=.25
	ret.name="command"
	ret.worth=0
	ret.basekill=ret.kill
	ret.kill=function(self)
		if(self:basekill()) then
			game:death()
		end
	end
	return ret	
end
function new_part_engine(position)
	local ret = new_part(position)
	ret._sprite=2
	ret.thrust=1	
	ret.name="engine"
	ret.attach_sides = {
		["1,0"] = false,   -- right
		["-1,0"] = false, -- left
		["0,-1"] = true,  -- up
		["0,1"] = false   -- down
	}
	return ret	
end
function new_part_bulkhead(position)
	local ret = new_part(position)
	ret._sprite=4
	ret.mass=2
	ret.name="bulkhead"
	ret.attach_sides = {
			["1,0"] = false,   -- right
			["-1,0"] = false, -- left
			["0,-1"] = false,  -- up
			["0,1"] = false   -- down
		}
	return ret	
end
function new_part_scaffold(position)
	local ret = new_part(position)
	ret._sprite=12
	ret.name="scaffold"
	return ret	
end
function new_part_cargo1(position)
	local ret = new_part(position)
	ret._sprite=9
	ret.mass=2
	ret.worth=2
	ret.name="treasure"
	ret.fragile=true
	ret.attach_sides = {
			["1,0"] = false,   -- right
			["-1,0"] = false, -- left
			["0,-1"] = false,  -- up
			["0,1"] = false   -- down
		}
	return ret	
end
function new_part_cargo2(position)
	local ret = new_part(position)
	ret._sprite=10
	ret.mass=3
	ret.worth=3
	ret.name="treasure"
	ret.fragile=true
	ret.attach_sides = {
			["1,0"] = false,   -- right
			["-1,0"] = false, -- left
			["0,-1"] = false,  -- up
			["0,1"] = false   -- down
		}
	return ret	
end
function new_part_cargo3(position)
	local ret = new_part(position)
	ret._sprite=11
	ret.mass=1
	ret.worth=5
	ret.name="treasure"
	ret.fragile=true
	ret.basekill=ret.kill
	ret.attach_sides = {
			["1,0"] = false,   -- right
			["-1,0"] = false, -- left
			["0,-1"] = false,  -- up
			["0,1"] = false   -- down
		}
	ret.kill=function(self)
		if(self:basekill()) then
			game._ship.parts[1]:kill()
		end
	end
	return ret	
end
function new_part_gun(position)
	local ret = new_part(position)
	ret._sprite=3
	ret.name="gun"
	ret._energy_max=30
	ret._energy_regen=0.5
	ret._target=nil	
	ret._gun_arc=8
	ret.attach_sides = {
			["1,0"] = false,   -- right
			["-1,0"] = false, -- left
			["0,-1"] = false,  -- up
			["0,1"] = true   -- down
		}
	ret.baseupdate=ret.update
	ret.update=function(self)
		self:baseupdate()
		if(self:can_use()) then
			for i=1,#game.asteroids do
				local asteroid= game.asteroids[i]
				if(block_collision(asteroid._position,new_point(tileSize,tileSize) 
				,new_point(self._position.x+halfTileSize-self._gun_arc,0)
				,new_point(self._gun_arc,self._position.y)) )then
					if(asteroid.name=="large") then					
						self._target=asteroid
						play_sfx(4, channels.ship)
					end
				end
			end
			
			for i=1,#game.pirates do
				local pirate= game.pirates[i]
				if(block_collision(pirate._position,new_point(tileSize,tileSize) 
				,new_point(self._position.x+halfTileSize-self._gun_arc,0)
				,new_point(self._gun_arc,self._position.y)) )then
									
					self._target=pirate
					play_sfx(4, channels.ship)
					
				end
			end	
	
		end
		if(self._target!=nil) then
			self._energy-=1
			if(self._target:damage(1)<1) then
				self._target=nil
				stop_sfx(4, channels.ship)
			end
		end
		if(self._energy<=0) then
			self._target=nil
			stop_sfx(4, 0)
		end		
	end	
	--ret.basedraw=ret.draw
	ret.draw2=function(self)
		--self:basedraw()
		if(self._target!=nil) then
			line(self._position.x+halfTileSize,self._position.y+halfTileSize,
				self._target._position.x+halfTileSize,self._target._position.y+halfTileSize,11)
		end
	end
	ret.basekill=ret.kill
	ret.kill=function(self)
		if(self:basekill()) then
			stop_sfx(4, 0)
		end
		
	end	

	ret.can_regen=function(self)
		return self._target==nil
	end
	return ret	
end

function new_part_shield(position)
	local ret = new_part(position)
	ret._sprite=5
	ret.name="shield"
	ret._energy_max=120
	ret._energy_regen=0.5
	ret._shield_time=0
	ret._target=nil 
	ret.fragile=true
	ret.attach_sides = {
		["1,0"] = false,   -- right
		["-1,0"] = false, -- left
		["0,-1"] = false,  -- up
		["0,1"] = false   -- down
	}
	ret.defend=function(self,part)
		if(self:can_use()) then
			self._energy=0
			ret._shield_time=30
			ret._target=part--._position+new_point(halfTileSize,halfTileSize)
			return true
		end
		return false
	end
	ret.baseupdate=ret.update
	ret.update=function(self)
		self:baseupdate()
		self._shield_time=max(0,self._shield_time-1)
	end
	--ret.basedraw=ret.draw
	ret.draw2=function(self)
		--ret:basedraw()
		if(self._shield_time>0) then
			line(self._position.x+halfTileSize,self._position.y+halfTileSize,
				self._target._position.x+halfTileSize,self._target._position.y+halfTileSize,12)
			circfill(self._target._position.x+halfTileSize,self._target._position.y+halfTileSize,8,12)
		end
	end
	return ret
end


:: part_spawner.lua
--[[pod_format="raw",created="2025-05-20 03:17:51",modified="2025-05-27 20:18:57",revision=823]]
new_part_spawner=function ()
	return {
		spawn_rate=60,
		timer=200,
		left=0,
		right=480-16,
		parts={
				new_part_engine,
				new_part_bulkhead,
				new_part_scaffold,
				new_part_gun,
				new_part_shield,
				new_part_treasure
				},
		init=function(self)
		end,
		update=function(self)
			if(self.timer>self.spawn_rate) then
				self:do_spawn()
				self.timer=0
			else
				self.timer+=1
			end
		end,
		do_spawn=function(self)
			local pos= new_point(self.left+random(self.right-self.left),-16)
			local part =new_free_part(pos,pick_random(self.parts)())
			part:init()
			add(game.free_parts,part)	

		end
		
	}
end
:: pirate.lua
--[[pod_format="raw",created="2025-05-30 23:52:06",modified="2025-05-31 03:43:08",revision=240]]
new_pirate=function()
return {
	_position=nil,
	_speed=new_point(0,0),
	_sprites,
	_sprite=72,
	_thrust=1,
	_visit_points={},
	_visit_step=1,
	_shoot_timer=nil,
	health=30,
	init=function(self)
		self._sprites=game.sprites1
		self._position=random_offscreen_point()
		add(self._visit_points, random_onscreen_point())	
		add(self._visit_points, random_onscreen_point())
		add(self._visit_points, random_onscreen_point())
		add(self._visit_points, random_offscreen_point())
		
		self._shoot_timer= new_timer(130,0,self.do_shoot) 
	end,
	update=function(self)
		pq(self._visit_step)
		local point= self._visit_points[self._visit_step]
		self._speed=self._position:unitVector(point)
		self._position+=self._speed
		self._shoot_timer:update(self)
		if(abs((self._position-point):length())<self._thrust) then
			self._visit_step+=1
			if(self._visit_step>#self._visit_points) then
				self:kill(3)
			end
		end
		
	end,
	draw=function(self)		
		local particle_system= new_particle_system()
			particle_system.spawn_rate=0.5
		particle_system.lifetime=.25
		particle_system.position=self._position+new_point(0,0)
		particle_system.particle_speed=(self._speed*-1)
		particle_system.particle_speed_r=new_point(.1,.1)
		particle_system.particle_halflife=0.95
		particle_system.particle_animation={58,59}
		particle_system.particle_flipx_r=true
		particle_system.particle_flipy_r=true
		add(game.particle_systems,particle_system)

		spr(self._sprites[self._sprite].bmp,self._position.x,self._position.y)
	end,
	kill=function(self,mode)--0 hit, 1 deflected, 2 destroyed, 3 passed
		if(mode!=3) then			
			local particle_system= new_particle_system()
 			particle_system.spawn_rate=1
			particle_system.lifetime=10
			particle_system.position=self._position:round(tileSize)
			particle_system.particle_position_r=new_point(-8,-8)
			particle_system.particle_speed_r=new_point(-.5,-.5)
			particle_system.particle_halflife=0.99
			particle_system.particle_animation={57}
			particle_system.particle_flipx_r=true
			particle_system.particle_flipy_r=true
			add(game.particle_systems,particle_system)
		end
		del(game.pirates,self)
	end,
	do_shoot=function(self)
		local bullet=new_bullet(self._position,self._position:unitVector(game._ship._position))
		bullet:init()
		add(game.bullets,bullet)
	end,
		damage=function(self,d)
			self.health-=d
			if(self.health<1) then
				self:kill(2)
			end
			return self.health
		end,
}
end

new_bullet=function(position,direction)
return{
	_position=position,
	_speed=direction,
	_sprites,
	_sprite=80,
	_thrust=2,
	init=function(self)
		self._sprites=game.sprites1
		self._speed*=self._thrust
	end,	
	update=function(self)
		self._position+=self._speed
		if(is_point_on_screen(self._position)==false) then
			self:kill(3)
		end
	end,
	draw=function(self)
		spr(self._sprites[self._sprite].bmp,self._position.x,self._position.y)
	end,
	kill=function(self,mode)--0 hit, 1 deflected, 2 destroyed, 3 passed
		if(mode!=3) then			
		
		end
		del(game.bullets,self)
	end
}
end
:: point.lua
--[[pod_format="raw",created="2025-05-19 15:09:53",modified="2025-05-31 03:43:08",revision=723]]
function new_point(x,y)
	return sm({
		x=x,
		y=y,
		unitVector=function(self,b)
			return self.normalize(b-self)
		end,
		randomize=function(self,p)
			return new_point(self.x+random(p.x),	self.y+random(p.y))
		end,
		absPoint=function(p)
			return new_point(abs(p.x),abs(p.y))
		end,
		round=function(p,n)
			return new_point(flr(p.x/n+.5)*n,flr(p.y/n+.5)*n)
		end,
		clone=function(p)
			return new_point(p.x,p.y)
		end,
		length=function(p)
			return sqrt(p.x^2+p.y^2)
		end,
		square_to_circle=function (p)
	    local a = math.max( math.abs(p.x), math.abs(p.y)) -- max(|x|, |y|)
	    local mag = math.sqrt(p.x * p.x + p.y * p.y)
	
	    if mag == 0 then
	        return 0, 0 -- Origin stays at origin
	    end
	
	    local scale = a / mag
	    return new_point(p.x * scale, p.y * scale)
		end,
		__add=function(a,b)
			return new_point(a.x+b.x,a.y+b.y)
		end,
		__mul=function(a,b)
			return new_point(a.x*b,a.y*b)
		end,
		__sub=function(a,b)
			return new_point(a.x-b.x,a.y-b.y)
		end,
		equals=function(self,b)
			if(b == nil) then
				return false
			end
			return self.x==b.x and self.y==b.y
		end,
		__tostring=function()
			return "point"
		end,
		lerp=function(self, a, t)
		-- a and b are points, t is a number between 0 and 1
			local math=self + (a - self) * t
			--pq(self.x,a.x,t,math.x)
			return math
		end,
		box=function(self,left, top, right, bottom)
			self.x=mid(left,self.x,right)
			self.y=mid(top,self.y,bottom)
		end,
		normalize=function(p)
			local len = sqrt(p.x^2 + p.y^2)
			if len == 0 then return new_point(0, 0) end
			return new_point(p.x / len, p.y / len)
		end
	})
end

:: sfx.lua
--[[pod_format="raw",created="2025-05-20 16:55:03",modified="2025-05-31 00:15:37",revision=214]]
channels={
	ship=5,
	enemy=6,
	engine=7
}

sfx_channels = {}
function play_sfx(sfx_id, channel,loop,restart)
	data = sfx_channels[channel]
	if data and (restart or false) and data.sfx_id == sfx_id then
		return
	end
	
		sfx(sfx_id)--, channel, loop)
		sfx_channels[channel] = {
			sfx_id = sfx_id,
			loop = loop,
			start_time = t()  -- use time() if preferred
		}

end

-- Stop SFX only if the given sfx is currently playing on the channel
function stop_sfx(sfx_id, channel)
	if channel then
		-- Stopping on a specific channel
		local data = sfx_channels[channel]
		if data and (sfx_id == nil or data.sfx_id == sfx_id) then
			sfx(-1, channel)
			sfx_channels[channel] = nil
		end
	elseif sfx_id == nil then
		-- No channel and no sfx_id: stop everything
		for ch, data in pairs(sfx_channels) do
			sfx(-1, ch)
			sfx_channels[ch] = nil
		end
	end
end
:: ship.lua
--[[pod_format="raw",created="2025-05-19 15:07:48",modified="2025-05-31 03:43:08",revision=1660]]
function new_ship(position)
	return{
		parts={},
		_position=position,
		_speed=new_point(0,0),
		_mass=0,
		_thrust=0,
		_boost=1, --fudge number
		worth=0,
		acceleration=new_point(0,0),
		init=function(self)
			local command=new_part_command(self._position)
			command.location=new_point(0,0)
			command:init()
			add(self.parts,command) 
			self:update_ship()
		end,
		update=function(self)
			self.acceleration=new_point(0,0)
			local boost = self._thrust/self._mass*self._boost
			if input:button(input_lookup.lpad.left) then --left
			   self.acceleration.x-=boost
		   elseif input:button(input_lookup.lpad.right) then --right
			   self.acceleration.x+=boost
		   end
		  	
		  	if input:button(input_lookup.lpad.up) then --left
			   self.acceleration.y-=boost
		   elseif input:button(input_lookup.lpad.down) then --right
			   self.acceleration.y+=boost
		   end   
		  	 self._speed+=self.acceleration 
		  	if(self.acceleration:length()>0) then
		  		--play_sfx(5,channels.ship)
		  		note(48,5,self._thrust*5,'t', 10,channels.engine,false,false)
		  	else
		  		sfx(-1,channels.engine)
		  	end	
		  
			self._position+=self._speed --apply velocity
			self._position:box(0,0,screenWidth-tileSize,screenHeight-tileSize)
			self._speed*=0.90
			foreach(self.parts, function(part)
				part:set_position(self._position)
	    		part:update()
	 	 	end)	
	 	 	self:do_part_pickups()
			self:do_asteroids()
			self:do_pirates()
			self:do_bullets()
		end,
		draw=function(self)
	 	 	foreach(self.parts, function(part)
	    		part:draw()
	 	 	end)
	 	 	foreach(self.parts, function(part)
	 	 		if(part.draw2!=nil)then
	 	 			part:draw2()
	 	 		end
	 	 	end)
		end,
		do_part_pickups=function(self)
			local dimension= new_point(16,16)
	 	 	for i = 1, #game.free_parts do				
				local free_part = game.free_parts[i]			
				for j = 1, #self.parts do
					local ship_part = self.parts[j]		
					local result = block_collision(free_part._position, dimension, ship_part._position, dimension)
					if result != nil then
						local attached=self:attach_part(ship_part,free_part,result)
						if(attached==false) then
							free_part._speed+=result*0.005
						end
						return  -- exit both loops early
					end
				end
			end
		end,	
		do_pirates=function(self)
			local dimension= new_point(16,16)
			for i = 1, #game.pirates do				
				local pirate = game.pirates[i]			
				for j = 1, #self.parts do
					local ship_part = self.parts[j]
					local result = block_collision(pirate._position, dimension, ship_part._position, dimension)--fix
					if result != nil then
						pirate:kill(0)
						ship_part:kill()
						self:update_ship()
						return
					end
				end
			end
		end,
		do_bullets=function(self)
			local dimension= new_point(12,12)
			for i = 1, #game.bullets do				
				local bullet = game.bullets[i]			
				for j = 1, #self.parts do
					local ship_part = self.parts[j]
					local result = block_collision(bullet._position, dimension, ship_part._position, dimension)--fix
					if result != nil then
						bullet:kill(0)
						ship_part:kill()
						self:update_ship()
						return
					end
				end
			end
		end,
		do_asteroids=function(self)
			local dimension= new_point(16,16)
			for i = 1, #game.asteroids do				
				local asteroid = game.asteroids[i]			
				for j = 1, #self.parts do
					local ship_part = self.parts[j]
					local result = block_collision(asteroid._position, dimension, ship_part._position, dimension)--fix
					if result != nil then
						
						if(asteroid.threat<2 and  ship_part.fragile==false) then --todo: consolidate check connector better
							local cardinal=cardinal_direction(result,0)
							local key = cardinal.x .. "," .. cardinal.y						
							local can_hurt = ship_part.attach_sides[key]
							if(can_hurt==false) then
								asteroid:kill(1)
								return
							end
						end
						asteroid:kill(0)
						ship_part:kill()
						self:update_ship()
						return
					end
				end
			end
		end,
		update_ship=function(self)
			local unattached=find_unattached_parts(self.parts)	
			for i = 1, #unattached do
				local part=unattached[i]
				part:kill()
			end
	
			self._mass=0
			self._thrust=0
			self.worth=0
			foreach(self.parts, function(part)
				self._mass+=part.mass
				self._thrust+=part.thrust
				self.worth+=part.worth
	 	 	end)
		end,
		attach_part=function(self,ship_part,free_part,collision_result)
			local direction=cardinal_direction(collision_result,8)
			if(direction!= nil and parts_can_attach(ship_part, free_part.part, direction))then				
				local new_location=ship_part.location+ direction
				for i = 1, #self.parts do --check if this spot is already taken
					local ship_part = self.parts[i]	
					if(new_location:equals(ship_part.location)) then 
						return false
					end				
				end
				free_part.part.location=new_location
				add(self.parts,free_part.part)
				del(game.free_parts,free_part)
				self:update_ship()
				play_sfx(2,channels.ship)
				return true
			else
				return false				
			end
			
		end
		
	}
end
function loc_key(p)
		return p.x .. "," .. p.y
end
function find_unattached_parts(parts)
	local visited = {}
	local part_map = {}

	-- Build lookup by location
	for _, part in pairs(parts) do
		part_map[loc_key(part.location)] = part
	end

local directions = {
	{ dx = 1, dy = 0 },
	{ dx = -1, dy = 0 },
	{ dx = 0, dy = 1 },
	{ dx = 0, dy = -1 }
}

function flood_fill(part)
	local key = loc_key(part.location)
	if visited[key] then return end
	visited[key] = true

	for _, dir in ipairs(directions) do
		local dx, dy = dir.dx, dir.dy
		local neighbor_pos = new_point(part.location.x + dx, part.location.y + dy)
		local neighbor_key = loc_key(neighbor_pos)
		local neighbor = part_map[neighbor_key]

		if neighbor then
			-- If either side allows attachment
			local dir_key = dx .. "," .. dy
			local reverse_key = (-dx) .. "," .. (-dy)

			local this_allows = part.attach_sides[dir_key]
			local neighbor_allows = neighbor.attach_sides[reverse_key]

			if this_allows or neighbor_allows then
				flood_fill(neighbor)
			end
		end
	end
end

	-- Start from origin part at (0,0)
	local start = part_map["0,0"]
	if start then
		flood_fill(start)
	end

	-- Now collect any parts not visited
	local unattached = {}
	for _, part in pairs(parts) do
		if not visited[loc_key(part.location)] then
			add(unattached, part)
		end
	end

	return unattached
end
function parts_can_attach(partA, partB, direction)
	local key = direction.x .. "," .. direction.y
	local reverse_key = (-direction.x) .. "," .. (-direction.y)

	local a_can_attach = partA.attach_sides[key]
	local b_can_attach = partB.attach_sides[reverse_key]

	return a_can_attach or b_can_attach
end
:: start.lua
--[[pod_format="raw",created="2025-05-20 16:44:31",modified="2025-05-27 21:04:30",revision=541]]
function new_start()
	return{
	sprites,
	init=function(self)
		camera_helper:set_camera(new_point(0,0),true)
		self.sprites=	fetch("./gfx/0.gfx")	
	end,
	update=function(self)
		camera_helper:update_camera()
		if(btnp()>0) then
		 next_screen()
		end

	end,
	draw=function(self)
		cls()
		spr(self.sprites[192].bmp,(480-200)/2,20)
		print_centered("Time to haul",200,8)
		print_centered("Press any button",220,({7,7,6,13,5,0,5,13,6,7,7})[flr(t()*10)%11+1]) 	

	end}
	
end

:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA1LTE5IDE0OjE0OjE1Iixtb2RpZmllZD0iMjAyNS0w
NS0zMSAwMzo0MzowOCIscnVudGltZT0xOCx3b3Jrc3BhY2VzPXt7bG9jYXRpb249InBpcmF0ZS5s
dWEjMTEiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImRpcmVjdG9yLmx1YSM5Iix3b3Jr
c3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJtYWluLmx1YSM2Iix3b3Jrc3BhY2VfaW5kZXg9MX0s
e2xvY2F0aW9uPSJwYXJ0cy5sdWEjMjE4Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJh
c3Rlcm9pZC5sdWEjMjciLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImdhbWUubHVhIzc0
Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJzaGlwLmx1YSM1MCIsd29ya3NwYWNlX2lu
ZGV4PTF9LHtsb2NhdGlvbj0iaGVscGVycy5sdWEjMTQ4Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xv
Y2F0aW9uPSJwb2ludC5sdWEjNiIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0iZ2Z4LzAu
Z2Z4Iix3b3Jrc3BhY2VfaW5kZXg9Mn0se2xvY2F0aW9uPSJtYXAvMC5tYXAiLHdvcmtzcGFjZV9p
bmRleD0zfSx7bG9jYXRpb249InNmeC8wLnNmeCIsd29ya3NwYWNlX2luZGV4PTR9fV1d
:: [eoc]
