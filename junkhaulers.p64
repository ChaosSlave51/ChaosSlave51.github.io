picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA1LTE5IDE0OjA1OjM2Iixtb2RpZmllZD0iMjAyNS0w
NS0yMCAyMDozMToyMyIscmV2aXNpb249NjAwXV1sejQA1A8AAEROAADxKHtbMF09e2JtcD1weHUA
QyAQEATwVgcQB8AX0BfABxAH8FYsZmxhZ3M9MCxwYW5feD0tMC4xMjUNABB5DQDKNjI1LHpvb209
OH0sSADwISAfGVAeYA5WDnAGHxwfHh8cBjAOEAYtHx4tBhAuBj0cPQYeAAa9BhAGB50HBhAGtwoA
QT0XPQcIABESCAD-HBctFS0XBgAeBhcdFR0XBi4QBhcNFQ0XBhAOMAYHNQcGcA4GNQYOYB5QHiCn
AC3-BlAOcHlwCRUZFQlgCXUJUAkFGRUZBQgADiFAGQgALBkwCACvJRkVGSUg2RDVAJkAJvEQ8BR4
MA8ZEBgSGBIYEC4oEhgSKB4QKBUYFSgwKBUfHQcABgYA8QAYDRUdFQ0YMBgNVQ0YEB4HACEuAAcA
MQAOEAgAP1AOUCwBLDAQFhUCABIgBwAjFgAIACsVBggAKxYFCAAPIgAqEwATACIFIBMALwUQ7QEt
8A1fEA5wDVwNMA4QnRAuHXwdHgANDA0MXQwNDA0QCgA-DTsNDAAaAToA-wIAHh18HS4QnRAOMA1c
DXAOXZkCM-AZAzADDnBzMA4QE1sTEC4TC18bCxMeABMLDVsNCxMgAwsNCz0LDQsDMAoAPw0bDQwA
AgEiABMgNACBAB4TC10LEy5RAEEOMHNwYwAPRQM08QVQvRAOAA02Hw82DQAuDTYcNg0eEAcAEzAG
ABOcBAAGFAAhEB4HACEuAAcATgAOEL2pAg98BCgRV3cEQBcPHBc5BFAuBhddF3kEVxctFy0XcwQK
fwQCCAAjF319BBQXfQQTF30EX1cGcA5WpAAsL-DwOwCcBuUB8AW2EA4ABjAWECYALgYgFhA2HhAG
EA4A8AAGMAYAFhAmEAYwJhAmEBYiAEAQJjAGDAABHADQJhAWEAYQHjYQFiAGLg4AbzAGAA4QtvAB
Ly-w8DsA------------3QWECtDwBA7QLrAe8FAesC7QDgAOQwoPvAH-h-8MULgQDgA4OzgALhh7
GB4QGBs-GxsYMAgbXRsIBgAAQBgbPRvSEDF7GC41AD8OELgxDDD-OgdvFIAOZGAOJC8fFDAuJB0e
JBAOVD4kAA4EDqQNAEQNFA40DRAkPSQOFA0QFB0uFA4UDSAOBA0_NB0gFC5EDUCEDVBETWBN8AmD
ACbwHUAvFMAUIAQOUAQO4AQgDuAEECTQDx8EQATgBA6gBCAEEBQQFBANBGAEEBQgBgARDRQAYNAU
ABSgDRQAbyTADQTwAwQCKA87AP--------------------------------------D1PIyATw-wEA
8Q6HDxXwtg4PFPDcjiC_cH5wniC_8AI_MD5APiA_UAgA8zHwJQ6PGQ4QDxSvGXB9cJ0gDxSt8AI9
DhAOPQ4wPQ4QDC0OQD0MEAw9MA49DPAiDq0OEAydDGAOfRxADp0gDJ0MLQARQCwAUQwOMAwtLgAS
DC4AxAwQDM0wDK0OIL0gDFgAcUAMLQ4QDE0qAPAEDj0gDE0M8BQesA5NDC0cDhAMPX0uyDA9TC0O
ID18IAw9bGEAMU0eEI0AECBfAPYNFB7ADj0OgAwtDEA9IA4tDDA9DCA9DJAMLQzwCTMAIm0QkgCS
IE3wJA49DB5gMAAwDC0MgQAACAAIMgABmwAwbRw9mgBwEE0O8CQObTEAEDCoAAhiAGYADgAO8AVm
ABDNYwCaAAxN8CUObSwwYwAAMgBGjQ7wAy4A0C0cfQwQDo0M8CgMfQw_AAEsABJNjQBHjQzwA40A
YC0OAH0OEBYAQSgOjQwsABU9VwAZnVYAUQwQDl0MKwAgKwwJACGtQIkBASoAmC1skA4NDA0OMFsA
MAwgXekAUBxN8CwMWAFgTQwNDB0MNgAzTQ4QSwEQAJsACGUAEUBQAYEtDBBN8CwOPQsAErBoACcM
LTMAKgwtNAAA2wEQIEQCVCMODUxNNwDxBgwADA5NDhBNDgwOPCAMPVwOgAw9PG4AGExuAABfAEPw
IwytNwBAzQwQvXwCdoAMvQ4QDs0pAAHaAHIM8CIMnQwOKwABSAARHKoCpoAODI0cMAydHCBYAHBA
PQ7wIgyN2gEQsBYA8gE9DDCdIK0MoAx9DFAMjQ4wFAAEKQDwAw4cfkAeDA7ADA4MDlAMDgxAXgoA
4DCODA6wDC4MHgxwDG4MGABgUC4MMAwuCgAAiQMgVw4mAEBALgxgCAAiDB4IABFAFgARIAYAEJAW
AAMEADEgDB5MACIOYBEAYA4MDvBGTX4DMEAMfZwBEQ5rAcE9kAzNEA69YI0M8EaeAHRAjQ5ADD1A
hwEQvQACsAwOMB6NDPAKPvAoQgAgDkDqAAFCACQtDEMAEc0pAJLwCQ4ADgAe8CdMAAHhAkYMLTAO
UQAAmAMCAgDxARAOPVw9EA49fPAJTgAO8CZbAANNAxMwgwAQPQkCM6AOPWcBQPAQLhBfABElXwAC
vwIGiQAAXwBTLQ6gDD3EAXAO8A4eAB4QYwNmCQ7wC01MKQAYIGAAMQBOQKEAADUE8wQu8AsOAB4A
DgAu8AkMDvAKDM0M5gARIJ4AA54CM50MMJUAUA598ApeMgAw8CXdXwA4DiA9XgABKQDwCExNEA4M
fRzwBh4ADhAeAC7wJQzNDiAOuwAZIL4AAC4AcM0MMA6N8AcrADNO8CUwAUE9DiBNygIHtwDxCQ4c
DhwOMA69DA5AHA4MTQwO8AceEB7wKBwBSBAO7RCxAABGAYCtDKAePQzwB90AISlNJQA73QwQagEA
sQMQwCYAMT7wKq4FIQ4gJQARTNcAEGwPAyKMDnAFQA4gfD3yASHwK00AsAw9Xk0QDN0gDL0QEQIR
Pe0EQr0M8EX1BWAQDD1QDD0pAhEggQMDIwBxDBAOvQ7wRf0BIBBNfAJCMAydQEQAoQw9QA49EAyt
8EcFARBABgBwDhAMHQwNUAUAEDCKBAMCAEJADB0cCgB1DQwQDh0MDQIAbCAdDA1ADhgABdoG8Rr-
Nw7wUS7wHR7wJB7wHQwO8CB_8H4O8CA_AE7wrj4QHgAe8KxOMD7wqxcC8AsQPvBBDvBdHhBO8D4e
TPBajvA6DA48HjzwW1UB8AA1HB5sHgwOPPBdHvA0DryNBKAO8BEe8E4e8B-cDgDwDPASHvAXHvAl
DvAe-Acu8Dge8FIO-Avwmx58Ls8B8AdsDizwmg5sDhwuAKwuDA7wfy7wAn48wAMxHgCcxQNg8IAO
8AFe0QMRHBcAEGwMADEe8JHgA0AMHgxOCAAxTA4cIwBBDA7wkssCcAwOHBAMDnwTAEBuDA5wggIS
iiEAEACxADAuDA4rBGBQngAO8IRGABA_GwCgLD4MHgyeMK4PFg4AIPCBGQAxHhweVwQSPiMA0gwO
IP4ADAsO8IGODA5RAAMIAKBuEH4QLgtu8IEcJQAEUwARDOgEgBDuCwwLDB4L4ABCDB4QHjkAMCAe
ECIAoi4Q-gQADhwO8G5MAPAA8AIOIAwODHAsDgwwPgC_OAAAOgBhNQ7wJwwORQAQBjsF8AIOUB4w
rkAuCwwOCy7wNR7wIgkBIP4GRwNiXmBOCw4MNABgIk4M-gpQowTwBI4gfoCO8GheCw4L-gYQ-gIg
fiAXAKAOEI7wZ-4GAI4AEwBgEA5wfvBpkQDxBQsOC04ADgt_Cx4LTgCOMA4ADiCOGgDwCn4QPgAe
Cx4QDhAOQH4gDlB_8HnuAG7QjjAhAPAEDB7wW94QLgseEH4ADiA_ED5QnhQAUEwOXA4QOwHDAA4L
LhCuIL4grvBqQAHwDfABPhA_EF4QPjD_BAAu8JC_QP4H8GcOHAs_AD7LAQCFAvMR4O5ArgCO8Gj7
CBAOIF4g-gFA-gLwaA77CA4QnhBOAA4CANMeYP4A8Gn7CgwAnhBeFADwBw6QzvBqDPsAHIsQLgBO
EP4BkI7wa-sIAvAGID4QbgBOAB7wFw7wUAwOLAAO_wwMFAHwDRAe8Az_AgwOgA7wSQ5cTQAOq2AO
iw6w-gNQTM1JA_BTDH0MHQAOGxxbDBAOMBsA8A9rDRsMmw4gHA4M-QAO8E1cPQwdPA0ADqsATgAO
iw4rAfUCMA77ByAs-QAc8E0MbUwdDB0eAPEEAD4AHhAMmwAOmwwgHD1MjQzwTAMFEC1VCAQmAPAB
DBAOAC4gHAtMG3wePBA8LSoC8AMOPQw9DvBEDg0cDRwtDA1MPQurAEEALgsOdQBhHgAOIA4cYwFA
rA48EFMFsBweDC0sLfBATo0sEgQwHUs9dgAAlAEgAAynAPARAB4gLA4QLgBufBAcfSwtHC3wPwxd
DF0sPQsNKw0LHQu1AACQBlCLDoAsPpgB8AAAPnwQDP0ADC0O8D9MXTxTAAEqAABXANBgDosMYIye
fBAc-QMMpwDwGDwdDC0MHQtNWwAOqwwLDgwOCwybDlAO-AoOEAz9BA7wSgw9TA0MXT4A8AlLDPsG
DiAOEA78Bx4NDhBNLA0cjQwO8E0EBcJcDQxNAA47DA77Aiy6BsAQbB7cHgwOEF0OLI2gAfApTQwN
TA1cPQAO_wgMCwwLDiAOIPwHDiwQDE0OHA0MbQwdDvBTDi0MDRw9EPsJDgsMcDwO-AUOEDyiABAN
VAXwCiwO8DMe8A4OPG0QDvsHDAsMgA68DkwOAEwMBrEsAA4ATgAuIB4ALlgDAQIA8AXwHw7wFAxO
MAv8AAtcDvAITA5MDioB8ADwAH4A-gPwRg4MC9weXA5HA3HwAawOoA4QNwDwADB_AP4E8EcOC9we
TAsQLhMAESACAGEADhAOnDCTAQFoAXAeAP4R8EgORwQhC4wGACEcECcAIQAuAgBgDjBeAC5AagKC
-hUAPvBJDjA2AEFuEE4QTQBgIA4wDvACLwDE-gbwcx4AXvAALgCOYADwCvB5LiAOUD4gLvAADgwe
AF4M8IUMTnA_AC6DALCcDhwOfA7wgS7QXnUJ0fwKLrAO8HAsjiAOID4RAPEBBz4cTlAO8HEcDkwu
HHAeIHICMCw_TDQFcTAO8HQOPA5wBQGFAGAgHhwOHB5SABJsOwWgHvB6DC4sDgwOHNAA8BdQHkwu
bA7cXvB_XA4cQA5AfA5MPlxOHC4MHvCBDA4sDgwgDlAerJIAID4sMQbhLB7wRx4cQA4gDlwOzA7z
BdAe8C0O8EoOQA4gHiwuMgjwAPwCTvBoDvAaDkwOnA4sDlgGUPBpHvAZHAZQHmwOPE4mA-AA8KIO
DA5sThw_8KUejA4sEgAwpy6MBwBjDQwO8Iw_rADRDg7wlh7w--_tLvC2DlMHQHge8LYSAAUBAKMa
HvAWHvCPDvAWFwATGSIAIGUOCADyBVsODPBKDvAVHvBZDvBNDvBYLvC1SgAr-5i3DnMzMi42OTE2
AQAUN8AOVjMuNjE2FgAByQ4fMQQPKA87AP------------------QlBtPTh9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA1LTE5IDE2OjQ3OjIyIixtb2RpZmllZD0iMjAyNS0w
NS0yMCAyMDozOTowNiJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA1LTE5IDE0OjA1OjM1Iixtb2RpZmllZD0iMjAyNS0w
NS0yMCAyMDozMToyMyIscmV2aXNpb249NTY1XV1sejQAkQAAAFgQAADwCHt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDMyAwAvIjABAP-------60TNAQADwEAZV81MDAwNoQAZFMzMDAwMQgALzcwAQBfFzIE
AB44iAEPAQD---------nvEIIiksaGlkZGVuPWZhbHNlLHBhbl94PTAIANJ5PTAsdGlsZV9oPTE2
CgAQdwoAgHpvb209MX19
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA1LTE5IDE2OjQ3OjIyIixtb2RpZmllZD0iMjAyNS0w
NS0yMCAyMDozOTowNiJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA1LTE5IDE0OjA1OjM2Iixtb2RpZmllZD0iMjAyNS0w
NS0yMCAyMDozMToyNCIscmV2aXNpb249NTUyXV1sejQA3AEAAOUKAAD-MHB4dQADKAAABAAED0AQ
Ag4AAaABIAKgDgAPEAAN8MoBAgNADw_QBAUGB0AMkAgJCgtADJAPDA8NDw4MQAzw-wEA6-EDqgEQ
Bg8gEAEgASAB8AAPEhACDgD5Lg8hD6oQAQ--IA8xIAFQAQkgDz4gD1TwBgEIIA9xUALwjA8oD--w
xg-4Cg--D4AP9w8NAXAPYg9BD04PR8BTAEACEAIOUQCxJQ8WD-ARMA9X8MM8AFoGDyHwr0AAEGU_
AHAPQQ9HD0WgRAAcHUQA_hYhIAEP-hAED1YPMYAPEQIQBA9ADyhAAiABBBAEDvCjDQ_eAvDFVAAA
lgD9CzIPbg9vD2QPZQ8tD2YPbQ9iD2EfcyABEAYOYQARCvUAHQP0AMFBIA9KEAIPF-CLDQP3ABUD
YgA0ZA9J9gAfDrEAAFswD0DwwzUAL-AJLQD-----rx--AQCs8CjID0AADxBADzDzLwDzLw7zL-Bw
D0AABEAPKQ8vDg8rDzcPKg8bDyQPKg0PJA8sDyHzI8DzIw8RNAhhEQsPEA8OCQBBDB7zIzkA-wMP
FEAPMA8i8y4BAvMuDw0G8y5QAA4vzwNRAAUBoQAi-96iAEXzsPBwCgAf-wEAGh6_OAAPAQD-pVD-
----tA==
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA1LTE5IDE2OjQ3OjIyIixtb2RpZmllZD0iMjAyNS0w
NS0yMCAyMDozOTowNiJdXQ==
:: asteroid.lua
--[[pod_format="raw",created="2025-05-20 13:51:18",modified="2025-05-20 20:31:23",revision=185]]
function new_asteroid(position)
	return{
		_position=position,
		_speed=new_point(0,2),		
		_sprites,
		_sprite=0,
		_flipx,
		_flipy,
		threat=0,
		init=function(self)
			self._sprites=game.sprites1
			self.flipx=rnd() < 0.5
			self.flipy=rnd() < 0.5
		end,
		update=function(self)
			self._position+=self._speed 
			if(is_point_on_screen(self._position)==false) then
				self:kill(3)
			end
		end,
		draw=function(self)
			spr(self._sprites[self._sprite].bmp,self._position.x,self._position.y,self.flipx,self.flipy)
		end,
		kill=function(self,mode)--0 hit, 1 deflected, 2 destroyed, 3 passed
			del(game.asteroids,self)
		end
	}
end

function new_small_asteroid(position)
	local ret = new_asteroid(position)
	ret.threat=1
	ret._sprite=65
	
	ret.basekill=ret.kill
	ret.kill=function(self,mode)
		if(mode==0) then
			play_sfx(1,1)
		elseif(mode==1) then
			play_sfx(3,1)
		end
		self:basekill(mode)
	end
	return ret
end
function new_large_asteroid(position)
	local ret = new_asteroid(position)
	ret.threat=2
	ret._sprite=64
	
	ret.basekill=ret.kill
	ret.kill=function(self,mode)
		if(mode==0) then
			play_sfx(0,1)
		end
		self:basekill(mode)
	end
	return ret
end
:: asteroid_spawner.lua
--[[pod_format="raw",created="2025-05-20 14:00:55",modified="2025-05-20 19:15:15",revision=216]]
new_asteroid_spawner=function ()
	return {
		spawn_rate=60*1,
		timer=200,
		left=0,
		right=480-16,
		asteroids,
		init=function(self)
			self.asteroids={new_small_asteroid,new_small_asteroid,new_large_asteroid}
		end,
		update=function(self)
			if(self.timer>self.spawn_rate) then
				self:do_spawn()
				self.timer=0
			else
				self.timer+=1
			end
		end,
		do_spawn=function(self)
			local pos= new_point(self.left+random(self.right-self.left),-16)
			local asteroid =pick_random(self.asteroids)(pos)
			asteroid:init()
			add(game.asteroids,asteroid)	

		end
		
	}
end
:: camera.lua
--[[pod_format="raw",created="2025-05-19 23:50:11",modified="2025-05-20 03:00:01",revision=17]]
camera_helper={
camera_point =new_point(0,0),
camera_desired_point =new_point(0,0),
camera_shake =new_point(0,0),
shake_intensity=0,
shake_timer=0,
shake_time=0,
camera_shake =new_point(0,0),
-- Function to set the camera position and update the variables
set_camera=function(self,point,instant)
		self.camera_desired_point=point
	if(instant) then
		self.camera_point=point
	end

end,
get_camera=function(self)
    return self.camera_point
end,	
update_camera=function(self)
	self.camera_point=self.camera_point:lerp(self.camera_desired_point,0.5)
	 self:calculate_shake()
	local c=self.camera_point+self.camera_shake
	 camera(c.x, c.y)
end,

shake_camera= function(self,intensity, t )
	self.shake_intensity=intensity
	self.shake_timer=t
	self.shake_time=t
end,
calculate_shake = function(self)
	if(self.shake_timer>0) then		
		local strength=self.shake_intensity*self.shake_timer/self.shake_time
		local point=new_point(random(-1)*strength,random(-1)*strength)
		self.camera_shake=self.camera_shake:lerp(point,0.5)
		self.shake_timer-=1
	else
		self.camera_shake =new_point(0,0)
	end
end
}
:: error_explorer.lua
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNS0wNS0xOSAxNTowMjoyNiIsbW9k
aWZpZWQ9IjIwMjUtMDUtMjAgMTk6MTI6NDAiLHJldmlzaW9uPTQxMl1dCi0tICMgcGljb3Ryb24g
ZXJyb3IgZXhwbG9yZXIKLS0KLS0gYnkga2lyYQotLQotLSB2ZXJzaW9uIDAuMC42Ci0tCi0tIGFu
IGludGVyYWN0aXZlIGVycm9yIHNjcmVlbiBmb3IgcGljb3Ryb24uCi0tIG9uIGVycm9yLCBzaG93
cyB0aGUgc3RhY2ssIGxvY2FsIHZhcmlhYmxlcywKLS0gYW5kIHRoZSBzb3VyY2UgY29kZSB3aGVu
IGF2YWlsYWJsZS4KLS0KLS0gIyMgdXNhZ2UKLS0KLS0gYGluY2x1ZGVgIG9yIGByZXF1aXJlYCBg
ZXJyb3JfZXhwbG9yZXIubHVhYAotLSBpbiB5b3VyIHByb2dyYW0gX2FmdGVyXyBkZWZpbmluZyB5
b3VyIGBfaW5pdGAsCi0tIGBfdXBkYXRlYCwgYW5kIGBfZHJhd2AgZnVuY3Rpb25zLgotLQotLSBw
cmVzcyBgdXBgIGFuZCBgZG93bmAgdG8gbW92ZSB1cCBhbmQgZG93biBvbgotLSB0aGUgc3RhY2ss
IHByZXNzIGB4YCBvciBgc3BhY2VgIHRvIHRvZ2dsZSBmb250Ci0tIHNpemUuIGNsaWNrIG9uIHRh
YmxlcyBpbiB0aGUgdmFyaWFibGUgdmlldyB0bwotLSBleHBhbmQgdGhlbS4KLS0KLS0gIyMgaG93
IGl0IHdvcmtzCi0tCi0tIGluIG9yZGVyIHRvIGNhdGNoIGVycm9ycyBhbmQgaW5zcGVjdCBydW50
aW1lCi0tIHN0YXRlLCB0aGlzIHNjcmlwdCByZXBsYWNlcyBgX2luaXRgLCBgX3VwZGF0ZWAKLS0g
YW5kIGBfZHJhd2AgZnVuY3Rpb25zIHdpdGggb25lcyB0aGF0IGNhbGwgdGhlCi0tIG9yaWdpbmFs
IG9uZXMgaW5zaWRlIGEgY29yb3V0aW5lLgotLQotLSB3aGVuIHRoZXJlJ3MgYW4gZXJyb3IsIGl0
IHVzZXMgbHVhJ3MgZGVidWcKLS0gbGlicmFyeSB0byBpbnNwZWN0IHRoZSBjb3JvdXRpbmUuIGEg
Y29weQotLSBvZiB0aGUgZXJyb3IgaXMgYWxzbyBwcmludGVkIHRvIHRoZSBjb25zb2xlCi0tIHdp
dGggcHJpbnRoIGlmIHlvdSdyZSBydW5uaW5nIHBpY290cm9uIGZyb20KLS0gdGhlIGNvbW1hbmQg
bGluZS4KLS0KLS0gdGhlIGZvbGxvd2luZyBkZWJ1ZyBhcGlzIGFyZSB1c2VkOgotLQotLSAtIGBk
ZWJ1Zy5nZXRpbmZvYAotLSAtIGBkZWJ1Zy5nZXRsb2NhbGAKLS0gLSBgZGVidWcuZ2V0dXB2YWx1
ZWAKLS0gLSBgZGVidWcudHJhY2ViYWNrYAotLQotLSAjIyB2ZXJzaW9uIGhpc3RvcnkgCi0tCi0t
IHZlcnNpb24gMC4wLjYKLS0gLSBvbiBlcnJvcjoKLS0gICAtIHNob3cgY3Vyc29yCi0tICAgLSBt
YWtlIHdpbmRvdyByZXNpemFibGUKLS0gLSBhdXRvbWF0aWNhbGx5IGFkanVzdCBsYXlvdXQgdG8g
d2luZG93IHNpemUKLS0gLSBzdXBwb3J0IHlpZWxkaW5nIChzaW5jZSBmZXRjaCBzb21ldGltZXMg
eWllbGRzKQotLQotLSB2ZXJzaW9uIDAuMC41Ci0tCi0tIC0gZnV0dXJlIHByb29maW5nOiBncmFj
ZWZ1bGx5IGhhbmRsZSB3aGVuCi0tICAgdmFyaW91cyBwYXJ0cyBvZiB0aGUgYGRlYnVnYCBtb2R1
bGUgYXJlbid0Ci0tICAgYXZhaWxhYmxlCi0tCi0tIHZlcnNpb24gMC4wLjQKLS0KLS0gLSBhbHNv
IGNhdGNoIGVycm9ycyBpbiBgX2luaXRgCi0tCi0tIHZlcnNpb24gMC4wLjMKLS0KLS0gLSBhdXRv
bWF0aWNhbGx5IGNob29zZSB0aGUgcmlnaHQgc3RhY2sgZnJhbWUKLS0gICBiYXNlZCBvbiB0aGUg
ZXJyb3IgbWVzc2FnZQotLSAtIG1vcmUgdGhvcm91Z2hseSBwcm90ZWN0IGZyb20gZXJyb3JzIGlu
IGVycm9yCi0tICAgZXhwbG9yZXIgaXRzZWxmCi0tCi0tIHZlcnNpb24gMC4wLjIKLS0KLS0gLSBk
b24ndCByZWdlbmVyYXRlIHN0YWNrIGluZm8gZXZlcnkgZHJhdwotLSAtIHNjcm9sbCBzdGFjayBh
bmQgdmFyaWFibGVzIGxpc3Qgd2l0aCBtb3VzZXdoZWVsCi0tIC0gY2xpY2sgb24gc3RhY2sgdG8g
c3dpdGNoIHN0YWNrIGZyYW1lcwotLSAtIGNsaWNrIG9uIHRhYmxlcyBpbiB2YXJpYWJsZXMgdmll
dyB0byBleHBhbmQgdGhlbQotLSAtIGVzY2FwZSBzdHJpbmdzIHdoZW4gcHJpbnRpbmcgdGhlbQot
LQotLSB2ZXJzaW9uIDAuMC4xCi0tCi0tIC0gYWRqdXN0IGNvbG9ycwotLSAtIGNvZGUgY2xlYW51
cAotLSAtIHVzZSBgYnRucGAgaW5zdGVhZCBvZiBga2V5cGAKLS0gLSBzbGlnaHRseSBtb3JlIHRo
b3JvdWdoIGByZXNldGAKLS0gLSBkb24ndCBzaG93IHRlbXBvcmFyaWVzCi0tCi0tIHZlcnNpb24g
MC4wLjAgKHByZXJlbGVhc2UpCi0tCi0tIC0gaW5pdGlhbCBkaXNjb3JkIGJldGEKCi0tICMjIGxp
Y2Vuc2UKLS0KLS0gQ29weXJpZ2h0IDIwMjQgS2lyYSBCb29tCi0tIAotLSBQZXJtaXNzaW9uIGlz
IGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcg
YSBjb3B5Ci0tIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBm
aWxlcyAodGhlIOKAnFNvZnR3YXJl4oCdKSwgdG8KLS0gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0
aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUKLS0gcmln
aHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3Vi
bGljZW5zZSwgYW5kL29yCi0tIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBl
cm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzCi0tIGZ1cm5pc2hlZCB0byBkbyBz
bywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6Ci0tCi0tIFRoZSBhYm92ZSBj
b3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1
ZGVkIGluCi0tIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3
YXJlLgotLSAKLS0gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIOKAnEFTIElT4oCdLCBXSVRIT1VU
IFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCi0tIE9SIElNUExJRUQsIElOQ0xVRElORyBC
VVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLAotLSBG
SVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBO
TyBFVkVOVCBTSEFMTAotLSBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFC
TEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgotLSBMSUFCSUxJVFksIFdIRVRIRVIg
SU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORwotLSBG
Uk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNF
IE9SIE9USEVSCi0tIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KCi0tLS0gdXRpbCAtLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpsb2NhbCBmdW5jdGlvbiBmaWxlbmFt
ZV9vZiAocGF0aCkKICByZXR1cm4gcGF0aDptYXRjaCAoJ1teL10qJCcpCmVuZAoKbG9jYWwgZnVu
Y3Rpb24gc2FmZV90b3N0cmluZyAodmFsdWUpCiAgaWYgdHlwZSAodmFsdWUpID09ICdzdHJpbmcn
IHRoZW4KICAgIHJldHVybiBzdHJpbmcuZm9ybWF0ICgnJXEnLCB2YWx1ZSkKICBlbHNlCiAgICBs
b2NhbCBzdWNjZXNzLCB2YWx1ZV9zdHJpbmcgPSBwY2FsbCAodG9zdHJpbmcsIHZhbHVlKQogICAg
cmV0dXJuIHN1Y2Nlc3MgYW5kIHZhbHVlX3N0cmluZwogICAgICAgICAgICAgICAgICAgb3IgKCdl
cnJvciBkdXJpbmcgdG9zdHJpbmc6ICcgLi4gdG9zdHJpbmcgKHZhbHVlX3N0cmluZykpCiAgZW5k
CmVuZAoKbG9jYWwgZnVuY3Rpb24gZ2V0X2xpbmVzICh0ZXh0KQogIGxvY2FsIGxpbmVzID0ge30K
ICBmb3IgbGluZSBpbiB0ZXh0OmdtYXRjaCAoIiguLSlccj9cbiIpIGRvCiAgICB0YWJsZS5pbnNl
cnQgKGxpbmVzLCBsaW5lKQogIGVuZAogIGxvY2FsIGxhc3RfbGluZSA9IHRleHQ6bWF0Y2ggKCco
W15cbl0qKSQnKQogIGlmIGxhc3RfbGluZSBhbmQgbGFzdF9saW5lIH49ICcnIHRoZW4KICAgIHRh
YmxlLmluc2VydCAobGluZXMsIGxhc3RfbGluZSkKICBlbmQKICByZXR1cm4gbGluZXMKZW5kCgps
b2NhbCBmdW5jdGlvbiBjb21wYXJlX2tleXMgKGEsIGIpCiAgbG9jYWwgdGEgPSB0eXBlIChhLmtl
eSkKICBsb2NhbCB0YiA9IHR5cGUgKGIua2V5KQogIGlmIHRhIH49IHRiIHRoZW4KICAgIHJldHVy
biB0YSA8IHRiCiAgZW5kCiAgaWYgdGEgPT0gJ251bWJlcicgb3IgdGEgPT0gJ3N0cmluZycgdGhl
bgogICAgcmV0dXJuIGEua2V5IDwgYi5rZXkKICBlbHNlCiAgICByZXR1cm4gc2FmZV90b3N0cmlu
ZyAoYS5rZXkpIDwgc2FmZV90b3N0cmluZyAoYi5rZXkpCiAgZW5kCmVuZAoKbG9jYWwgZnVuY3Rp
b24gc29ydCAodCwgZikKICAtLSBpbnNlcnRpb24gc29ydAogIGYgPSBmIG9yIGZ1bmN0aW9uIChh
LCBiKSByZXR1cm4gYSA8IGIgZW5kCiAgZm9yIGkgPSAxLCAjdC0xIGRvCiAgICBsb2NhbCB2YWwg
PSB0W2krMV0KICAgIGxvY2FsIGogPSBpCiAgICB3aGlsZSBqID49IDEgYW5kIG5vdCBmKHRbal0s
IHZhbCkgZG8KICAgICAgdFtqKzFdID0gdFtqXQogICAgICBqID0gaiAtIDEKICAgIGVuZAogICAg
dFtqKzFdID0gdmFsCiAgZW5kCmVuZAoKbG9jYWwgZnVuY3Rpb24gYXBwcm9hY2ggKGZyb20sIHRv
KQogIHJldHVybiBmcm9tICsgKHRvIC0gZnJvbSkgKiAwLjI1CmVuZAoKbG9jYWwgZnVuY3Rpb24g
cm91bmQgKHZhbHVlKQogIHJldHVybiBtYXRoLmZsb29yICh2YWx1ZSArIDAuNSkKZW5kCgpsb2Nh
bCBmdW5jdGlvbiBwYXJzZV9tZXNzYWdlX2Zvcl9sb2NhdGlvbiAobXNnKQogIGxvY2FsIHBhdGgs
IGxpbmUsIGVyciA9IG1zZzptYXRjaCAoJ14oW146XSspOiglZCspOiguKikkJykKICByZXR1cm4g
cGF0aCwgdG9udW1iZXIgKGxpbmUpLCBlcnIKZW5kCgotLS0tIHN0YXRlIC0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKbG9jYWwgX0cgPSBfRwpsb2NhbCBlcnJvcl9tZXNz
YWdlCmxvY2FsIGVycm9yX3RocmVhZApsb2NhbCBlcnJvcl90cmFjZWJhY2sKbG9jYWwgaW5pdF9k
b25lID0gZmFsc2UKbG9jYWwgdXNlX3NtYWxsX2ZvbnQgPSBmYWxzZQpsb2NhbCBtb3VzZV93YXNf
Y2xpY2tlZCA9IGZhbHNlCgotLSBzdGFjayB2aWV3CmxvY2FsIHN0YWNrX2ZyYW1lcyA9IHt9Cmxv
Y2FsIGN1cnJlbnRfc3RhY2tfaW5kZXggPSAxCmxvY2FsIGhvdmVyZWRfc3RhY2tfaW5kZXggPSBm
YWxzZQpsb2NhbCBtb3VzZV9vdmVyX3N0YWNrID0gZmFsc2UKbG9jYWwgc3RhY2tfbWF4X3Njcm9s
bCA9IDAKbG9jYWwgc3RhY2tfc2Nyb2xsID0gMApsb2NhbCBzdGFja19zY3JvbGxfc21vb3RoID0g
MAoKLS0gdmFyaWFibGVzIHZpZXcKbG9jYWwgdmFyaWFibGVzID0ge30KbG9jYWwgaG92ZXJlZF92
YXJpYWJsZSA9IGZhbHNlCmxvY2FsIHZhcmlhYmxlc19tYXhfc2Nyb2xsID0gMApsb2NhbCB2YXJp
YWJsZXNfc2Nyb2xsID0gMApsb2NhbCB2YXJpYWJsZXNfc2Nyb2xsX3Ntb290aCA9IDAKbG9jYWwg
bW91c2Vfb3Zlcl92YXJpYWJsZXMgPSBmYWxzZQoKLS0gc291cmNlIHZpZXcKbG9jYWwgc291cmNl
X2xpbmVzID0ge30KCgotLS0tIG1haW4gZXZlbnRzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLQoKbG9jYWwgZnVuY3Rpb24gcmVidWlsZCAoKQogIC0tIHJlYnVpbGQgc3RhY2sgZnJh
bWUgaW5mbwogIHN0YWNrX2ZyYW1lcyA9IHt9CiAgdmFyaWFibGVzID0ge30KICBzb3VyY2VfbGlu
ZXMgPSB7fQogIHZhcmlhYmxlc19zY3JvbGwgPSAwCiAgdmFyaWFibGVzX3Njcm9sbF9zbW9vdGgg
PSAwCgogIGZvciBpID0gMCwgMjAgZG8KICAgIGxvY2FsIGluZm8gPSBkZWJ1Zy5nZXRpbmZvIChl
cnJvcl90aHJlYWQsIGkpCiAgICBpZiBub3QgaW5mbyB0aGVuCiAgICAgIGJyZWFrCiAgICBlbmQK
CiAgICBpZiBpbmZvLnNob3J0X3NyYyB0aGVuCiAgICAgIHRhYmxlLmluc2VydCAoc3RhY2tfZnJh
bWVzLCB7CiAgICAgICAgZmlsZW5hbWUgPSBmaWxlbmFtZV9vZiAoaW5mby5zaG9ydF9zcmMpLAog
ICAgICAgIHBhdGggPSBpbmZvLnNob3J0X3NyYywKICAgICAgICBsaW5lID0gaW5mby5jdXJyZW50
bGluZSwKICAgICAgICBkZXB0aCA9IGksCiAgICAgICAgZm5fbmFtZSA9IChpbmZvLm5hbWUgb3Ig
KGZpbGVuYW1lX29mIChpbmZvLnNob3J0X3NyYykgLi4gJzonIC4uIHRvc3RyaW5nIChpbmZvLmxp
bmVkZWZpbmVkKSkpLAogICAgICAgIHNvdXJjZSA9IGluZm8uc291cmNlLAogICAgICB9KQogICAg
ZW5kCiAgZW5kCgogIGxvY2FsIGZyYW1lID0gc3RhY2tfZnJhbWVzIFtjdXJyZW50X3N0YWNrX2lu
ZGV4XQoKICBpZiBub3QgZnJhbWUgdGhlbgogICAgcmV0dXJuCiAgZW5kCgogIC0tIHJlYnVpbGQg
dmFyaWFibGVzCiAgZG8KICAgIGlmIGRlYnVnLmdldGxvY2FsIHRoZW4KICAgICAgbG9jYWwgbG9j
YWxfaW5kZXggPSAxCiAgICAgIHJlcGVhdAogICAgICAgIGxvY2FsIG5hbWUsIHZhbHVlID0gZGVi
dWcuZ2V0bG9jYWwgKGVycm9yX3RocmVhZCwgZnJhbWUuZGVwdGgsIGxvY2FsX2luZGV4KQogICAg
ICAgIGlmIG5hbWUgdGhlbgogICAgICAgICAgaWYgbmFtZSB_PSAnKHRlbXBvcmFyeSknIHRoZW4K
ICAgICAgICAgICAgdGFibGUuaW5zZXJ0ICh2YXJpYWJsZXMsIHsKICAgICAgICAgICAgICBrZXkg
PSBuYW1lLAogICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUsCiAgICAgICAgICAgIH0pCiAgICAg
ICAgICBlbmQKICAgICAgICAgIGxvY2FsX2luZGV4ID0gbG9jYWxfaW5kZXggKyAxCiAgICAgICAg
ZW5kCiAgICAgIHVudGlsIG5vdCBuYW1lCiAgICBlbHNlCiAgICAgIHRhYmxlLmluc2VydCAodmFy
aWFibGVzLCB7CiAgICAgICAgZXJyb3IgPSAnbm8gZGVidWcuZ2V0bG9jYWwsIGNhblwndCBzaG93
IGxvY2FscycKICAgICAgfSkKICAgIGVuZAoKICAgIGlmIGRlYnVnLmdldHVwdmFsdWUgdGhlbgog
ICAgICBsb2NhbCBpbmZvID0gZGVidWcuZ2V0aW5mbyAoZXJyb3JfdGhyZWFkLCBmcmFtZS5kZXB0
aCkKICAgICAgaWYgaW5mbyBhbmQgaW5mby5mdW5jIHRoZW4KICAgICAgICBsb2NhbCB1cHZhbHVl
X2luZGV4ID0gMQogICAgICAgIHJlcGVhdAogICAgICAgICAgbG9jYWwgbmFtZSwgdmFsdWUgPSBk
ZWJ1Zy5nZXR1cHZhbHVlIChpbmZvLmZ1bmMsIHVwdmFsdWVfaW5kZXgpCiAgICAgICAgICBpZiBu
YW1lIHRoZW4KICAgICAgICAgICAgdGFibGUuaW5zZXJ0ICh2YXJpYWJsZXMsIHsKICAgICAgICAg
ICAgICBrZXkgPSBuYW1lLAogICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUsCiAgICAgICAgICAg
IH0pCiAgICAgICAgICAgIHVwdmFsdWVfaW5kZXggPSB1cHZhbHVlX2luZGV4ICsgMQogICAgICAg
ICAgZW5kCiAgICAgICAgdW50aWwgbm90IG5hbWUKICAgICAgZW5kCiAgICBlbHNlCiAgICAgIHRh
YmxlLmluc2VydCAodmFyaWFibGVzLCB7CiAgICAgICAgZXJyb3IgPSAnbm8gZGVidWcuZ2V0dXB2
YWx1ZSwgY2FuXCd0IHNob3cgdXB2YWx1ZXMnCiAgICAgIH0pCiAgICBlbmQKICBlbmQKCiAgLS0g
cmVidWlsZCBzb3VyY2UgbGluZXMKICBsb2NhbCBzb3VyY2UgPSBmcmFtZS5zb3VyY2UKICBpZiBz
b3VyY2UgdGhlbgogICAgaWYgc3RyaW5nLnN1YiAoc291cmNlLCAxLCAxKSA9PSAnQCcgdGhlbgog
ICAgICBsb2NhbCBmaWxlbmFtZSA9IHN0cmluZy5zdWIgKHNvdXJjZSwgMiwgI3NvdXJjZSkKICAg
ICAgc291cmNlID0gZmV0Y2ggKGZpbGVuYW1lKQogICAgZW5kCiAgICBpZiBzb3VyY2UgYW5kIHR5
cGUgKHNvdXJjZSkgPT0gJ3N0cmluZycgdGhlbgogICAgICBzb3VyY2VfbGluZXMgPSBnZXRfbGlu
ZXMgKHNvdXJjZSkKICAgIGVuZAogIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIGVycm9yX3VwZGF0
ZSAoKQogIGxvY2FsIGxhc3RfaW5kZXggPSBjdXJyZW50X3N0YWNrX2luZGV4CiAgaWYgYnRucCAo
NSkgb3Iga2V5cCAnc3BhY2UnIHRoZW4KICAgIHVzZV9zbWFsbF9mb250ID0gbm90IHVzZV9zbWFs
bF9mb250CiAgZW5kCiAgaWYgYnRucCAoMikgdGhlbgogICAgY3VycmVudF9zdGFja19pbmRleCA9
IG1hdGgubWF4ICgxLCBjdXJyZW50X3N0YWNrX2luZGV4IC0gMSkKICAgIHN0YWNrX3Njcm9sbCA9
IG1hdGgubWluIChjdXJyZW50X3N0YWNrX2luZGV4LTEsIHN0YWNrX3Njcm9sbCkKICBlbmQKICBp
ZiBidG5wICgzKSB0aGVuCiAgICBjdXJyZW50X3N0YWNrX2luZGV4ID0gbWF0aC5taW4gKCNzdGFj
a19mcmFtZXMsIGN1cnJlbnRfc3RhY2tfaW5kZXggKyAxKQogICAgc3RhY2tfc2Nyb2xsID0gbWF0
aC5tYXggKChjdXJyZW50X3N0YWNrX2luZGV4KSAtICgjc3RhY2tfZnJhbWVzIC0gc3RhY2tfbWF4
X3Njcm9sbCksIHN0YWNrX3Njcm9sbCkKICBlbmQKCiAgbG9jYWwgXywgXywgY2xpY2ssIF8sIHdo
ZWVsID0gbW91c2UgKCkKICBpZiBtb3VzZV9vdmVyX3N0YWNrIHRoZW4KICAgIHN0YWNrX3Njcm9s
bCA9IG1hdGgubWF4ICgwLCBtYXRoLm1pbiAoc3RhY2tfc2Nyb2xsIC0gd2hlZWwgKiAyLCBzdGFj
a19tYXhfc2Nyb2xsKSkKICBlbmQKICBzdGFja19zY3JvbGxfc21vb3RoID0gYXBwcm9hY2ggKHN0
YWNrX3Njcm9sbF9zbW9vdGgsIHN0YWNrX3Njcm9sbCkKICBpZiBtb3VzZV9vdmVyX3ZhcmlhYmxl
cyB0aGVuCiAgICB2YXJpYWJsZXNfc2Nyb2xsID0gbWF0aC5tYXggKDAsIG1hdGgubWluICh2YXJp
YWJsZXNfc2Nyb2xsIC0gd2hlZWwgKiAyLCB2YXJpYWJsZXNfbWF4X3Njcm9sbCkpCiAgZW5kCiAg
dmFyaWFibGVzX3Njcm9sbF9zbW9vdGggPSBhcHByb2FjaCAodmFyaWFibGVzX3Njcm9sbF9zbW9v
dGgsIHZhcmlhYmxlc19zY3JvbGwpCgogIGNsaWNrID0gY2xpY2sgfj0gMAogIGlmIGNsaWNrIGFu
ZCBub3QgbW91c2Vfd2FzX2NsaWNrZWQgdGhlbgogICAgaWYgaG92ZXJlZF9zdGFja19pbmRleCB0
aGVuCiAgICAgIGN1cnJlbnRfc3RhY2tfaW5kZXggPSBob3ZlcmVkX3N0YWNrX2luZGV4CiAgICBl
bmQKICAgIGlmIGhvdmVyZWRfdmFyaWFibGUgYW5kIHR5cGUgKGhvdmVyZWRfdmFyaWFibGUudmFs
dWUpID09ICd0YWJsZScgdGhlbgogICAgICBpZiBob3ZlcmVkX3ZhcmlhYmxlLmNvbnRlbnRzIHRo
ZW4KICAgICAgICBob3ZlcmVkX3ZhcmlhYmxlLmNvbnRlbnRzID0gbmlsCiAgICAgIGVsc2UKICAg
ICAgICBsb2NhbCBjb250ZW50cyA9IHt9CiAgICAgICAgaG92ZXJlZF92YXJpYWJsZS5jb250ZW50
cyA9IGNvbnRlbnRzCiAgICAgICAgZm9yIGssdiBpbiBwYWlycyAoaG92ZXJlZF92YXJpYWJsZS52
YWx1ZSkgZG8KICAgICAgICAgIHRhYmxlLmluc2VydCAoY29udGVudHMsIHsKICAgICAgICAgICAg
a2V5ID0gaywKICAgICAgICAgICAgdmFsdWUgPSB2LAogICAgICAgICAgfSkKICAgICAgICBlbmQK
ICAgICAgICBzb3J0IChjb250ZW50cywgY29tcGFyZV9rZXlzKQogICAgICBlbmQKICAgIGVuZAog
IGVuZAogIG1vdXNlX3dhc19jbGlja2VkID0gY2xpY2sKCiAgaWYgY3VycmVudF9zdGFja19pbmRl
eCB_PSBsYXN0X2luZGV4IHRoZW4KICAgIHJlYnVpbGQoKQogIGVuZAplbmQKCmxvY2FsIGZ1bmN0
aW9uIGVycm9yX2RyYXcgKCkKICBsb2NhbCBXID0gZ2V0X2Rpc3BsYXkoKTp3aWR0aCgpCiAgbG9j
YWwgSCA9IGdldF9kaXNwbGF5KCk6aGVpZ2h0KCkKCiAgbG9jYWwgcHJlZml4ID0gdXNlX3NtYWxs
X2ZvbnQgYW5kICdcMDE0JyBvciAnJwogIGxvY2FsIGZvbnRfaGVpZ2h0ID0gKHVzZV9zbWFsbF9m
b250IGFuZCA2IG9yIDExKQogIGxvY2FsIG14LCBteSA9IG1vdXNlKCkKICBsb2NhbCBvdmVyX3Nl
Y3Rpb24gPSBmYWxzZQogIGxvY2FsIHgwLCB5MCwgeCwgeQoKICBsb2NhbCBmdW5jdGlvbiBnb190
byAobmV3X3gsIG5ld195KQogICAgeDAsIHkwID0gbmV3X3gsIG5ld195CiAgICB4LCB5ID0geDAs
IHkwCiAgZW5kCgogIGxvY2FsIGZ1bmN0aW9uIHNlY3Rpb24gKHN4LCBzeSwgc3csIHNoKQogICAg
b3Zlcl9zZWN0aW9uID0KICAgICAgbXggPj0gc3ggYW5kIG14IDwgc3ggKyBzdyBhbmQKICAgICAg
bXkgPj0gc3kgYW5kIG15IDwgc3kgKyBzaAogICAgY2xpcCAoc3gsIHN5LCBzdywgc2gpCiAgICBn
b190byhzeCsyLCBzeSsyKQogIGVuZAoKICBsb2NhbCBmdW5jdGlvbiBwcmludF9ob3Jpem9udGFs
ICh0ZXh0LCBjb2xvcikKICAgIGxvY2FsIG5ld194LCBfbmV3X3kgPSBwcmludCAocHJlZml4IC4u
IHRleHQsIHgsIHksIGNvbG9yKQogICAgeCA9IG5ld194CiAgZW5kCgogIGxvY2FsIGZ1bmN0aW9u
IHByaW50X2xpbmUgKHRleHQsIGNvbG9yKQogICAgbG9jYWwgX25ld194LCBuZXdfeSA9IHByaW50
IChwcmVmaXggLi4gdGV4dCwgeCwgeSwgY29sb3IpCiAgICB4ID0geDAKICAgIHkgPSBuZXdfeQog
IGVuZAoKICAtLSBkcmF3IHNldHVwCiAgY2xzICgwKQogIC0tIGxpZ2h0ZXIgZGFyayBncmF5IGZv
ciByZWFkYWJpbGl0eQogIHBhbCAoNSwgMHhmZjcwNzA3MCwgMikKICBjb2xvciAoNSkKCiAgLS0g
ZXJyb3IgbWVzc2FnZQogIHNlY3Rpb24gKDAsIDAsIFcsIEgvMikKICBtb3VzZV9vdmVyX3N0YWNr
ID0gb3Zlcl9zZWN0aW9uCgogIGxvY2FsIGxvY19wYXRoLCBsb2NfbGluZSwgZXJyID0gcGFyc2Vf
bWVzc2FnZV9mb3JfbG9jYXRpb24gKGVycm9yX21lc3NhZ2UpCiAgaWYgbG9jX3BhdGggdGhlbgog
ICAgcHJpbnRfbGluZSAoJ2Vycm9yIGF0ICcgLi4gbG9jX3BhdGggLi4gJzonIC4uIGxvY19saW5l
IC4uICc6JywgNikKICAgIHByaW50X2xpbmUgKCcgICcgLi4gZXJyLCA4KQogIGVsc2UKICAgIHBy
aW50X2xpbmUgKCdlcnJvcjonLCA2KQogICAgcHJpbnRfbGluZSAoJyAgJyAuLiBlcnJvcl9tZXNz
YWdlLCA4KQogIGVuZAoKICAtLSBzdGFjayBmcmFtZXMKICBwcmludF9saW5lICgnc3RhY2s6Jywg
NikKICBzZWN0aW9uICgwLCB5LCBXLCBILzIteSkKICBsb2NhbCBzdGFja190b3BfeSA9IHkKICB5
ID0geSAtIHJvdW5kIChzdGFja19zY3JvbGxfc21vb3RoICogZm9udF9oZWlnaHQpCiAgbG9jYWwg
bGFzdF9ob3ZlcmVkX3N0YWNrX2luZGV4ID0gaG92ZXJlZF9zdGFja19pbmRleAogIGhvdmVyZWRf
c3RhY2tfaW5kZXggPSBmYWxzZQogIGZvciBpLCBmcmFtZSBpbiBpcGFpcnMgKHN0YWNrX2ZyYW1l
cykgZG8KICAgIGNvbG9yIChsYXN0X2hvdmVyZWRfc3RhY2tfaW5kZXggPT0gaSBhbmQgNyBvcgog
ICAgICAgICAgIGN1cnJlbnRfc3RhY2tfaW5kZXggPT0gaSBhbmQgNiBvciA1KQoKICAgbG9jYWwg
eV9iZWZvcmUgPSB5CiAgICBwcmludF9saW5lIChzdHJpbmcuZm9ybWF0ICgnICAlczolZCBpbiBm
dW5jdGlvbiAlcycsCiAgICAgIGZyYW1lLmZpbGVuYW1lLCBmcmFtZS5saW5lLCBmcmFtZS5mbl9u
YW1lICkpCiAgICBpZiBvdmVyX3NlY3Rpb24gdGhlbgogICAgICBpZiBteSA_PSB5X2JlZm9yZSBh
bmQgbXkgPCB5IHRoZW4KICAgICAgICBob3ZlcmVkX3N0YWNrX2luZGV4ID0gaQogICAgICBlbmQK
ICAgIGVuZAogIGVuZAogIHN0YWNrX21heF9zY3JvbGwgPSAjc3RhY2tfZnJhbWVzIC0gKEgvMiAt
IHN0YWNrX3RvcF95KSAvIGZvbnRfaGVpZ2h0CgogIGxvY2FsIGZyYW1lID0gc3RhY2tfZnJhbWVz
IFtjdXJyZW50X3N0YWNrX2luZGV4XQogIGlmIG5vdCBmcmFtZSB0aGVuCiAgICByZXR1cm4KICBl
bmQKCiAgLS0gdmFyaWFibGVzCiAgc2VjdGlvbiAoMCwgSC8yLCBXLzIsIEgvMikKICBtb3VzZV9v
dmVyX3ZhcmlhYmxlcyA9IG92ZXJfc2VjdGlvbgogIHByaW50X2xpbmUgKCd2YXJpYWJsZXM6Jywg
NikKICBzZWN0aW9uICgwLCB5LCBXLzIsIEgteSkKICBsb2NhbCB2YXJpYWJsZXNfdG9wX3kgPSB5
CiAgeSA9IHkgLSByb3VuZCAodmFyaWFibGVzX3Njcm9sbF9zbW9vdGggKiBmb250X2hlaWdodCkK
ICBsb2NhbCBsYXN0X2hvdmVyZWRfdmFyaWFibGUgPSBob3ZlcmVkX3ZhcmlhYmxlCiAgaG92ZXJl
ZF92YXJpYWJsZSA9IGZhbHNlCiAgbG9jYWwgdmFyaWFibGVfY291bnQgPSAwCiAgbG9jYWwgZnVu
Y3Rpb24gZHJhd192YXJpYWJsZSAodmFyaWFibGUsIGluZGVudCkKICAgIHZhcmlhYmxlX2NvdW50
ID0gdmFyaWFibGVfY291bnQgKyAxCiAgICBsb2NhbCBob3ZlcmVkID0gdmFyaWFibGUgPT0gbGFz
dF9ob3ZlcmVkX3ZhcmlhYmxlCiAgICBsb2NhbCB5X2JlZm9yZSA9IHkKICAgIGlmIHZhcmlhYmxl
LmVycm9yIHRoZW4KICAgICAgcHJpbnRfbGluZSAoJyAgJyAuLiB2YXJpYWJsZS5lcnJvciwgOCkK
ICAgIGVsc2UKICAgICAgcHJpbnRfaG9yaXpvbnRhbCAoaW5kZW50IC4uIHZhcmlhYmxlLmtleSwg
aG92ZXJlZCBhbmQgNyBvciA2KQogICAgICBwcmludF9ob3Jpem9udGFsICgnOiAnLCB2YXJpYWJs
ZSA9PSBsYXN0X2hvdmVyZWRfdmFyaWFibGUgYW5kIDcgb3IgNSkKICAgICAgcHJpbnRfbGluZSAo
c2FmZV90b3N0cmluZyh2YXJpYWJsZS52YWx1ZSkpCiAgICBlbmQKCiAgICBpZiBvdmVyX3NlY3Rp
b24gYW5kIHR5cGUgKHZhcmlhYmxlLnZhbHVlKSA9PSAndGFibGUnIHRoZW4KICAgICAgaWYgbXgg
Pj0gMCBhbmQgbXggPCBXLzIgYW5kIG15ID49IHlfYmVmb3JlIGFuZCBteSA8IHkgdGhlbgogICAg
ICAgIGhvdmVyZWRfdmFyaWFibGUgPSB2YXJpYWJsZQogICAgICBlbmQKICAgIGVuZAoKICAgIGlm
IHZhcmlhYmxlLmNvbnRlbnRzIHRoZW4KICAgICAgZm9yIF8sIHYgaW4gaXBhaXJzICh2YXJpYWJs
ZS5jb250ZW50cykgZG8KICAgICAgICBkcmF3X3ZhcmlhYmxlICh2LCBpbmRlbnQgLi4gJyAgJykK
ICAgICAgZW5kCiAgICBlbmQKICBlbmQKICBmb3IgXywgdmFyaWFibGUgaW4gaXBhaXJzICh2YXJp
YWJsZXMpIGRvCiAgICBkcmF3X3ZhcmlhYmxlICh2YXJpYWJsZSwgJyAgJykKICBlbmQKICB2YXJp
YWJsZXNfbWF4X3Njcm9sbCA9IHZhcmlhYmxlX2NvdW50IC0gKEggLSB2YXJpYWJsZXNfdG9wX3kp
IC8gZm9udF9oZWlnaHQKCiAgLS0gc291cmNlCiAgc2VjdGlvbiAoVy8yLCBILzIsIFcvMiwgSC8y
KQogIHByaW50X2xpbmUgKCdzb3VyY2Ugb2YgJyAuLiBmcmFtZS5wYXRoIC4uICc6JywgNikKICBs
b2NhbCBjb250ZXh0ID0gdXNlX3NtYWxsX2ZvbnQgYW5kIDEwIG9yIDUKICBsb2NhbCBpX21pbiA9
IG1hdGgubWF4ICgxLCBmcmFtZS5saW5lIC0gY29udGV4dCkKICBsb2NhbCBpX21heCA9IG1hdGgu
bWluICgjc291cmNlX2xpbmVzLCBmcmFtZS5saW5lICsgY29udGV4dCkKICBmb3IgaSA9IGlfbWlu
LCBpX21heCBkbwogICAgY29sb3IgKGkgPT0gZnJhbWUubGluZSBhbmQgNiBvciA1KQogICAgcHJp
bnRfaG9yaXpvbnRhbCAoc3RyaW5nLmZvcm1hdCAoJyU0ZCAnLCBpKSkKICAgIHByaW50X2xpbmUg
KHNvdXJjZV9saW5lcyBbaV0pCiAgZW5kCgogIGNsaXAgKCkKZW5kCgotLS0tIHRha2luZyBvdmVy
IGR1cmluZyBlcnJvcnMgLS0tLS0tLS0tLS0tLS0tLS0tLQoKbG9jYWwgZnVuY3Rpb24gcmVzZXQg
KCkKICAtLSBiYXNlZCBvbiByZXNldCgpIGZyb20gL3N5c3RlbS9saWIvaGVhZC5sdWEKICAtLSBz
ZWUgdGhhdCBmbiBmb3IgaW5mbwogIHdpbmRvdyB7CiAgICBjdXJzb3IgPSAxLAogICAgcmVzaXph
YmxlID0gdHJ1ZSwKICB9CiAgbm90ZSAoKQogIC0tIHBpY290cm9uIHNlZ2ZhdWx0cyBpZiB3ZSBj
YWxsIGNsaXAoKSBkdXJpbmcgaW5pdAogIGlmIGluaXRfZG9uZSB0aGVuCiAgICBjbGlwICgpCiAg
ZW5kCiAgY2FtZXJhICgpCiAgcGFsICgpCiAgcGFsdCAoKQogIG1lbXNldCAoMHg1NTFmLCAwLCA5
KQogIHBva2UgKDB4NTUwOCwgMHgzZikKICBwb2tlICgweDU1MDksIDB4M2YpCiAgcG9rZSAoMHg1
NTBhLCAweDNmKQogIHBva2UgKDB4NTUwYiwgMHgwMCkKICBjb2xvciAoNikKICBmaWxscCAoKQog
IHBva2UgKDB4NWY1NiwgMHg0MCkKICBwb2tlICgweDVmNTcsIDB4NTYpCiAgcG9rZSAoMHg0MDAw
LCBnZXQgKGZldGNoIi9zeXN0ZW0vZm9udHMvbGlsLmZvbnQiKSkKICBwb2tlICgweDU2MDAsIGdl
dCAoZmV0Y2giL3N5c3RlbS9mb250cy9wOC5mb250IikpCiAgcG9rZSAoMHg1NjA2LCBwZWVrICgw
eDU2MDApICogNCkKICBwb2tlICgweDU2MDUsIDB4MikKICBwb2tlICgweDVmMjgsIDY0KQogIHBv
a2UgKDB4NWYyOSwgNjQpCmVuZAoKbG9jYWwgZnVuY3Rpb24gb25fZXJyb3IgKHRocmVhZCwgbWVz
c2FnZSkKICAtLSBkbyB0aGlzIGZpcnN0IGluIGNhc2Ugd2UgaGl0IGFub3RoZXIgZXJyb3IKICBl
cnJvcl90cmFjZWJhY2sgPSBkZWJ1Zy50cmFjZWJhY2sgKHRocmVhZCwgbWVzc2FnZSkKICBwcmlu
dGggKGVycm9yX3RyYWNlYmFjaykKCiAgZXJyb3JfdGhyZWFkID0gdGhyZWFkCiAgZXJyb3JfbWVz
c2FnZSA9IHRvc3RyaW5nIChtZXNzYWdlKQogIHJlc2V0ICgpCiAgcmVidWlsZCAoKQogIC0tIGp1
bXAgdG8gdGhlIHByb3BlciBzdGFjayBmcmFtZSBpZiB3ZSBjYW4KICBsb2NhbCBsb2NfcGF0aCwg
bG9jX2xpbmUgPSBwYXJzZV9tZXNzYWdlX2Zvcl9sb2NhdGlvbiAoZXJyb3JfbWVzc2FnZSkKICBm
b3IgaSwgZnJhbWUgaW4gaXBhaXJzIChzdGFja19mcmFtZXMpIGRvCiAgICBpZiBmcmFtZS5wYXRo
ID09IGxvY19wYXRoIGFuZCBmcmFtZS5saW5lID09IGxvY19saW5lIHRoZW4KICAgICAgY3VycmVu
dF9zdGFja19pbmRleCA9IGkKICAgICAgcmVidWlsZCAoKQogICAgICBicmVhawogICAgZW5kCiAg
ZW5kCmVuZAoKLS0tLSBpbnN0YWxsIG1haW4gZXZlbnRzIHRoYXQgY2F0Y2ggZXJyb3JzIC0tLS0t
LS0KCmxvY2FsIHVzZXJfaW5pdCA9IHJhd2dldCAoX0csICdfaW5pdCcpCmxvY2FsIHVzZXJfdXBk
YXRlID0gcmF3Z2V0IChfRywgJ191cGRhdGUnKQpsb2NhbCB1c2VyX2RyYXcgPSByYXdnZXQgKF9H
LCAnX2RyYXcnKQoKYXNzZXJ0ICh1c2VyX2RyYXcgYW5kIHVzZXJfdXBkYXRlLAogICdwbGVhc2Ug
aW5jbHVkZSBlcnJvcl9leHBsb3JlciBhZnRlciBkZWZpbmluZyBib3RoIF91cGRhdGUgYW5kIF9k
cmF3JykKCmlmIG5vdCByYXdnZXQgKF9HLCAnZGVidWcnKSBvciBub3QgZGVidWcudHJhY2ViYWNr
IG9yIG5vdCBkZWJ1Zy5nZXRpbmZvIHRoZW4KICBwcmludGggJ2Vycm9yIGV4cGxvcmVyOiBkZWJ1
ZyBtb2R1bGUgbm90IGF2YWlsYWJsZSwgZXJyb3IgZXhwbG9yZXIgd2lsbCBiZSBkaXNhYmxlZCcK
ICByZXR1cm4KZW5kCgpsb2NhbCBmdW5jdGlvbiBjYWxsX2Vycm9yX2V2ZW50IChmbiwgLi4uKQog
IC0tIGlmIHRoZXJlJ3MgYW4gZXJyb3IgaW4gb3VyIHVwZGF0ZSBvciBkcmF3LCB0aHJvdyB0aGUK
ICAtLSBvcmlnaW5hbCBlcnJvciBhcyB3ZWxsIGFzIHRoZSBuZXcgZXJyb3IKICBsb2NhbCBzdWNj
ZXNzLCBlcnIgPSBwY2FsbCAoZm4sIC4uLikKICBpZiBub3Qgc3VjY2VzcyB0aGVuCiAgICBlcnJv
ciAoZXJyb3JfdHJhY2ViYWNrIC4uICdcblxuZXJyb3IgZHVyaW5nIGVycm9yIGhhbmRsaW5nOiAn
IC4uIHRvc3RyaW5nIChlcnIpKQogIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIGNhbGxfcHJvdGVj
dGVkIChmbikKICAtLSBuZWVkIHRvIHVzZSBjb3Jlc3VtZSBldGMuIGFuZCBub3QgY29yb3V0aW5l
LnJlc3VtZSBldGMuCiAgLS0gZm9yIHBpY290cm9uIGNvbXBhdGliaWxpdHkKICBsb2NhbCB0aHJl
YWQgPSBjb2NyZWF0ZSAoZm4pCiAgbG9jYWwgc3VjY2VzcywgbWVzc2FnZSA9IGNvcmVzdW1lKHRo
cmVhZCkKICB3aGlsZSBjb3N0YXR1cyAodGhyZWFkKSB_PSAnZGVhZCcgZG8KICAgIHlpZWxkICgp
CiAgICBzdWNjZXNzLCBtZXNzYWdlID0gY29yZXN1bWUgKHRocmVhZCkKICBlbmQKICBpZiBub3Qg
c3VjY2VzcyB0aGVuCiAgICBjYWxsX2Vycm9yX2V2ZW50IChvbl9lcnJvciwgdGhyZWFkLCBtZXNz
YWdlKQogIGVuZAplbmQKCmlmIHVzZXJfaW5pdCB0aGVuCiAgZnVuY3Rpb24gX2luaXQgKCkKICAg
IGNhbGxfcHJvdGVjdGVkICh1c2VyX2luaXQpCiAgICBpbml0X2RvbmUgPSB0cnVlCiAgZW5kCmVs
c2UKICBpbml0X2RvbmUgPSB0cnVlCmVuZAoKZnVuY3Rpb24gX3VwZGF0ZSAoKQogIGlmIGVycm9y
X3RocmVhZCB0aGVuCiAgICBjYWxsX2Vycm9yX2V2ZW50IChlcnJvcl91cGRhdGUpCiAgZWxzZQog
ICAgY2FsbF9wcm90ZWN0ZWQgKHVzZXJfdXBkYXRlKQogIGVuZAplbmQKCmZ1bmN0aW9uIF9kcmF3
ICgpCiAgaWYgZXJyb3JfdGhyZWFkIHRoZW4KICAgIGNhbGxfZXJyb3JfZXZlbnQgKGVycm9yX2Ry
YXcpCiAgZWxzZQogICAgY2FsbF9wcm90ZWN0ZWQgKHVzZXJfZHJhdykKICBlbmQKZW5k
:: free_part.lua
--[[pod_format="raw",created="2025-05-19 18:14:49",modified="2025-05-20 17:53:00",revision=433]]
function new_free_part(position,part)
	return{
		_position=position,
		_speed=new_point(0,0),
		part=part,
		init=function(self)
			self.part._position=self._position
			self.part:init()
			self._speed=	self._speed:randomize(new_point(-0.1,1))
		end,
		update=function(self)  			
			self._position+=self._speed --apply velocity
			self.part._position=self._position
			if(is_point_on_screen(self._position)==false) then
				self:kill()
			end	
		
		end,
		draw=function(self)	 	 	
	    	self.part:draw()
		end,
		kill=function(self)
			del(game.free_parts,self) --fix
		end
	}
end

:: game.lua
--[[pod_format="raw",created="2025-05-19 15:03:03",modified="2025-05-20 20:31:23",revision=781]]
function new_game()
	return{
		_ship=new_ship(new_point(480/2,270/2+30)),
		free_parts={},
		asteroids={},
		_part_spawner,
		_asteroid_spawner,
		score=0,
		init=function(self)
			self._part_spawner=new_part_spawner()
			self._part_spawner:init()
			self._asteroid_spawner=new_asteroid_spawner()
			self._asteroid_spawner:init()
			self.sprites1=fetch("./gfx/0.gfx")	
			self._ship:init()	
		end,
		update=function(self)
			self._ship:update()
			self._part_spawner:update()
			self._asteroid_spawner:update()
			foreach(self.free_parts, function(part)
	    		part:update()
	 	 	end)
	 	 	foreach(self.asteroids, function(asteroid)
	    		asteroid:update()
	 	 	end)

	 		if(flr(time()*60)%60==0)then
	 			self.score+=1
	 			self._part_spawner.spawn_rate+=1
				self._asteroid_spawner.spawn_rate=max(0,self._asteroid_spawner.spawn_rate-1)
	 		end
	 		--pq(#self._free_parts,#self._ship._parts)
		
	 	
		end,
		draw=function(self)
			cls()
			foreach(self.free_parts, function(part)
	    		part:draw()
	 	 	end)
	 	 	foreach(self.asteroids, function(asteroid)
	    		asteroid:draw()
	 	 	end)
			self._ship:draw()
			print_right(self.score,0)
		end		
	}
end
:: game_over.lua
--[[pod_format="raw",created="2025-05-20 16:43:55",modified="2025-05-20 20:31:23",revision=83]]
function new_gameover()
	return{
	timer,
	wait_time=3,
	init=function(self)
		self.timer=time()
		camera_helper:set_camera(new_point(0,0),true)
		stop_sfx(nil,0
		)
	end,
	update=function(self)
		camera_helper:update_camera()
		if(self.timer+self.wait_time<time()) then
		 restart()
		end

	end,
	draw=function(self)
		cls()
		print_centered("Game Over",110,8)
	end}	
end
function new_win()
	return{
	timer,
	wait_time=3,
	init=function(self)
		self.timer=time()
		camera_helper:set_camera(new_point(0,0),true)
		stop_sfx()
	end,
	update=function(self)
		camera_helper:update_camera()
		if(self.timer+self.wait_time<time()) then
			next_level()	
		end

	end,
	draw=function(self)
		cls()
		print_centered("You live to see another day",110,8)
	end}	
end
:: helpers.lua
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNS0wNS0xOSAxNToxMzo1MyIsbW9k
aWZpZWQ9IjIwMjUtMDUtMjAgMTk6MTU6MzIiLHJldmlzaW9uPTQyNl1dCmZ1bmN0aW9uIHNtKGEp
CglyZXR1cm4gc2V0bWV0YXRhYmxlKGEsYSkKZW5kCmZ1bmN0aW9uIHJhbmRvbShuKQoJaWYobj4w
KSB0aGVuIAoJCXJldHVybiBybmQoKSpuCgllbHNlCgkJcmV0dXJuIC1uK3JuZCgpKm4qMiAKCWVu
ZAplbmQKZnVuY3Rpb24gcGlja19yYW5kb20oYXJyKQoJaWYgYXJyPT1uaWxsIHRoZW4gcmV0dXJu
IG5pbCBlbmQKCWlmICNhcnIgPT0gMCB0aGVuIHJldHVybiBuaWwgZW5kCglyZXR1cm4gYXJyW2Zs
cihybmQoI2FycikpICsgMV0KZW5kCmZ1bmN0aW9uIGJsb2NrX2NvbGxpc2lvbihwb2ludEEsIHNp
emVBLCBwb2ludEIsIHNpemVCKQoJbG9jYWwgYXgxLCBheTEgPSBwb2ludEEueCwgcG9pbnRBLnkK
CWxvY2FsIGF4MiwgYXkyID0gYXgxICsgc2l6ZUEueCwgYXkxICsgc2l6ZUEueQoKCWxvY2FsIGJ4
MSwgYnkxID0gcG9pbnRCLngsIHBvaW50Qi55Cglsb2NhbCBieDIsIGJ5MiA9IGJ4MSArIHNpemVC
LngsIGJ5MSArIHNpemVCLnkKCglpZiBheDEgPCBieDIgYW5kIGF4MiA_IGJ4MSBhbmQgYXkxIDwg
YnkyIGFuZCBheTIgPiBieTEgdGhlbgoJCXJldHVybiBwb2ludEEtcG9pbnRCCgllbmQKCglyZXR1
cm4gbmlsCmVuZApmdW5jdGlvbiBjYXJkaW5hbF9kaXJlY3Rpb24odiwgdGhyZXNob2xkKQoJdGhy
ZXNob2xkID0gdGhyZXNob2xkIG9yIDEgIC0tIG1pbmltdW0gZGlmZmVyZW5jZSBiZXR3ZWVuIGF4
ZXMKCglsb2NhbCBhYnNfeCA9IGFicyh2LngpCglsb2NhbCBhYnNfeSA9IGFicyh2LnkpCglpZiBh
YnNfeCA_IGFic195ICsgdGhyZXNob2xkIHRoZW4KCQlyZXR1cm4gbmV3X3BvaW50KHNpZ24odi54
KSwgMCkKCWVsc2VpZiBhYnNfeSA_IGFic194ICsgdGhyZXNob2xkIHRoZW4KCQlyZXR1cm4gbmV3
X3BvaW50KDAsIHNpZ24odi55KSkKCWVsc2UKCQlyZXR1cm4gbmlsICAtLSB0b28gZGlhZ29uYWws
IGRvbid0IGF0dGFjaAoJZW5kCmVuZApmdW5jdGlvbiBzaWduKG4pCglpZiBuID4gMCB0aGVuIHJl
dHVybiAxCgllbHNlaWYgbiA8IDAgdGhlbiByZXR1cm4gLTEKCWVsc2UgcmV0dXJuIDAKCWVuZApl
bmQKZnVuY3Rpb24gZ2V0X3N0cmluZ193aWR0aChzKQoJbG9jYWwgd2lkdGg9cHJpbnQocywtMTAw
MCwwKQoJcHJpbnQoIiIsMCwwKQoJcmV0dXJuIHdpZHRoKzEwMDAKZW5kCmZ1bmN0aW9uIHByaW50
X2NlbnRlcmVkKHRleHQsIHksIGNvbCkKCWNvbCA9IGNvbCBvciBjb2xvcnMud2hpdGUKCWxvY2Fs
IHRleHRfd2lkdGggPWdldF9zdHJpbmdfd2lkdGgodGV4dCkKCWxvY2FsIHggPSAoc2NyZWVuV2lk
dGggLSB0ZXh0X3dpZHRoKSBcIDIKCXByaW50KHRleHQseCtjYW1lcmFfaGVscGVyOmdldF9jYW1l
cmEoKS54LCB5K2NhbWVyYV9oZWxwZXI6Z2V0X2NhbWVyYSgpLnksIGNvbCkKZW5kCmZ1bmN0aW9u
IHByaW50X3JpZ2h0KHRleHQsIHksIGNvbCkKCWNvbCA9IGNvbCBvciAgY29sb3JzLndoaXRlCgls
b2NhbCB0ZXh0X3dpZHRoID1nZXRfc3RyaW5nX3dpZHRoKHRleHQpCglsb2NhbCB4ID0gc2NyZWVu
V2lkdGggLSB0ZXh0X3dpZHRoCglwcmludCh0ZXh0LCB4K2NhbWVyYV9oZWxwZXI6Z2V0X2NhbWVy
YSgpLngsIHksIGNvbCkKZW5kCmZ1bmN0aW9uIGlzX3BvaW50X29uX3NjcmVlbihwb2ludCkKCQoJ
bG9jYWwgY2FtZXJhX3Bvcz1jYW1lcmFfaGVscGVyOmdldF9jYW1lcmEoKQoJCglyZXR1cm4gKAoJ
CXBvaW50LnggPj0gY2FtZXJhX3Bvcy54IC0gdGlsZVNpemUgYW5kIHBvaW50LnggPCBjYW1lcmFf
cG9zLnggKyBzY3JlZW5XaWR0aCBhbmQKCQlwb2ludC55ID49IGNhbWVyYV9wb3MueSAtIHRpbGVT
aXplIGFuZCBwb2ludC55IDwgY2FtZXJhX3Bvcy55ICsgc2NyZWVuSGVpZ2h0CgkpCmVuZApjb2xv
cnMgPSB7CglibGFjayAgICAgICAgPSAwLAoJZGFya19ibHVlICAgID0gMSwKCWRhcmtfcHVycGxl
ICA9IDIsCglkYXJrX2dyZWVuICAgPSAzLAoJYnJvd24gICAgICAgID0gNCwKCWRhcmtfZ3JheSAg
ICA9IDUsCglsaWdodF9ncmF5ICAgPSA2LAoJd2hpdGUgICAgICAgID0gNywKCXJlZCAgICAgICAg
ICA9IDgsCglvcmFuZ2UgICAgICAgPSA5LAoJeWVsbG93ICAgICAgID0gMTAsCglncmVlbiAgICAg
ICAgPSAxMSwKCWJsdWUgICAgICAgICA9IDEyLAoJaW5kaWdvICAgICAgID0gMTMsCglwaW5rICAg
ICAgICAgPSAxNCwKCXBlYWNoICAgICAgICA9IDE1LAoKCS0tIEV4dGVuZGVkIGNvbG9ycyAoMTbi
gJM2MykgbWF5IHZhcnkgYnkgcGFsZXR0ZSBzZXR1cCwgYnV0IGhlcmUncyBhIHVzZWZ1bCBkZWZh
dWx0IHNldDoKCXJvc2UgICAgICAgICA9IDE2LAoJc2FsbW9uICAgICAgID0gMTcsCgliZWlnZSAg
ICAgICAgPSAxOCwKCWxpZ2h0X3llbGxvdyA9IDE5LAoJbGlnaHRfZ3JlZW4gID0gMjAsCglzZWFm
b2FtICAgICAgPSAyMSwKCXNreV9ibHVlICAgICA9IDIyLAoJcGVyaXdpbmtsZSAgID0gMjMsCgls
YXZlbmRlciAgICAgPSAyNCwKCWxpZ2h0X3BpbmsgICA9IDI1LAoJZGFya19icm93biA9MjgKCS0t
IC4uLnlvdSBjYW4gY29udGludWUgYWRkaW5nIGFzIG5lZWRlZAp9Cg==
:: include.lua
--[[pod_format="raw",created="2025-05-19 15:00:08",modified="2025-05-20 20:31:23",revision=587]]
include "lib.lua"
include "point.lua"
include "helpers.lua"
include "sfx.lua"
include "camera.lua"
include "parts.lua"
include "input.lua"
include "ship.lua"
include "free_part.lua"
include "part_spawner.lua"
include "asteroid_spawner.lua"
include "asteroid.lua"
include "start.lua"
include "game.lua"
include "game_over.lua"
:: input.lua
--[[pod_format="raw",created="2025-05-19 16:29:01",modified="2025-05-19 18:10:29",revision=48]]
input_lookup = {
	-- Define logical mappings for clarity
	lpad = {
		left = 0,
		right = 1,
		up = 2,
		down = 3
	},
	rpad = {
		left = 8,
		right = 9,
		up = 10,
		down = 11
	},
	buttons = {
		o = 4,
		x = 5,
		menu=6,
		a = 12,
		b = 13
	}
}
function new_input(player)
	return {
	player=player or 0,
	_button_down_frame = {},
button=function(self, b, hold)
	local now = t()
	if type(b) ~= "table" then
		b = {b}
	end
	local key = join_with_dashes(b)

	if all_buttons_pressed(b, self.player) then
		local start = self._button_down_frame[key]
		if not start then
			self._button_down_frame[key] = now
			return 1  -- just pressed
		end

		local held = now - start 

		if hold then
			if held >= hold then
				if held >= hold + 0.1 then  -- small extra time past charge (you can adjust)
					return 4  -- overheld
				else
					return 3  -- finished charging
				end
			else
				return 2  -- still holding
			end
		else
			return held  -- legacy: how long held (seconds)
		end
	else
		self._button_down_frame[key] = nil
		return nil
	end
end,
		button_press=function(self,b)
			return btnp(b,self.player)
		end
	}
end
function join_with_dashes(arr)
	local result = ""
	for i = 1, #arr do
		result ..= arr[i]
		if i < #arr then
			result ..= "-"
		end
	end
	return result
end
function all_buttons_pressed(buttons, player)
	player = player or 0  -- default to player 0 if not specified
	for i = 1, #buttons do
		if not btn(buttons[i], player) then
			return false
		end
	end
	return true
end
:: lib.lua
--[[pod_format="raw",created="2025-05-19 15:05:26",modified="2025-05-19 15:05:47",revision=3]]
--lib

-- pq-debugging, by pancelor

-- quotes all args and prints to host console
-- usage:
--   pq("handles nils", many_vars, {tables=1, work=11, too=111})
function pq(...)
  printh(qq(...))
  return ...
end

-- quotes all arguments into a string
-- usage:
--   ?qq("p.x=",x,"p.y=",y)
function qq(...)
  local args=pack(...)
  local s=""
  for i=1,args.n do
    s..=quote(args[i]).." "
  end
  return s
end

-- quote a single thing
-- like tostr() but for tables
-- don't call this directly; call pq or qq instead
function quote(t, depth)
  depth=depth or 4 --avoid inf loop
  if type(t)~="table" or depth<=0 then return tostr(t) end

  local s="{"
  for k,v in pairs(t) do
    s..=tostr(k).."="..quote(v,depth-1)..","
  end
  return s.."}"
end

-- like sprintf (from c)
-- usage:
--   ?qf("%/% is %%",3,8,3/8*100,"%")
function qf(fmt,...)
  local parts,args=split(fmt,"%"),pack(...)
  local str=deli(parts,1)
  for ix,pt in ipairs(parts) do
    str..=quote(args[ix])..pt
  end
  if args.n~=#parts then
    -- uh oh! mismatched arg count
    str..="(extraqf:"..(args.n-#parts)..")"
  end
  return str
end
function pqf(...) printh(qf(...)) end
:: main.lua
--[[pod_format="raw",created="2025-05-19 14:05:35",modified="2025-05-20 19:12:40",revision=476]]
include "include.lua"
tileSize=16
halfTileSize=tileSize/2
screenWidth=480 --30 tiles
screenHeight=270 --16+ tiles
screenHeightTileAdjusted=256 
mode=1
input=new_input(0)
modes= {new_start(),new_game(),new_gameover(),new_win()}
function start_level()
	mode=2
	game=	modes[mode]
	modes[mode]:init()
end
function	restart()
	modes[2]=new_game()
	mode=1
	modes[mode]:init()
end

function	gameover()
	mode=3
	current_level=1
	modes[mode]:init()
end
function	win()
	mode=4

	modes[mode]:init()
end
function _init()	
	pq("----------------restart-----------------")
	modes[mode]:init()
end

function _update()
	modes[mode]:update()
end

function _draw()
	modes[mode]:draw()
end
include "error_explorer.lua"
:: parts.lua
--[[pod_format="raw",created="2025-05-19 15:12:11",modified="2025-05-20 20:31:23",revision=618]]
function new_part(position)
	return{
		_position=position,
		_sprite=0,
		_sprites,
		name="dummy",
		attach_sides = {
			["1,0"] = true,   -- right
			["-1,0"] = true, -- left
			["0,-1"] = true,  -- up
			["0,1"] = true   -- down
		},
		mass=1,
		thrust=0,
		location=new_point(0,0),
		init=function(self)
			self._sprites=game.sprites1
		end,
		update=function(self)
		end,
		draw=function(self)
			spr(self._sprites[self._sprite].bmp,self._position.x,self._position.y)
		end,
		set_position=function(self,position)
			self._position=position+self.location*16
		end,
		kill=function(self)
			del(game._ship.parts,self) --fix
		end
	}
end
function new_part_command(position)
	local ret = new_part(position)
	ret._sprite=1
	ret.thrust=.5	
	ret.name="command"
	--ret.baseinit=ret.init
	--ret.init=function()
	--	ret:baseinit()
	--end
	ret.kill=function(self)
		gameover()
	end
	return ret	
end
function new_part_engine(position)
	local ret = new_part(position)
	ret._sprite=2
	ret.thrust=1	
	ret.name="engine"
	ret.attach_sides = {
		["1,0"] = false,   -- right
		["-1,0"] = false, -- left
		["0,-1"] = true,  -- up
		["0,1"] = false   -- down
	}
	return ret	
end
function new_part_bulkhead(position)
	local ret = new_part(position)
	ret._sprite=4
	ret.name="bulkhead"
	ret.attach_sides = {
			["1,0"] = false,   -- right
			["-1,0"] = false, -- left
			["0,-1"] = false,  -- up
			["0,1"] = false   -- down
		}
	return ret	
end
function new_part_scaffold(position)
	local ret = new_part(position)
	ret._sprite=12
	ret.name="scaffold"
	return ret	
end



:: part_spawner.lua
--[[pod_format="raw",created="2025-05-20 03:17:51",modified="2025-05-20 19:14:34",revision=250]]
new_part_spawner=function ()
	return {
		spawn_rate=60,
		timer=200,
		left=0,
		right=480-16,
		parts={new_part_engine,new_part_bulkhead,new_part_scaffold},
		init=function(self)
		end,
		update=function(self)
			if(self.timer>self.spawn_rate) then
				self:do_spawn()
				self.timer=0
			else
				self.timer+=1
			end
		end,
		do_spawn=function(self)
			local pos= new_point(self.left+random(self.right-self.left),-16)
			local part =new_free_part(pos,pick_random(self.parts)())
			part:init()
			add(game.free_parts,part)	

		end
		
	}
end
:: point.lua
--[[pod_format="raw",created="2025-05-19 15:09:53",modified="2025-05-20 13:08:05",revision=255]]
function new_point(x,y)
	return sm({
		x=x,
		y=y,
		unitVector=function(self,b)
			return normalize(b-self)
		end,
		randomize=function(self,p)
			return new_point(self.x+random(p.x),	self.y+random(p.y))
		end,
		absPoint=function(p)
			return new_point(abs(p.x),abs(p.y))
		end,
		round=function(p,n)
			return new_point(flr(p.x/n+.5)*n,flr(p.y/n+.5)*n)
		end,
		clone=function(p)
			return new_point(p.x,p.y)
		end,
		square_to_circle=function (p)
	    local a = math.max( math.abs(p.x), math.abs(p.y)) -- max(|x|, |y|)
	    local mag = math.sqrt(p.x * p.x + p.y * p.y)
	
	    if mag == 0 then
	        return 0, 0 -- Origin stays at origin
	    end
	
	    local scale = a / mag
	    return new_point(p.x * scale, p.y * scale)
		end,
		__add=function(a,b)
			return new_point(a.x+b.x,a.y+b.y)
		end,
		__mul=function(a,b)
			return new_point(a.x*b,a.y*b)
		end,
		__sub=function(a,b)
			return new_point(a.x-b.x,a.y-b.y)
		end,
		equals=function(self,b)
			if(b == nil) then
				return false
			end
			return self.x==b.x and self.y==b.y
		end,
		__tostring=function()
			return "point"
		end,
		lerp=function(self, a, t)
		-- a and b are points, t is a number between 0 and 1
			local math=self + (a - self) * t
			--pq(self.x,a.x,t,math.x)
			return math
		end
	})
end
:: sfx.lua
--[[pod_format="raw",created="2025-05-20 16:55:03",modified="2025-05-20 20:31:23",revision=32]]
sfx_channels = {}
function play_sfx(sfx_id, channel,loop,restart)
	data = sfx_channels[channel]
	if data and (restart or false) and data.sfx_id == sfx_id then
		return
	end
		sfx(sfx_id, channel, loop)
		sfx_channels[channel] = {
			sfx_id = sfx_id,
			loop = loop,
			start_time = t()  -- use time() if preferred
		}

end

-- Stop SFX only if the given sfx is currently playing on the channel
function stop_sfx(sfx_id, channel)
	if channel then
		-- Stopping on a specific channel
		local data = sfx_channels[channel]
		if data and (sfx_id == nil or data.sfx_id == sfx_id) then
			sfx(-1, channel)
			sfx_channels[channel] = nil
		end
	elseif sfx_id == nil then
		-- No channel and no sfx_id: stop everything
		for ch, data in pairs(sfx_channels) do
			sfx(-1, ch)
			sfx_channels[ch] = nil
		end
	end
end
:: ship.lua
--[[pod_format="raw",created="2025-05-19 15:07:48",modified="2025-05-20 20:31:23",revision=709]]
function new_ship(position)
	return{
		parts={},
		_position=position,
		_speed=new_point(0,0),
		_mass=0,
		_thrust=0,
		_acceleration=.5, --fudge number
		init=function(self)
			local command=new_part_command(self._position)
			command:init()
			add(self.parts,command) 
			self:update_ship()
		end,
		update=function(self)
			local acceleration = self._thrust/self._mass*self._acceleration
			if input:button(input_lookup.lpad.left) then --left
			   self._speed.x-=acceleration
		   elseif input:button(input_lookup.lpad.right) then --right
			   self._speed.x+=acceleration
		   end
		  	
		  	if input:button(input_lookup.lpad.up) then --left
			   self._speed.y-=acceleration
		   elseif input:button(input_lookup.lpad.down) then --right
			   self._speed.y+=acceleration
		   end   
			self._position+=self._speed --apply velocity
			self._speed*=0.90
			foreach(self.parts, function(part)
				part:set_position(self._position)
	    		part:update()
	 	 	end)	
	 	 	self:do_part_pickups()
			self:do_asteroids()
		end,
		draw=function(self)
	 	 	foreach(self.parts, function(part)
	    		part:draw()
	 	 	end)
		end,
		do_part_pickups=function(self)
			local dimension= new_point(16,16)
	 	 	for i = 1, #game.free_parts do				
				local free_part = game.free_parts[i]			
				for j = 1, #self.parts do
					local ship_part = self.parts[j]		
					local result = block_collision(free_part._position, dimension, ship_part._position, dimension)
					if result != nil then
						local attached=self:attach_part(ship_part,free_part,result)
						if(attached==false) then
							free_part._speed+=result*0.005
						end
						return  -- exit both loops early
					end
				end
			end
		end,	
		do_asteroids=function(self)
			local dimension= new_point(16,16)
			for i = 1, #game.asteroids do				
				local asteroid = game.asteroids[i]			
				for j = 1, #self.parts do
					local ship_part = self.parts[j]
					local result = block_collision(asteroid._position, dimension, ship_part._position, dimension)--fix
					if result != nil then
						
						if(asteroid.threat<2) then --todo: consolidate check connector better
							local cardinal=cardinal_direction(result,0)
							local key = cardinal.x .. "," .. cardinal.y						
							local can_hurt = ship_part.attach_sides[key]
							if(can_hurt==false) then
								asteroid:kill(1)
								return
							end
						end
						asteroid:kill(0)
						ship_part:kill()
						self:update_ship()
						return
					end
				end
			end
		end,
		update_ship=function(self)
			local unattached=find_unattached_parts(self.parts)	
			for i = 1, #unattached do
				local part=unattached[i]
				part:kill()
			end
	
			self._mass=0
			self._thrust=0
			foreach(self.parts, function(part)
				self._mass+=part.mass
				self._thrust+=part.thrust
	 	 	end)
		end,
		attach_part=function(self,ship_part,free_part,collision_result)
			local direction=cardinal_direction(collision_result,8)
			if(direction!= nil and parts_can_attach(ship_part, free_part.part, direction))then				
				local new_location=ship_part.location+ direction
				for i = 1, #self.parts do --check if this spot is already taken
					local ship_part = self.parts[i]		
					if(new_location==ship_part.location) then 
						return false
					end
					
				end
				free_part.part.location=new_location
				add(self.parts,free_part.part)
				del(game.free_parts,free_part)
				self:update_ship()
				play_sfx(2,0)
				return true
			else
				return false				
			end
			
		end
		
	}
end
function loc_key(p)
	return p.x .. "," .. p.y
end
function find_unattached_parts(parts)
	local visited = {}
	local part_map = {}

	-- Build lookup by location
	for _, part in pairs(parts) do
		part_map[loc_key(part.location)] = part
	end

local directions = {
	{ dx = 1, dy = 0 },
	{ dx = -1, dy = 0 },
	{ dx = 0, dy = 1 },
	{ dx = 0, dy = -1 }
}

function flood_fill(part)
	local key = loc_key(part.location)
	if visited[key] then return end
	visited[key] = true

	for _, dir in ipairs(directions) do
		local dx, dy = dir.dx, dir.dy
		local neighbor_pos = new_point(part.location.x + dx, part.location.y + dy)
		local neighbor_key = loc_key(neighbor_pos)
		local neighbor = part_map[neighbor_key]

		if neighbor then
			-- If either side allows attachment
			local dir_key = dx .. "," .. dy
			local reverse_key = (-dx) .. "," .. (-dy)

			local this_allows = part.attach_sides[dir_key]
			local neighbor_allows = neighbor.attach_sides[reverse_key]

			if this_allows or neighbor_allows then
				flood_fill(neighbor)
			end
		end
	end
end

	-- Start from origin part at (0,0)
	local start = part_map["0,0"]
	if start then
		flood_fill(start)
	end

	-- Now collect any parts not visited
	local unattached = {}
	for _, part in pairs(parts) do
		if not visited[loc_key(part.location)] then
			add(unattached, part)
		end
	end

	return unattached
end
function parts_can_attach(partA, partB, direction)
	local key = direction.x .. "," .. direction.y
	local reverse_key = (-direction.x) .. "," .. (-direction.y)

	local a_can_attach = partA.attach_sides[key]
	local b_can_attach = partB.attach_sides[reverse_key]

	return a_can_attach or b_can_attach
end
:: start.lua
--[[pod_format="raw",created="2025-05-20 16:44:31",modified="2025-05-20 20:31:23",revision=90]]
function new_start()
	return{
	sprites,
	init=function(self)
		camera_helper:set_camera(new_point(0,0),true)
		self.sprites=	fetch("./gfx/0.gfx")	
	end,
	update=function(self)
		camera_helper:update_camera()
		if(btn()>0) then
		 start_level()
		end

	end,
	draw=function(self)
		cls()
		spr(self.sprites[192].bmp,(480-200)/2,20)
		print_centered("Time to haul",200,8)
		print_centered("Press any button",220,({7,7,6,13,5,0,5,13,6,7,7})[flr(t()*10)%11+1]) 	

	end}
	
end

:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA1LTE5IDE0OjE0OjE1Iixtb2RpZmllZD0iMjAyNS0w
NS0yMCAyMDozOTowNiIscnVudGltZT0xOCx3b3Jrc3BhY2VzPXt7bG9jYXRpb249ImluY2x1ZGUu
bHVhIzYiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImdhbWUubHVhIzM4Iix3b3Jrc3Bh
Y2VfaW5kZXg9MX0se2xvY2F0aW9uPSJzdGFydC5sdWEjMTciLHdvcmtzcGFjZV9pbmRleD0xfSx7
bG9jYXRpb249InNoaXAubHVhIzc3Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJwYXJ0
cy5sdWEjMSIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0ic2Z4Lmx1YSMyIix3b3Jrc3Bh
Y2VfaW5kZXg9MX0se2xvY2F0aW9uPSJhc3Rlcm9pZC5sdWEjMTgiLHdvcmtzcGFjZV9pbmRleD0x
fSx7bG9jYXRpb249ImdhbWVfb3Zlci5sdWEjMTkiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRp
b249ImdmeC8wLmdmeCIsd29ya3NwYWNlX2luZGV4PTJ9LHtsb2NhdGlvbj0ibWFwLzAubWFwIix3
b3Jrc3BhY2VfaW5kZXg9M30se2xvY2F0aW9uPSJzZngvMC5zZngiLHdvcmtzcGFjZV9pbmRleD00
fX1dXQ==
:: [eoc]
